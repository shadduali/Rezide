[1mdiff --git a/imp/allfiles.csv b/imp/allfiles.csv[m
[1mindex 47d447c..0108f78 100644[m
[1m--- a/imp/allfiles.csv[m
[1m+++ b/imp/allfiles.csv[m
[36m@@ -1,18 +1,4 @@[m
 data[m
[31m[m
[31m-"JOB DESCRIPTION Job Title: Data Analy tics Specialist Dept./ Division: Enterprise Information Services Reporting to: VP Enterprise Information GENERAL ACCOUNT A BILITY The Data Analytics S pecialist is responsible for developing information driven insight s to help identify trends and opportunit ies and provide solutions based on these insights. They will work closely with the E nterprise Information Services (EIS) team to extract meaning from complex data relationships in order to e nhance our ability to better serve our Members . They will provide in depth analysis of Data using Data Mining and Profiling techniques to help us u nderstanding member behavio u r and predict future needs. An expert in Big Data relationships th is individual will have the background in trend analysis and predictive modellin g required to develop reports that enable us to anticipate and meet member needs with solutions tailored to their individual circumstances. Possessing strong abilities in data and report presentation, the successful candidate will also have the ability to effectively communicate information to our staff in a way that is clear and easily understood by the end user. Primary Duties and Responsibilities Business Unit Support Acts as the Data Analytics expert Understands and extracts meaning from complex data relationships a nd develops reports to enable effective use of the resulting knowledge Utilizes data models to generate profiles that allow us to customize our service offerings to the specific needs of each Member based on their profile Develops predictive modelling and trend analysis tools that anticipate Member needs and provide real - time solutions to meet those needs Provides training support for the use of new reports and tools Reporting / Analytics Lead the development and enhancement of reporting services to encompass greater use of forward looking predictive elements Assist with data gathering strategies to ensure alignment with corporate go als and objectives Identifies new opportunities for data gathering to fill gaps in existing models and/or enhance models in order to drive higher levels of performance throughout the organization Design and enhance data models to analyze and predict future Member behaviours enabling us to proactively meet client needs Assists in other duties as required. O rganizational Competencies Sales & Service Orientation Committed to serving and satisfying the needs of the external and internal members/clients through the delivery of superior value while building, strengthening and maintaining long - term relationsh ips ."[m
[31m-Prepaid EAI: NFR = 1200000 subscribers/day ( i.e. 13.89 TPS) Need subscribers to activate on some services may be 1 lakh Create 2 scenarios of Churn â€“ When only prepaid EAI is pushing the numbers into the queue. When only prepaid EAI and post-paid EAI are pushing the numbers into the queue. Monitor following: Prepaid Consumer Logs and processing Tomcat Server JMS Queue Premium Server End to End transactions status Server Parameters Postpaid EAI: NFR = 700000 subscribers/day (i.e. 8.10 TPS) Need subscribers to activate on some services Create 2 scenarios of Churn â€“ When only post-paid EAI is pushing the numbers into the queue. When only prepaid EAI and post-paid EAI are pushing the numbers into the queue. Monitor Following: Prepaid Consumer Logs and processing Tomcat Server JMS Queue Premium Server End to End transactions status Server Parameters`[m
[31m-"S. NOProblem DescriptionSuggested SolutionResponsible FunctionStatus 1Requirement Analysis - Currently QA is not involved at the time of requirement understanding from IBM, however, developer is involved. This leads to understanding gap.QA involvement to be increased starting from requirement understnading phase from IBM teamPMOpen 2Requirement Change - Every requirement change during design/development is NOT notified to team, particularly QA. It creates confusion while testing. Requirement change during development (design, condition, etc) should be documented or shared on Email to the whole Dev and QA teamDevOpen 3Daily Stand up - Daily standup with team is not practised currently.Daily standup with team(Dev & QA) should be conducted to be on same page with updates from everyone.PMOpen 4Code Commit - Code Push to GIT before giving to QA is not practised everytime.Code should be pushed to GIT, before giving to QA. This process should be followed everytime.DevOpen 5Deliverable items - JARs & WARs to be managed in Central repositoryJenkins with Arti-factory should be introduced.DevOpen 6Repetitive work - Currently repetitive work/regression is very high which consumes time.Using jmeter/soapUI to initiate request, and automating manual flows will improve testing and save time and changes to be done in existing automation for regression.QAOpen 7Defect Leakage - Defects as being observed in production.Dependency on IBM team to be reduced. For eg.- UUP,IBM Q,BOS stub. [Harsha: If in any case one SIT environment is reserved for QA.]PMOpen 8Deployment Steps - Deployment steps to be shared to QA for major builds.Deployment steps to be shared to QA for major builds.DevOpen"[m
[31m-Proprietary Document of Human Resource Department Page 1 JOB DESCRIPTION Role : Marketing Services Consultant L ocation : Noida _________________________________________________________________________ ____________________ _ Scope and Purpose of the Job : You will be responsible for Marketing Services for Telecom Service Provider and Enterprises and take ownership of the service - life pro grammes and manages both client retention and growth by providing proactive strategic recommendations and operational delivery of marketing programmes. You will be part of a team on the account made up of Analysts and will receive support from Data Scientists. You will work cl osely with the Sales and Technology responsible for the account. You have a data driven marketing background with a track record o f driving marketing KPIs. You have successfully managed large - scale marketing programmes in the past . K ey Responsibilities : Client Management To build strong client rel ationships at the highest level and a ct as a key point of contact for clients at both a strategic and operational level To personally manage the client Responsibility to ensure invoicing is triggered on - time by the Finance team and support the Finance team on timely cash collection Marketing Service Driving Marketing Services work to define the strategic p lan and tactical operations Leading in the delivery of marketing consultancy for clients including: Business Case/Model Input to Functional Specification s for Programs Clustering/Segmentation Exploratory Analysis High Level Campaign Strategy Propensity modeling and Prediction s Detailed Campaign Strategy Definition of KPI Reporting Marketing Training/Support Global Benchmark Review Leading in the operational delivery of marketing programs including: Campaign Report Set - Up Detailed Campaign Plan Test & Learn Campaigns Multivariate Campaign Testing Interpretation of KPI Reporting Campaign Audit Campaign Reporting Ad - hoc campaign analysis ROI analysis Developing and agreeing a Marketing plan for the CBM and driving the service KPIs Agree a set of target KPIs for the programs with the clients and drive the results personally[m
[31m-"# Job Title Software Developer # Job Description Scope and Purpose of the Job: The backend developer takes care of the product release lifecycle, from the analysis of new features to the delivery of changes in production. You will be in charge of both day-by-day activities as well developing the evolution of the products, and will ensure that the expected performance and quality standards are met. The backend developer also contributes actively to the organization and evolution of development process and participates to release planning. Key Responsibilities: . Functions as developer focused on Java and J2EE technologies i.e. Core Java, J2EE, Struts, Spring, Hibernate, Web services(SOAP, REST) , Maven, JUnit, ActiveMQ, Web logic Server . Assists in development and improvement of application maintenance plans, processes, procedures, standards and priorities . Ensuring regular checks and maintenance of existing systems # Skills Skills and Experience Required: 1. Functions as developer focused on Java and J2EE technologies i.e. Core Java, J2EE, Struts, Spring, Hibernate, Web services(SOAP, REST) , Maven, JUnit, ActiveMQ, Web logic Server 2. Assists in development and improvement of application maintenance plans, processes, procedures, standards and priorities 3. Ensuring regular checks and maintenance of existing systems. 4. B.E./B.Tech/MCA from reputed college with excellent academics 5. Over 2 - 3 years of experience in developing medium/large sized projects in a variety of technologies 6. Hands-on knowledge of J2EE, together with lightweight frameworks including Spring MVC and Hibernate technologies 7. Good understanding of the application development and deployment life cycle and methodologies 8. Experience with server side programming in a telecom specific high volume large system / application environment would be an added advantage 9. Experience working with Linux as Operating System 10. Knowledge of one or more open source software products Maven, JUnit, Apache ActiveMQ, JMX 11. Experience of working with RDBMS and in particular MySQL / MongoDB Database server # Keywords Java, J2EE, Struts, Spring, Hibernate, Web Services, SOAP, REST, Maven, JUnit, Apache ActiveMQ, JMX, MySQL, MongoDB"[m
[31m-"- Activate the prepaid numbers on a service - Hit the Refund URLs - Hit the Callback URLs service_counter=1 key=""post_nrml"" log=logs_ACT.txt echo `date +'%Y-%m-%d %H:%M:%S.%3N'` >> $log for mdn in `cat /home/sandman/loadtest/postpaid_churn/${2}` do url=""http://172.30.49.154:6005/subscription/ActivateSubscription?msisdn=${mdn}&srvkey=${key}&user=ibmuser&pass=Ibm@2011&mode=sms&originator=ALL&reqType=sub&precharge=N&reqdate=20151102&reqtime=123456&info=activation:request|AGR:a&siteid=MU&Refid=110204${id}"" echo `date +'%Y-%m-%d %H:%M:%S.%3N'`"" "" $url >> $basepath/$log count=`expr $count + 1` ### below logic for calling service seraily #if [ $service_counter -eq 5 ] # then # service_counter=1 # else # service_counter=`expr $service_counter + 1` #fi ##### end ################################ id=`expr $id + 1` if [ $count -eq $tps ] then sleep .970 count=0 fi done echo `date +'%Y-%m-%d %H:%M:%S.%3N'` >> $log"[m
[31m-"Test Scenario 2 : To read the 50228 messages from IBM Q via consumer and push the messages to JMS Q. This process runs in 5 parallel threads. The test objective is to notice if the messages are processed smoothly using thread pooling in consumer. Processing Time: Consumer starts time = 2017-03-23 08:00:59 Consumer End Time = 2017-03-23 08:49:25 Total Time taken to process the messages ~ 50 Minutes DB Before Running the Consumer trigger: mysql> select status, count(*) from jmailer_ibmse_1.se_subscription_details group by status; +--------+----------+ | status | count(*) | +--------+----------+ | active | 53 | | AVR | 24988 | | CSR | 12 | +--------+----------+ 3 rows in set (0.21 sec) mysql> select status, count(*) from jmailer_ibmse_2.se_subscription_details group by status; +--------+----------+ | status | count(*) | +--------+----------+ | ACTIVE | 5 | | AVR | 24997 | | CSR | 3 | +--------+----------+ 3 rows in set (0.21 sec) JMS Q at 8:26 Consumer Logs Statistics: Message Sent successfully per minute: [be3a@SVHJ1089 scevent]$ grep -E 'com.bdii.se.parser.QueueDataParser' /logs/scevent/scevent.log | grep -E 'Message sent successfully' | grep '2017-03-23 08:05' | wc -l 664 Messages sent per second: [be3a@SVHJ1089 scevent]$ grep -E 'com.bdii.se.parser.QueueDataParser' /logs/scevent/scevent.log | grep -E 'Message sent successfully' | grep '2017-03-23 08:15:02' | wc -l 11 Messages sent per minute: [be3a@SVHJ1089 scevent]$ grep -E 'com.bdii.se.parser.QueueDataParser' /logs/scevent/scevent.log | grep -E 'Message sent successfully' | grep '2017-03-23 08:15' | wc -l 696 Received per minute: [be3a@SVHJ1089 scevent]$ grep -E 'com.bdii.se.MessageObserver' /logs/scevent/scevent.log | grep -E 'com.bdii.se.MessageObserver@ QUEUE MESSAGE RECIEVED' | grep '2017-03-23 08:15' | wc -l 689 Messages received per sec: [be3a@SVHJ1089 scevent]$ grep -E 'com.bdii.se.MessageObserver' /logs/scevent/scevent.log | grep -E 'com.bdii.se.MessageObserver@ QUEUE MESSAGE RECIEVED' | grep '2017-03-23 08:15:02' | wc -l 11 Total no of message received: grep -E 'com.bdii.se.MessageObserver' /logs/scevent/scevent.log | grep -E 'com.bdii.se.MessageObserver@ QUEUE MESSAGE RECIEVED' | grep '2017-03-23 08:' | wc -l 50225 Total no of messages sent successfully: [sandman@SVHJ1089 ~]$ grep -E 'com.bdii.se.parser.QueueDataParser' /logs/scevent/scevent.log | grep -E 'Message sent successfully' | grep '2017-03-23 08:' | wc -l 49997 Message which does not exist in SE: [sandman@SVHJ1089 ~]$ grep -E 'com.bdii.se.parser.QueueDataParser' /logs/scevent/scevent.log | grep -E ""Record doesn't exist at SE"" | grep '2017-03-23 08:' | wc -l 228 Test Scenario 1: To read the approximately 50K messages from IBM Q via consumer and push the messages to JMS Q. This process runs in 5 parallel threads. The test objective is to notice if the messages are processed smoothly using thread pooling in consumer. Processing Time: Consumer starts time = 22/03/2017 15:02:18 Consumer End Time = 22/03/2017 17:02:29 No of Messages in IBM Q = 50000 (approximately) No of Messages Processed = 172797 Total Time taken to process the messages ~ 2 Hours Consumer Logs Reference: -bash-3.2$ grep -E 'com.bdii.se.jms.MessageSender' /logs/scevent/scevent.log | grep -E 'Message Object:' | wc -l 172797 USER STATE AT SE BEFORE CONSUMER START: Previous Data: Split-1: Active-1, AVR-2, CSR-24496 Present State: mysql> select status, count(*) from se_subscription_details where service_name = 'post_nrml' group by status; +--------+----------+ | status | count(*) | +--------+----------+ | ACTIVE | 1 | | AVR | 2 | | CSR | 49484 | +--------+----------+ 3 rows in set (5.61 sec) Split-1 Second Round = 24988 â€“ CSR Previous Data: Split-2: CSR-24499 Present State: mysql> select status, count(*) from se_subscription_details where service_name = 'post_nrml' group by status; +--------+----------+ | status | count(*) | +--------+----------+ | CSR | 49496 | +--------+----------+ 1 row in set (6.30 sec) Split-2 Second Round = 24997 â€“ CSR S.No. User State Number Of Subscribers 1 CSR 49985 2 Active 0 3 AVR 0 Existing Q: While Load Testing: At 16:32"[m
[31m-"Mohd Mamoon Email: m936919@gmail.com,Phone: +91-9889131732 Executive Summary: Having around 2 years of experience in software development. Good knowledge of System Development Life Cycle (SDLC). Strong Object Oriented concepts for software design and implementation. Strong knowledge of Core Java, Hibernate, Spring MVC, Design Pattern, Servlets, Jdbc , JSP ,HTML, JavaScript, Maven,UNIX, Web Service Soap. Experience in developing the web based applications using Java Technologies. Experience in developing the Desktop based applications using Java Technologies Strong interpersonal and communication skills with an ability to work with team and keep them motivated. Ability to achieve project goals within project constraints such as scope, timing and quality. An energetic, self-motivated team player with refined designing and analytical skills. Professional Experience: Working as a Software Developer with Amdocs Service Private Ltd. (From 30 Nov 2015 to March 2017) Worked as software developer with Glocal Technologies Pvt Ltd.(From 6 April 2015 to 27 Nov 2015) Technical Skills: Skill Type Experience Knowledge on Programming Languages Java C Web Technologies HTML, JavaScript, XML,CSS JQuery J2EE technologies Servlets, JSP, JDBC Frameworks Spring Mvc, Hibernate, Web Service Web/App Servers Tomcat, JBoss IDEâ€™s Eclipse, Websphere Database MySQL Operating System Windows XP/7 Unix Professional Project #1: project Service Delivery Platform Duration Nov 2015 to Current. Role Software Developer Team size 5 Environment Software Tools & Technologies: Spring, Hibernate, Servlets, JSP, JavaScript,WebSphere Integration Developer, Tomcat, Oracle, HTML,Ant, Web Services. Description: SDP Service Delivery Platform is an Application of AT&T. It is a part of OMS product that receives thousands of orders from upstream applications, validates them and further sends to the downstream applications. It is Telecommunication domainâ€™s project. I was involved in order management process of Business Support Systems (other processes are product management, revenue management and customer management) and my project was Service Delivery Platform which is a middleware system responsible for orchestrating the flow of orders. SDP has two subcomponents, Complex Process Controller (CPC) and Simple Process Controller. SPC is a transactional management system which monitors the transactions coming-into and flowing out of SDP. Roles & Contribution: Developed change Requests for the existing system Developed new enhancements to the system Involved with System Architect in Application Design Creation Performed proper UT plan and UT execution for each change request Prepared unit test plans/cases for manual testing Professional Project #2: Lifeline Pharmacy: Description : Lifeline Pharmacy is an online portal which sells everything related to health and fitness like vitamins ,body building supplements, weight loss ,hair loss,skin care products and prescribed medicine(Allopathic, Homeopathy and Herbal) etc. project Lifeline Pharmacy Duration April 2015 to Nov 2015. Role Software Developer Team size 4 Environment Software Tools & Technologies: Core java,Spring, Hibernate, Servlets, JSP, Tomcat, Oracle, HTML,Maven. Roles & Contribution: responsible for developing new inhancement change request and handling the the daily issues. Performed proper UT plan and UT execution for each change request. Involved with System Architect in Application Design Creation. Academic Details: Degree/Certificate Institute/Board Year B.Tech Information Technology IIMT Eng. College Meerut UPTU 2013 XII UP Board 2009 X UP Board 2006 Personal Details: Fatherâ€™s Name Mr. Dilshad Ahmad Date of Birth 15-June-1991 Language Known English, Hindi, Urdu Correspondence Address F-203/4, Shaheen Bagh, New Delhi Place: Delhi Mohd Mamoon"[m
[31m-"Areas to work on: Education in AI Conversational AI Informative BOT History Bot Religious Bot Maths Bot Science Bot Robotframework Python GIT Maven SOAP UI JMeter Test Link AI in Software Testing/QA (NLP, ML and DL) Bug Reports â€“ automatic Test Case Generation - automatic Test Cases automation - automatic Performance Testing automation Security Testing automation Database Testing automation Operational tasks automation like (starting the servers etc from chat client) Linux Shell automation framework Best practices in QA QA for AI based applications"[m
[31m-"SAGUN SHARMA Mobile: +91-7838839808 ~ email: saguns003@gmail.com OBJECTIVE [pic] To get a job in the software industry ACADEMIA [pic] . 2013-2017 B. Tech. in Computer Science and Engineering: COLLEGE (DEEMED) : BS Anangpuria Institute of Technology and Management; UNIVERSITY NAME: Maharishi Dayanand University, Rohtak, Haryana, India. PERCENTAGE (Semester wise) First semester: 68% Second semester: 74% Third semester: 72 % Fourth semester: 78% Fifth semester 82% Sixth Semester 82% Currently in seventh semester. . 2013 Higher Secondary Examination from Amity International School, CBSE board; 86% . 2011 Secondary School Examination from Amity International School, CBSE board; CGPA : 9.2 CORE COMPUTER COMPETENCIES[pic] . Good command over programming languages such as C,C+, java, HTML . Data structures and object oriented concepts as well as operating systems. . Thorough with Macromax Flash player, Ms Excel and Ms Access RELATED COURSEWORK [pic] . Summer Project entitled 'QR code verification on uploaded certificate' with Pitney Bowes,Gurgaon in July 2016. . Done a summer course in Core Android in 2015 from Codifier India Janakpuri. . Done a course in Robotics (Core and Advance) from Edubotix Pune (college campus). . Accomplished a certified course on C,C++ from Indian Institute of Technology, Bombay. . Developed a word editor in C language. . Developed a snakes and ladders game in Java programming language. AWARDS AND HONORS[pic] . Attended the International Conference on Recent Trends in Science and Technology( September 25-26 2015). . Participated in Project Citizen India (An International Civic Education Programme) in 2009. . Received a certificate of community service for teaching students of an underprivileged girl child school- 'Amitasha' in 2012. . Received a proficiency certificate in the subjects Mathematics and English by Central Board of secondary Education (CBSE) in 2011. . Participated in 'Techno Chem' at Navy Children School in 2011. . Actively took participation in 'Walk For Blood' - an initiative to create awareness about the noble cause of voluntary blood donation by Rotary Blood Bank at Rajpath in the year 2010. . Won the Third Prize in 'Vasudha', a district level science competition. My project was on 'Water Hycanith- a weed that can be used as an alternative to make paper'- in 2010. . Participated in various National Science Olympiads (NSO) and International Mathematics Olympiad(IMO). . Participated in English debates and group discussions in school as well as in college. OTHER SKILLS [pic] . Excellent written and oral communication . Dedicated effort over work assigned. . Ability to work gracefully in a team oriented setting . A keen and honest learner who is able to grasp new concepts quickly. ACTIVITIES AND INTERESTS [pic] . An avid reader, with interests in fiction and thriller genre, as well as in English literature. . Having a good hand at writing, with good vocabulary knowledge. . A passionate programmer by choice, having a fairly good hand at designing web pages. . Other interests include badminton and volleyball. PERSONAL DETAILS [pic] Date of Birth: 3rd October, 1995 Language Known: English and Hindi"[m
[31m-"Sania Khan Email: saniakhan569@gmail.com Address: Zion Lakeview Apartments, Sector â€“ 48, Faridabad - 121001 Mobile: +91 9971429357 ______________________________________________________________________ Objective To work with an organization that gives me an opportunity for self improvement and leadership, while contributing to the symbolic growth of the organization with my technical, innovative and logical skills. Qualification Qualification Institute Name Year Percentage B.Tech (Computer Science & Engineering) Amity School of Engineering and Technology, Noida 2017 7.66 CGPA Intermediate (C.B.S.E) Modern Vidya Niketan , Faridabad 2013 91.4 % High School (C.B.S.E) Modern Vidya Niketan, Faridabad 2011 9.6 CGPA Professional Education B.Tech (Computer Science & Engineering) Fundamentals of Programming course from Inceptra Technologies Java programming course from Ducat Projects Currently doing project on Tampering And Fault Detection Of Electricity Meter (Software Development using Visual Studio and Microsoft SQL Server Management Studio) An Industrial project from Elcom Innovations Pvt.Ltd. on Android Based Voice Logger Indicator (May-June 2016) An ONLINE SHOPPING WEBSITE on interior designing using J2EE, html, JavaScript, css, jQuery. (May-June 2015) A term paper premised on Data communication and computer networks â€“network layer functionalities and protocols. (May-June 2014) Technical Skills Ides : Eclipse IDE Database : SQL Server Operating Systems : Microsoft Windows Programming Language : C, C++, Java Extracurricular Activities Participated in the event Amity Tech. Meet,2015 Attended â€˜International Conference on Signal Processing and Integrated Networksâ€™ Hobbies and Other Interests Outdoor activities Dancing Personal Details Fatherâ€™s Name : Mr. M A Khan Gender : Female Marital Status : Single Date of Birth : 21 September 1995 Language : English and Hindi I hereby declare that all the above information produced by me is true. [Sania Khan]"[m
 "User Requirements Specification PCR 08022: SE Online churn feed Document Information |Project Name: |SDP - SE | |Project Manager: |Manish Kamat | |Submitted By: |IBM Corporate Team | |Submitted On: |31/July/2018 | |Version Number: |0.2 |Internal PCR | | | | |No. | | |Priority: |Medium | |(Low, Medium, High, | | |Urgent) | | Change History |Version|Date |Description |Author | |.1 |23-July18|Initial draft |Jeevan Magdum | |draft | | | | |.2 |31-July18|Updated draft |Jeevan Magdum | |Updated| | | | | | | | | | | | | | Table of Contents Change Details 4 Requirement -1:- Changes in SDP SE 4 Comments/Notes/Queries 5 Change Details Requirement -1:- Changes in SDP SE |Change |Final Solution requirement | |request short|For Prepaid customer accept churn request online and check | |description |prepaid/postpaid flag indicator before deleting the active | | |services | | |For Postpaid/Hybrid customer accept churn request online and | | |check date Time stamp before deleting the active services | |Background |Currently, SE churns number using SE_Daily table from UUP. But| | |we have received few issues in Post2Pre Migration, where number | | |is migrated on same day and owner activated some new services, | | |which got deleted by SE in churn. | | |solution | | |For Prepaid customer accept churn request online and check | | |prepaid/postpaid flag indicator before deleting the active | | |services | | |For Postpaid/Hybrid customer accept churn request online and | | |check date Time stamp before deleting the active services | |Detail |There will be online updation of churn for the concerned MSISDN | |Change |in SDP-SE on real time basis. | |requirements |A) Churn updation request for postpaid subscribers will flow via| | |postpaid EAI to SDP-SE. | | |B) Churn updation request for prepaid subscribers will flow via | | |prepaid EAI to SDP-SE. | | |The following logic should be applied for the given churn | | |scenario. | | |Churn by prepaid subscriber: | | |During MSISDN churn status updation at SDP-SE there will be a | | |prepaid/postpaid flag indicator check at SDP-SE for the VAS | | |services active for the corresponding MSISDN. | | |Based on this prepaid/postpaid flag indicator check there will | | |be a decision at SDP-SE on whether an active VAS service for the| | |MSISDN in question should be deleted or not. | | |If the churn request received at SDP-SE is for a prepaid MSISDN | | |and an active VAS service for the said MSISDN has a prepaid flag| | |then that VAS service should be deleted. If the VAS service is | | |deleted in SDP-SE then it will be deactivated for the said | | |MSISDN. | | |If the VAS service has a postpaid flag then it should not be | | |deleted. | | |If the VAS service is not deleted in SDP-SE then it will | | |continue to be active for the said MSISDN. | | |The following logic should be applied for the given churn | | |scenario. | | |Churn by Postpaid subscriber: | | |During MSISDN churn status updation at SDP-SE there will be a | | |date and time stamp check at SDP-SE for the VAS services active | | |for the corresponding MSISDN. | | |Based on this date and time stamp check there will be a decision| | |at SDP-SE on whether an active VAS service for the MSISDN in | | |question should be deleted or not. | | |If the activation date and time stamp of the active VAS service | | |is after the date and time stamp of MSISDN churn updation in | | |Network then that VAS service will not be deleted and it will | | |continue to be active for the said MSISDN. | | |If the activation date and time stamp of the active VAS service | | |is before the date and time stamp of MSISDN churn updation in | | |Network then that VAS service will be deleted and thus | | |deactivated for the said MSISDN. | | |Hybrid subscribers are in scope for the churn scenario - Churn | | |by postpaid subscriber. For hybrid subscribers the logic | | |mentioned above should be applied. | |Impact |SDP SE | |NFR |Total prepaid subscribers churn per day - Avg. 1200000 | | |subscribers/day | | |Total postpaid subscribers churn per day - Avg. 700000 | | |subscribers/day | |Assumption | | |Reference |[pic] | Comments/Notes/Queries"[m
[31m-"User Requirements Specification PCR 300 : Postpaid Status Change Event Document Information |Project Name: |SDP - SE | |Project Manager: |Neerav Vaghela | |Submitted By: |IBM Corporate Team | |Submitted On: |27/July/2016 | |Version Number: |0.3 |Internal PCR | | | | |No. | | |Priority: |Medium | |(Low, Medium, High, | | |Urgent) | | Change History |Version|Date |Description |Author | |.1 |07-July16|Initial draft |Ram Rege | |draft | | | | |.3 |27-July16|Updated BARRED and SUSPENDE |Ram Rege | | | |Info | | | | | | | | | | | | Table of Contents Change Details 4 Requirement -1:- Changes in SDP SE 4 Comments/Notes/Queries 5 Change Details Requirement -1:- Changes in SDP SE |Change |Accept ""Status Change"" event from Postpaid System and do | |request short|following | |description |1) Churn the number from SE in case status changed to churn. | | |2) Mark customer as BARRED in case status change is barred. | | |3) Mark customer as SUSPENDED in case status change is | | |suspended. | | |4) Don't trigger activation/renewals for BARRED/SUSPENDED | | |customers. | |Background |Currently, SE churns number using SE_Daily table from UUP. But| | |we have received few issues for postpaid number where Postpaid | | |CDR is generated due to delay in receiving the churn. To solve | | |this delay issue, SE need to accept the churn information | | |online. | | |Currently SE is not checking for BARRED status. Need to reject | | |request for BARRED status. | | |Currently SE is not checking for SUSPENDED/ BARRED status during| | |renewal. Need to stop renewal for SUPSENDED status and start | | |again once CP customer becomes active again. | |Detail | | |Change |Subscriber to Postpaid queue for ""Status Change"" event. (Refer | |requirements |status change notification format I reference section). | | |Churn | | |Filter the status and accept only churn with status 'pending | | |PD'. | | |Forward the request to SE to soft delete from SE tables. (Same | | |as that is happening currently for SE_DAILY table). | | |SUSPEND | | |Filter the status and accept only status 'TD' and 'SAFE | | |CUSTODY'. | | |Forward the request to SE to mark the customer as SUPENDED. | | | | | |BARRED | | |Filter the status and accept only status 'BARRED' and 'Selective| | |Barring'. | | |Forward the request to SE to mark the customer as BARRED. | | |ACCEPT the reason code for BARRING and stored same against | | |BARRED customer. | | |Accept the status as 'ACTIVE' and mark customer as ACTIVE in | | |case he is in BARRED or SUSPENDED stage. | | | | | | | | | | | |Activation Request | | |Reject the Activation request for customer in case customer is | | |in SUSPENDED or BARRED with reason code as mentioned in property| | |file. | | |(Refer reason code sheet from Reference section.) | | | | | |Renewal Request | | |Customer should not be picked up for renewal in case customer is| | |in SUSPENDED or BARRED with reason code as mentioned in property| | |file. | | |(Refer reason code sheet from Reference section) | | |Update CP to STOP the service as customer is in BARRED or | | |SUSPENDED state. | | |Trigger renewal once the subscriber becomes active again. Call | | |CP to start the service again. | |Impact |SDP SE | |NFR |1.5 lakh request /day for status change event. | |Assumption |This change is only for postpaid subscribers | | |Existing process to get churn from SE_DAILY will continue for | | |prepaid and postpaid. | |Reference |Status Change Notification | | |[pic] | | |BARRED REASON CODE LIST | | |[pic] | Comments/Notes/Queries"[m
 "Subscription Engine - Solution Document nt Author: Mayur Khatri Owner: IBM Customer: IDEA Document History Document Location This is a snapshot of an on-line document. Paper copies are valid only on the day they are printed. Refer to the author if you are in any doubt about the currency of this document. The source of the document will be found in Document1 . Revision History |Date Of This Revision: 4th Mar 2011|Date Of Next Revision: | |Doc |Revision |Change Summary |Edited By | |Ver |Date | | | |1.0 |4 Mar 2011|Initial draft document |Mayur Khatri | |1.1 |21 Mar |Incorporated solution review |Mayur Khatri | | |2011 |comments | | | | | | | | | | | | | | | | | | | | | | | | | | | Reviewed By |S# |Reviewer |Title |Reviewed On | |1 |Jignesh K Karia |Lead Architect | | |2 |Chandrashekhar K |Delivery Owner | | | |Upasani | | | |3 |Sudip Banerjee |Project Manager | | Approvals for Release This document requires following approvals. |S# |Idea/ |Approver |Title | | |IBM | | | |1 |Idea |Tejasvi Bishnoi |SDP Program Manager | |2 |Idea |Kavinder Pawanhee |SDP Business Lead | Distribution This document has been distributed to |S# |Idea/ |Title | | |IBM | | |1 |Idea |Idea Marketing, Revenue Assurance, SDQ, IT, Network, | | | |Security teams | |2 |IBM |Idea SDP Team: IBM GBS-D, Idea PE, Associated SMEs | Contents 1. Introduction 9 1.1 Objective 9 1.2 Purpose 9 1.3 References 10 2. Abbreviation 11 3. Assumption & Dependency 13 4. System Context 15 4.1 Unified user profile (UUP) 16 4.2 Messaging Gateway 16 4.3 WAP Portal 16 4.4 CRM 16 4.5 Web Portal 17 4.6 IVR/OBD 17 4.7 UCS 17 4.8 EAI 17 4.9 Mediation 17 4.10 CMS/VAS Applications/3rd Party CPs 18 4.11 UCSe (UCS evolve) 18 4.12 HLR 18 4.13 RIM 18 4.14 BSCS 6 & BSCS iX / @bility 18 4.15 BSS Systems 19 4.16 IVSM 19 5. Solution Overview 20 5.1 Logical Architecture Diagram 20 5.2 Solution Architecture Overview Diagram 21 5.3 Solution Description 22 5.3.1 Discovery Channel Layer 22 5.3.1.1 Subscription Engine - Messaging Gateway 22 5.3.1.1.1 SMS and STK Channel 22 5.3.1.1.2 USSD 22 5.3.1.2 Subscription Engine - WAP gateway 23 5.3.1.3 Subscription Engine - IVR/OBD Portal 23 5.3.1.4 Subscription Engine - Web Portal 23 5.3.1.5 Subscription Engine - CRM 23 5.3.1.6 Subscription Engine - Other Channels 23 5.3.2 Charging Layer 23 5.3.2.1 UCS 24 5.3.3 Subscriber Profile Repository 24 5.3.3.1 Unified User Profile 24 5.3.3.1.1 Fetch Subscriber Profile 24 5.3.3.1.2 Update Subscription Profile 25 5.3.4 Integration Layer 26 5.3.4.1 EAI 26 5.3.4.1.1 HLR Provisioning 26 5.3.4.1.2 RIM Provisioning 30 5.3.4.1.3 BSCS iX Provisioning 32 5.3.5 Provisioning Layer 33 5.3.5.1 CMS Provisioning 33 5.3.5.2 VAS applications/3rd part content provider 34 5.3.5.3 BSCS 6 Provisioning 34 5.3.5.4 HLR Provisioning (Pre-Transformed Scenario) 37 5.3.5.5 RIM Provisioning 37 5.3.6 BSS Systems 38 5.3.6.1 Revenue Assurance System 38 5.3.6.2 Revenue Settlement System 39 5.3.6.3 Business Intelligence 39 5.3.6.4 Postpaid Billing System 39 5.3.6.5 Mediation 40 5.3.7 Subscription Engine 40 5.3.7.1 Discovery layer 40 5.3.7.2 Subscription Engine Core 41 5.3.7.3 Service Configuration 41 5.3.7.4 Rating Engine 41 5.3.7.5 Reporting Engine 41 5.3.7.6 Logger 41 5.3.7.7 Customer Care Module 42 5.3.8 Monitoring 42 6. Subscription Engine Features 43 7. Product Overview 45 7.1 B3A Platform Overview 45 7.2 B! SUBSCRIPTION MANAGER OVERVIEW 46 7.3 Product Features and Functionalities 48 7.3.1 Subscription Manager GUI 48 7.3.2 Service and Content delivery Features 51 7.3.3 SE Charging Capabilities 51 7.3.4 Charging & Renewal Features 55 7.3.5 Subscription/Charging Models 56 7.3.6 Subscription API 59 7.3.7 Subscription Engine - Reporting Features 60 7.3.8 Monitoring and System Maintenance 61 7.4 Product Architecture 63 7.5 Product Components 64 7.5.1 SANDMAN - DISCOVERY LAYER 64 7.5.2 BOS - B! CHARGING GATEWAY 66 7.5.3 PREMIUM SERVER - SUBSCRIPTION MANAGER 67 7.5.4 ENGINE SMS (RENEWALS, MESSAGE DELIVERY) 68 7.5.5 The Scheduler 69 7.5.6 CRON SERVER (SCHEDULER) 70 7.6 Component Functionalities 71 7.6.1 B! Gateway 71 7.6.2 Processor 71 7.6.3 Subscription module 71 7.6.4 Charging Manager 72 7.6.5 Database / CMS 72 7.6.6 Delivery Engine 72 7.6.7 Cron 73 7.6.8 Subscriber List 73 8. Subscription Engine Use cases for Prepaid 74 8.1 Subscription service via the discovery channels 74 8.1.1 Subscription Activation through SMS 75 8.1.2 Subscription Activation through USSD 81 8.1.3 Subscription Activation through WAP 87 8.1.4 Subscription Activation through WEB 94 8.1.5 Subscription Activation through IVR 101 8.1.6 Subscription Activation through CRM 108 8.1.7 Subscription Activation through OBD 115 8.1.8 Subscription Activation through Sanchaya 121 8.1.9 Subscription Activation through VMS 125 8.2 Renewal of Subscription Service 127 8.2.1 Subscription renewal based on validity 127 8.2.2 Renewal Subscription based on Usage exhaustion 132 8.2.3 Renewal of Service and not Validity 134 8.2.4 Renewal of Service and Validity 136 8.3 Subscription service in grace mode 137 8.4 Subscription service in Suspension mode 141 Suspension to Deactivation mode 141 8.5 Subscription service in deactivation mode 142 8.5.1 OPT IN Deactivation of the subscription 143 8.6 Business Models for the subscription 144 8.6.1 Step charging 146 8.6.2 Micro Charging 148 8.6.3 Trigger Charging:- 151 8.6.4 Fetch and deliver 154 8.6.5 Normal content delivery 156 8.6.6 Try and Buy pack 157 8.7 Combo pack 160 8.7.1 Combo pack 1 160 8.7.2 Combo pack 2 166 8.7.3 Combo pack 3 171 8.7.4 Combo pack 4 177 8.8 Provisioning of the subscription services 183 8.8.1 RBT Provisioning 183 8.8.2 Pre-tone Provisioning 187 8.8.3 GPRS Provisioning 191 8.8.4 Blackberry Provisioning 194 8.8.5 Appstore provisioning 197 8.8.6 Bulk subscription provisioning through API 200 8.8.7 Bulk subscription provisioning through UI 201 8.9 Subscription services for GPRS 202 8.9.1 GPRS plan change 203 8.9.2 Pre-charge GPRS activation request 206 8.9.3 GPRS Daily Pack 210 8.10 Subscription plan for Blackberry 213 8.10.1 Blackberry plan change 214 8.10.2 Blackberry Service change 216 8.11 Subscribers life cycle management 219 8.11.1 IN Status-Active 219 8.11.2 IN Status-InActive 222 8.11.3 IN Status -Grace Period 225 8.11.4 SIM Change 228 8.11.5 Pre to Post Migration 230 8.11.6 Post to Pre Migration 232 8.11.7 Churn Scenario 233 8.11.8 Port Out Scenario 234 9. Subscription Engine Use Cases for Postpaid 237 9.1 Subscription service via the discovery channels 237 9.1.1 Subscription Activation through SMS 238 9.1.2 Subscription Activation through USSD 246 9.1.3 Subscription Activation through WAP 255 9.1.4 Subscription Activation through WEB 263 9.1.5 Subscription Activation through IVR 271 9.1.6 Subscription Activation through CRM 279 9.1.7 Subscription Activation through OBD 287 9.1.8 Subscription Activation through Sanchaya 295 9.2 Renewal of Subscription Service 298 9.2.1 Subscription renewal based on validity 298 9.3 Opt-in Deactivation of Subscription 300 9.4 Try and Buy Pack 302 9.5 Provisioning of Subscription Services 304 9.5.1 RBT Provisioning 304 9.5.2 Pre-Tone Provisioning 311 9.5.3 GPRS Provisioning 316 9.5.4 Blackberry Provisioning 320 9.6 Subscription Services for GPRS 323 9.6.1 GPRS Plan Change 323 9.6.2 GPRS Daily Pack 326 9.7 Subscription Plan for Blackberry 330 9.7.1 Blackberry Plan Change 331 9.7.2 Blackberry Service Change 333 9.8 Subscriber's life cycle management 335 9.8.1 Subscriber's Status - Active 335 9.8.2 Subscriber's Status - Suspend 337 9.8.3 Subscriber's Status - Inactive 339 10. Integration 343 10.1 UUP Integration 343 10.1.1 Fetch subscriber profile 343 10.1.2 Update subscription Profile 344 10.1.2.1 Case I: Subscription Activation 344 10.1.2.2 Case II: Subscription Renewal 345 10.1.2.3 Case III: Subscription Grace 345 10.1.2.4 Case IV: Subscription Suspension 345 10.2 UCS Integration 346 10.2.1 Case I: Request parameter missing error 348 10.2.2 Case II: Operation failed 348 10.2.3 Case III: Connection Time out 349 10.2.4 Case IV: Unable to connect to UCS 349 10.2.5 Case V: Allocation Failed 349 10.3 Integration with BSCS 6 and BSCS iX 350 10.3.1 BSCS 6 Integration 350 10.3.2 BSCS iX integration 351 10.4 Messaging Gateway Integration 352 10.5 CMS Integration 353 10.6 EAI Layer Integration 356 10.6.1 HLR & RIM Provisioning 356 10.6.2 Fetch provisioning information from NSMS 357 10.7 Mediation Integration 359 10.8 CRM Integration 360 11. Solution Benefits 361 12. Reporting 362 13. Logging 367 14. Customer Care 368 15. Traffic projection 371 16. Bandwidth Calculation 372 17. Deployment Architecture 373 18. Back-up & Recovery 374 18.1 Backup Components 374 18.2 Backup Frequency 374 18.3 Backups Verification 375 19. Appendix 376 19.1 Messaging Gateway HTTP Legacy Specification 376 19.2 Messaging Gateway SMPP Connector Specification 376 19.3 Messaging Gateway HTTP Adapter Specification 376 19.4 UCS Evolve Interface Specification for GPRS Provisioning 376 19.5 CMS WSDL 376 19.6 SDP Subscription Engine CDR Specification 377 19.7 UCS Interface Specification for Charging 377 Introduction Idea Cellular is part of the Aditya Birla Group, which is India's multinational corporation. Global in vision, rooted in Indian values, the group is driven by a performance ethic pegged on value creation for its multiple stakeholders. Considering the current trends in the telecom market, it has become extremely important for a telecom operator to focus on messaging and message related applications. Messaging channels provide one of the most effective ways to reach out to the customers. 1 Objective This document describes the solution architecture for subscription engine which will depict the interaction among various components or modules within subscription engine and also with other components/systems in overall IDEA ecosystem. The solution architecture represents the governing ideas and various components/systems of an IDEA SDP from the subscription engine perspective. It provides an overview of the main conceptual elements and relationships in architecture including subsystems, components, connections, data stores, users and external systems. 2 Purpose The purpose of this document is: . Communicate a conceptual understanding of the target IT system from subscription engine perspective in IDEA SDP environment . Provide a high level shared vision of the solution architecture and scope of the proposed IT system . Document the architectural decisions made during solution design . Depict the System Context diagram representing subscription engine as single entity and shows all other external SDP components/systems that interact directly or indirectly with subscription engine . Presents all the use cases and call flows in which subscription engine plays a vital role . Depict the component model and interaction of components with in subscription engine and interaction with other SDP components . Depict the non functional aspects affecting Quality of Service and imposing constraints for the system . Show logically how the system components will be deployed and how they will interact . Depict the Operational Model describing the operation of the IT system derived primarily from the Non-Functional Requirements . Facilitate effective communication between different communities of stakeholders and developers . Facilitate orientation of new people who join the project 3 References This document is based on and refers to the following documents: . Idea Requirement Document for Subscription Engine V1.7.doc . SM_Product_Overview.PDF . SDP Messaging Gateway Solution Document . SDP Content Management System (CMS) Solution Document . SDP Unified User Profile (UUP) Solution Document . Nokia Unified Charging System Features and Interface Document Abbreviation |Acronyms |Expansion | |SDP |Service Delivery Platform | |SM |Subscription Manager | |CMS |Content Management System | |SMS |Short Message Service | |IVR |Interactive Voice Recognition | |EAI |Enterprise Application Integration | |VAS |Value Added Service | |HTTP |Hyper Text Transfer Protocol | |OS |Operating System | |SMSC |Short Message Service Centre | |API |Application Programming Interface | |MSISDN |Mobile Station Integrated Services Directory | | |Number | |SMPP |Short Message Peer-to-Peer Protocol | |WAP |Wireless Application Protocol | |SOAP |Simple Object Access Protocol | |JDBC |Java Database Connectivity | |MG |Messaging Gateway | |UUP |Unified User Profile | |CIMD |Computer Interface to Message Distribution | |FTP |File transfer Protocol | |UCS |Unified Charging System | |SE |Subscription Engine | |CRM |Customer Relationship Management | |UCS |Unified Charging Suite | |BI |Business Intelligence | |RA |Revenue Assurance | |RSS |Revenue Settlement System | |HLR |Home Location Register | |NSMS |Number and SIM Management System | |RIM |Research in Motion | |IVSM |IDEA Value Added Service Services Management | |RBT |Ring Back Tone | |GPRS |General Packet Radio Service | |USSD |Unstructured Supplementary Service Data | |STK |SIM Toolkit | |UCSe |Unified Charging Suite Evolve | |BSS |Business Support Systems | |CP |Content Provider | |SNMP |Simple Network Management Protocol | |MIB |Management Information Base | |MO |Mobile Originated | |MT |Mobile Terminated | Assumption & Dependency The following are the assumptions taken for designing the subscription engine solution 1. Any application/system initiating the request pertinent to subscriptions will call the standard HTTP/s or APIs exposed by the subscription engine. 2. SE will only support VAS services subscription life cycle management. 3. SE will not store any application/content specific information in its database. 4. UCS will provide the Fetch balance API. 5. UCS must support the volume required for subscriptions request with low latency and high throughput. 6. UCS will do the load balancing of the request landing on its system. 7. UCS denies the charging request if the subscriber is in grace on IN 8. SE will provide the start and stop notification to respective applications for content delivery except for scenario wherein SE will fetch and deliver the content 9. SE will maintain the usage counters for the scenarios wherein SE will fetch and deliver the content else it will be maintained by respective applications responsible for delivering the content/service. 10. Applications responsible for delivering the content/service will send the usage exhaust notification to SE. 11. For daily subscription packs, pre-renewal notification message will not be sent by SE. 12. For daily subscription packs, if charging fails than SE will retry charging only once. 13. For trigger charging, e.g. charging on match day, if charging fails than SE will retry charging only once. 14. For blackberry, modify service request scenario, existing blackberry service will be replaced by new requested blackberry service, hence requested black berry service will be provisioned only on RIM server and not on HLR. 15. For blackberry, modify plan request scenario, existing blackberry service plan will be replaced by new requested blackberry service plan, hence requested black berry service plan will neither be provisioned on RIM server nor on HLR. 16. Mediation will be responsible for maintaining the consistent provisioning across HLR and RIM server. 17. Any application/system initiating pre charged subscription request will invoke the SE API by providing pre charged flag as one of the parameter else SE will charge for that subscription again 18. For successful charging in suspended period, next renewal date will be calculated starting from the same day. 19. GPRS service will be provisioned in HLR by default for prepaid and postpaid subscribers. 20. GPRS pre charged subscription initiation based on IN recharge scenario, if the subscriber's GPRS plan is already changed on same day than SE will reject the subscription request. 21. Subscription engine will not apply any business rules pertinent to any subscription orders for postpaid. 22. For all the Combo packs will apply only step charging as the business model 23. In combo 1 scenario, renewal charging would be based on priority defined by the product manager in low balance scenario 24. In combo 3 and combo 4 scenario, renewal will be based on the longest running service of the combo pack 25. In the scenarios where pin validation is required, respective systems will be responsible to do the pin validations before handing over the request to subscription engine, i.e. subscription engine will not perform any pin validations nor will it maintain the pin in its system. 26. During the pre to post and post to pre migration, MSISDN will remain same. 27. In pre to post and post to pre migration, services deprovisioning of subscriber on HLR will be done through order management. 28. In post to pre migration, blackberry deprovisioning on RIM will be done through order management. The following are the dependencies for successful execution of subscription engine solution 1) ICL will provide the combo pack business logic well in advance. 2) ICL will provide the exact definitions of existing subscription services well in advance. 3) ICL will provide the format for adjustment code pertinent to subscription 4) Provide the discovery channels integration details with subscription engine System Context The figure 2-1 below depicts centralized subscription engine in the context of all other interacting SDP components in ICL's ecosystem. This diagram considers subscription engine as a single entity and shows all other external SDP components that interact directly or indirectly with subscription engine. [pic] 1 Unified user profile (UUP) Centralized subscription engine will interface with UUP for the following task a) To fetch the subscriber profile for performing the subscription specific validations viz. prepaid/postpaid, ported out, status, category, etc. along with the provisioning parameters like HLR ID, IMSI and SIM ID pertinent to subscriber's profile requesting for the service. b) Subscription engine will update the UUP database with the subscriber's subscription profile which contains subset of subscriber's subscription profile information, viz. activation date, last renewal date, status, status change date, etc. 2 Messaging Gateway Centralized subscription engine will interface with IDEA SDP messaging gateway for the following scenarios a) Messaging gateway will forward the subscriber's subscription related request to the subscription engine when the request is discovered via SMS, USSD or STK channel. b) Subscription engine will send the notifications via messaging gateway to the subscribers for the events like acknowledgement of subscription request, successful subscription purchase, successful renewal notification, delivery content, etc. 3 WAP Portal Centralized subscription engine will interface with WAP portal for performing following activities a) When the subscriber will opt for subscription via WAP portal, WAP portal will forward the request to the subscription engine via WAP gateway. b) WAP portal will fetch the active list of the subscription service for a subscriber from the subscription engine along with the corresponding status for each subscription service to render on the WAP Portal. 4 CRM Centralized subscription engine will be interfaced with the IDEA CRM for the following. a) Centralized subscription engine customer care module will be integrated with IDEA CRM using silent login. b) For handling customer's query and complaints resolution c) Placing orders viz. activation and deactivation, pertinent to subscription services via CRM 5 Web Portal Centralized subscription engine will interface with Web portal for performing following activities a) When the subscriber will opt for subscription via Web portal, Web portal will forward the request to the subscription engine via http proxy. b) Web portal will fetch the active list of the subscription service for a subscriber from the subscription engine along with the corresponding status for each subscription service to render on the Web Portal. 6 IVR/OBD Centralized subscription engine will be interfaced with IVR portal and OBD to handle the subscriber's subscription request discovered through IVR/OBD channel. 7 UCS UCS will act as charging gateway for the Centralized subscription engine to perform the following activities a) To fetch the balance of the subscriber b) Charge the subscriber for availed subscription services c) Refund the amount to the subscriber in case of failure or any disputes Note: Based on the available balance, subscription engine will handle the low balance or negative balance features. 8 EAI Centralized subscription engine will be integrated with EAI layer in the async manner to achieve the following a) Fetch the provisioning related information viz. IMSI, HLR ID & SIMID. from NSMS b) Send the subscriber's subscription provisioning request to HLR and RIM server for the services which requires HLR provisioning and the provisioning on RIM server viz. blackberry service. 9 Mediation The CDR files generated by centralized subscription engine will be pushed to the mediation for performing the following task. a) Apply filter logic b) Transformation of CDR format c) Routing CDRs to the downstream BSS systems like BSCS, RA, RSS, BI, etc. 10 CMS/VAS Applications/3rd Party CPs Centralized subscription engine will interface with CMS/VAS Applications/3rd party CPs to perform the following activities a) To provision the subscriber for the requested subscription in CMS/VAS Applications/3rd party CPs where CMS/VAS Applications/3rd party CPs will be responsible for delivering the content/service to the subscriber b) Fetching the content from CMS/VAS Applications/3rd party CPs where in subscription engine will be responsible for delivering the content/service to the subscriber 11 UCSe (UCS evolve) Centralized subscription engine will be integrated with UCS evolve for the provisioning of GPRS service requested by subscriber. Also the subscription engine will initiate the GPRS plan change provisioning request to the UCS evolve. 12 HLR Centralized subscription engine will send the service provisioning request via EAI layer ( Comptel IL7 for a subscriber to the HLR for the services viz. GPRS, blackberry, pre-tone, miss call alert, etc which requires the provisioning in HLR. 13 RIM Centralized subscription engine will send the blackberry service provisioning request via EAI layer (Comptel IL7 for a subscriber to the RIM server. Here Comptel IL7 will have the capability to roll back the provisioning on HLR if the provisioning for blackberry service on RIM server fails. 14 BSCS 6 & BSCS iX / @bility Centralized subscription engine will be interfacing with the postpaid billing system BSCS 6 & iX and @bility for the following scenarios. a) Tagging the requested subscription services to the subscriber in BSCS 6 & iX and @bility so that BSCS can charge the monthly rental (pro- rated & non pro-rated) to the subscriber for the opted subscription service b) Subscription engine will send the generated CDRs to the BSCS 6 & iX and @bility for the following task i. Rating ii. Charging iii. Bill presentment 15 BSS Systems Centralized subscription engine will push the generated CDRs to the following BSS systems via mediation. a) Revenue Assurance (RA) for revenue and subscriber's subscription status reconciliation b) Revenue Settlement System (RSS) for revenue settlement with content partners c) Business Intelligence (BI) for generating the adhoc reports d) Postpaid Billing System (BSCS 6 & iX / @bility) for rating, charging and bill presentment 16 IVSM Centralized subscription engine will interface with IVSM for provisioning of subscription service to the subscriber in BSCS the following system in async mechanism. . BSCS 6 . HLR . RIM Server Solution Overview This section will outline the solution architecture of subscription manager in Idea SDP ecosystem. 1 Logical Architecture Diagram The below figure depicts the logical architecture of the subscription engine solution as a fraction of ICL's SDP ecosystem. This figure shows the major high level modules which are involved in subscription engine solution. [pic] Figure 3-2: Subscription Manager Logical Architecture Diagram 2 Solution Architecture Overview Diagram The figure 3-1 provides the system level overview of subscription manager positioning in IDEA SDP environment. This figure depicts the interactions of subscription engine with the various systems or components not only in the ICL's eco system but also with the applications hosted by various VAS vendors outside IDEA environment. [pic] Figure 3-2: Subscription Manager Architecture Overview Diagram 3 Solution Description As depicted above, in the overall IDEA SDP solution, Boun Giorno's subscription engine is positioned as a centralized subscription engine to facilitate the centralized management of VAS subscription activations, renewals and upgrades so that ICL's core infrastructure and applications can focus on efficient service delivery. Centralized subscription engine will collapse the multiple subscription engines viz. Cellebrum, One97, Phoneytunes and OnMobile, in current ICL's eco system to provide the single subscription engine which will lay the foundation for different subscription models across ICL VAS subscription offerings. The detailed solution of centralized subscription engine in ICL's environment is depicted in above two figures viz. logical and technical architecture diagram. The description of the solution will be based on the mapping of logical architecture with the individual systems/components involved in the overall subscription engine solution. 1 Discovery Channel Layer This layer shows the various channels viz. SMS, USSD, STK, WAP, WEB, IVR, OBD, CRM, Vtopups and Sanchaya, through which subscribers can place the orders pertinent to VAS subscriptions which in turn constitutes of various discovery network and software based components viz. SMSC, messaging gateway, SGSN, WAP gateway, USSD gateway, etc. The request can be initiated through any of the channels but will be landed on subscription engine in the unified format. 1 Subscription Engine - Messaging Gateway 1 SMS and STK Channel The subscription request discovered by the subscriber through SMS and STK channel will be sent to the messaging gateway via SMSC using CIMD protocol. The messaging gateway in turn will forward the request to the subscription engine on the standard HTTPS interface exposed by the subscription engine. 2 USSD The subscription request discovered by the subscriber through USSD channel will be sent to the messaging gateway via USSD gateway using SMPP protocol. The messaging gateway in turn will forward the request to the subscription engine on the standard HTTPS interface exposed by the subscription engine. 2 Subscription Engine - WAP gateway The subscription request discovered by the subscriber through WAP portal will be sent to the subscription engine on the standard HTTPS interface exposed by the subscription engine. 3 Subscription Engine - IVR/OBD Portal The subscription request discovered by the subscriber through IVR/OBD will forward the request to the subscription engine on the standard HTTPS interface exposed by the subscription engine. 4 Subscription Engine - Web Portal The subscription request discovered by the subscriber through Web portal will be sent to the web proxy using HTTPS protocol. The web proxy in turn will forward the request to the subscription engine on the standard HTTPS interface exposed by the subscription engine. 5 Subscription Engine - CRM The subscriber places the orders pertinent to subscription by giving the call to the call centre agents which in turn can place the orders through the customer care module of subscription engine integrated with IDEA CRM systems using silent login feature. The customer care module of subscription engine will internally invoke the HTTPS interface exposed by the subscription engine. 6 Subscription Engine - Other Channels The subscription can also be discovered through other channels wherein the respective channel applications need to integrate with the standard HTTPS interface exposed by the subscription engine. 2 Charging Layer Subscription engine after applying the rating for the requested subscription service will initiate the charging request to the charging layer for the fulfillment of following type of request > Fetch balance > Debit request > Credit request 1 UCS The charging layer is realized via UCS component which acts as an abstraction layer/charging gateway on top of multiple INs to hide the integration complexities of subscription engine directly interacting with multiple INs. The subscription engine will interact with IN via UCS to fulfill the above mentioned functionalities. The UCS will expose the standard HTTPS interface to the subscription engine which will be invoked for real time charging of the subscriber pertinent to subscription services. The subscription engine will provide the adjustment code during the credit/debit request to UCS which in turn will provide it to IN. IN will inject the adjustment code in to its DRs which will be later used by BSS downstream systems like RA, RSS, etc. for accounting, settlement and reconciliation purpose 3 Subscriber Profile Repository Subscription engine will fetch the subscriber profile from the subscriber profile repository which is relevant for performing the following task > Validations based on subscriber profile pertinent to requested subscriptions > Update the subscriber's subscription profile 1 Unified User Profile The subscriber profile repository is realized via UUP component that act as a centralized subscriber profile repository with in IDEA SDP ecosystem. The following task will be performed by subscription engine on UUP. 1 Fetch Subscriber Profile Subscription engine will be fetching the following subscriber details from the UUP for the request pertinent to subscriptions. > Basic Profile V Prepaid Flag V Circle ID V Status V Category V LoB > Port in/port out The SE will perform the following validations for the subscription request of subscriber against the subscriber profile. o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. 2 Update Subscription Profile Also, SE will update the subscriber profile after the fulfillment of subscription request by subscription engine. The following are the scenarios in which subscription profile will be updated by subscription engine in UUP. > Activation of subscription > Renewal of subscription > Deactivation > Active to grace > Grace to Suspension > Suspension to Active > Grace to Active Note: When the subscription service for the subscriber is deactivated, the subscription service which needs to be deactivated for a subscriber will be deleted from UUP. 4 Integration Layer Subscription engine on successful charging will push the request to integration layer in async mechanism for provisioning the subscription of subscriber in network elements like HLR, RIM server and postpaid billing system viz. BSCS iX. Also, subscription engine will fetch the provisioning related information from NSMS if the provisioning related information is not found in UUP. 1 EAI The integration layer is realized via EAI system which already exists in IDEA IT eco system and the same is being leveraged for the subscription engine solution for the provisioning in HLR, RIM server and postpaid billing system BSCS iX. 1 HLR Provisioning There are specific set of services as mentioned below which requires the HLR provisioning during the life cycle management of the subscription for subscriber. > GPRS > Blackberry > Ring back tone > Miss Call Alert > Select Call > Pre tone AS- IS HLR provisioning Approach The existing HLR provisioning approach for prepaid and postpaid has been described below. For postpaid, all circles and For Prepaid Ericsson circles only 1) Subscription Engine currently uses the IVSM component as a channel for provisioning the subscription service in to BSCS 6 (for postpaid subscribers) and HLR. 2) IVSM component accepts 3 parameters viz. Appsource, Requestcode and circle id, for fulfilling provisioning request. NOTE: App source and request code is provided by IDEA to the vendors. 3) IVSM fetch the details pertinent to BSCS 6 viz. SN code, network type flag, history table name, etc. based on Appsource, Requestcode and circle id. 4) Based on the activation or deactivation request following validations are done by IVSM a. Whether the subscriber is active in BSCS or not b. Requested service is currently inactive for activation request and active for deactivation request c. Whether the service can be assigned under the current rate plan or not 5) For network related services where HLR provisioning is required, BSCS 6 will forward the provisioning request to mediation which in turn will activate the service for subscriber in HLR For prepaid, Telcordia circles Currently in Telcordia circle, HLR provisioning is done manually where in file containing the list of MSISDNs for whom subscription services needs to be activated on HLR is provided to the operations team, i.e. it is a part of operational activity. Considering that the existing approach has the longer provisioning cycle and require manual intervention for provisioning in some of the circles, the following is the unified approach taken for the HLR provisioning for both prepaid and postpaid. To-Be HLR Provisioning Approach For Prepaid In this new approach, subscription engine will push the provisioning request to an EAI layer using XML over JMS which in turn will provide the request to mediation (Comptel IL7) using XML over JMS. Based on the service, Comptel IL7 will fire the corresponding MML commands on the HLR. Subscription engine will fetch the provisioning related information required for HLR provisioning from UUP. Since the data is populated in UUP for subscriber at the lag of one day, subscription engine will fetch the provisioning related parameters from NSMS (BCV dump) in real time. NOTE: In the scenario, if NSMS is not live in certain circles than the provisioning specific parameters will be fetched from HLR view. [pic] For Postpaid (Post-Transformed Scenario) The subscription engine will send the HLR provisioning request to the EAI layer which in turn will provision the subscriber to the requested subscription in BSCS iX which in turn will forward the request to Comptel mediation for HLR provisioning as depicted in figure below. [pic] 2 RIM Provisioning For Prepaid The RIM server provisioning for blackberry services is handled by Comptel IL7 interface where in Comptel IL7 will do the service provisioning first in HLR and than in RIM server. Hence the HLR AND RIM provisioning will fulfilled as a part of single request initiated by subscription engine. Comptel IL7 also maintains the provisioning consistency across HLR and RIM server, i.e. if the provisioning on RIM server fails than Comptel IL7 will also de-provision the service on HLR. [pic] For postpaid (Post-Transformation Scenario) The subscription engine will push the request to EAI layer for provisioning blackberry service to the subscriber on RIM Server. [pic] 3 BSCS iX Provisioning There are scenarios in which BSCS iX provisioning is required pertinent to subscriptions to cater to postpaid charging models. The subscription service can have the various postpaid charging models as mentioned below 1. Monthly rental without pro-rating 2. Monthly rental with pro-rating 3. Advance rental 4. Event charging In the above mentioned scenarios, 1, 2 and 3 requires provisioning in BSCS iX for tagging the requested subscription to the subscriber to cater to the monthly and advance rental charging models. Subscription engine will integrate with EAI layer in async mechanism using XML over JMS for subscription to subscriber provisioning in BSCS iX. EAI layer in turn will forward the request to BSCS iX using XML over JMS which in turn will send the response back to subscription via EAI layer. [pic] 5 Provisioning Layer Subscription engine will initiate the provisioning request after successful charging to the systems/applications (CMS/VAS applications/3rd party content providers) responsible for delivery of the content/service. This will involve the provisioning of subscription service in CMS which is deployed in IDEA SDP ecosystem too. This will also take care of provisioning in postpaid billing system viz. BSCS 6. 1 CMS Provisioning Subscription engine will initiate the subscription provisioning request for a subscriber towards the CMS after successful charging using SOAP over HTTPS protocol where in CMS will expose the standard web service for the following scenarios towards subscription engine. > Purchase subscription > Cancel subscription > Renew subscription 2 VAS applications/3rd part content provider Subscription engine will initiate the subscription provisioning request for a subscriber towards the VAS/3rd part content providers after successful charging using SOAP over HTTPS or HTTPS protocol where in VAS/3rd part content providers will expose the standard interface towards subscription engine. The interface exposed will vary from CP to CP. Hence this will be taken care during the migration of subscription services. 3 BSCS 6 Provisioning There are scenarios in which BSCS 6 provisioning is required pertinent to subscriptions to cater to postpaid charging models. The subscription service can have the various postpaid charging models as mentioned below 1. Monthly rental without pro-rating 2. Monthly rental with pro-rating 3. Advance rental 4. Event charging In the above mentioned scenarios, 1, 2 and 3 requires provisioning in BSCS 6 for tagging the requested subscription to the subscriber to cater to the monthly and advance rental charging models. Subscription engine currently uses IVSM as the provisioning channel to provision the subscription for subscriber in BSCS 6 in async mechanism. The flow for the same is depicted below. [pic] 1) Subscription engine SE will push the provisioning request to the IVSM using DB link which in turn will insert the record in the IVSM database. 2) IVSM component accepts 3 parameters viz. Appsource, Requestcode and circle id, for fulfilling provisioning request. 3) IVSM fetch the details pertinent to BSCS 6 viz. SN code, network type flag, history table name, etc. based on Appsource, Requestcode and circle id. 4) Based on the activation or deactivation request following validations are done by IVSM a. Whether the subscriber is active in BSCS or not b. Requested service is currently inactive for activation request and active for deactivation request c. Whether the service can be assigned under the current rate plan or not 5) After the successful validations, finally IVSM will provision the subscription for the subscriber in to BSCS 6 via ISMS. The same flow will be leveraged in SDP subscription engine solution to provision the subscription for subscriber in BSCS 6. 4 HLR Provisioning (Pre-Transformed Scenario) For Postpaid For postpaid, subscription engine will use the same IVSM channel for HLR provisioning as is used currently. 5 RIM Provisioning For Postpaid (Pre-Transformed Scenario) The subscription will use the same IVSM channel for provisioning the subscriber's blackberry subscription service on RIM server. [pic] 6 BSS Systems Subscription engine will push the generated CDR to the various BSS systems via mediation which is responsible for revenue and subscription status reconciliation, revenue settlement with content partners, postpaid rating & charging and generating the adhoc reports based on SDP subscription engine generated CDRs. The details of the same will be provided in SDP - BSS integration document. The following BSS systems are the consumers of the CDRs 1 Revenue Assurance System Based on the CDRs generated by subscription engine, RA system will generate the various KPI reports like revenue reconciliation, subscription status reconciliation for subscriber, subscription service definition reconciliation, etc. The details of the same will be provided in SDP - BSS integration document. 2 Revenue Settlement System Based on the CDRs generated by subscription engine, RSS will generate the partner settlement report along with the generation of advise. The invoice provided by content provider will be validated against the advise generated by revenue settlement system. 3 Business Intelligence Based on the CDRs generated by subscription engine, BI system will generate the adhoc reports required by IDEA business and technical team for the analytics purpose. Also BI can generate the segments required for campaigns pertinent to subscriptions. 4 Postpaid Billing System The VAS subscription services needs to be tagged to the postpaid subscriber in postpaid billing system having rental based charging. For rental based services, postpaid billing system will do rating and charging but non rental based service SE will generate the pre-rated CDRs which will be provided to postpaid billing system viz. BSCS 6 & iX, via mediation. Based on the transformed CDRs provided by mediation to postpaid billing system, BSCS 6 & iX will do the appropriate charging for each transaction. VAS Subscription services with subscription cycles in multiples of 30 days will be configured in BSCS. All other VAS subscription services whose subscription cycles are less than 30 days, subscription engine will generate the pre-rated CDRs which will be treated as event CDRs in postpaid billing systems. Subsequently, these transactions will be presented in itemized section of subscriber's invoice. The filtering logic will be applied at the mediation end so that the CDRs for rental based charging will not be forwarded to postpaid billing system for rating and charging. 5 Mediation The CDRs generated by Subscription engine will be pushed to the mediation which in turn will forward the as-is CDRs to the downstream BSS systems > Revenue Assurance System > Revenue Settlement System > Business Intelligence But mediation will apply the appropriate filter logic on the CDRs along with it will do the required CDR transformation in the format acceptable by postpaid billing system, viz. BSCS 6 and iX. Note: The details of SE - BSS integration will be captured in a consolidated SDP - BSS integration document once it is finalized. 7 Subscription Engine Subscription engine consist of multiple internal components/modules as mentioned below responsible to form the comprehensive subscription engine solution providing the out of the box capabilities > Discovery Layer > Subscription Engine Core > Service Configuration module > Rating engine module > Reporting engine Module > Logger > Customer Care Module > Monitoring system 1 Discovery layer This layer is responsible for intercepting the request from various channels pertinent to subscriptions i.e. it acts as a request adaptor component with in the subscription engine system. It will expose the subscription engine standard HTTPS interface through which all the channels will forward the request to subscription engine. 2 Subscription Engine Core This forms the heart of the subscription engine wherein it plays a vital role in fulfillment of the subscription specific request handling like activation, deactivation, renewals, grace, suspension, content scheduler, content fetch and deliver, sending notifications, provisioning, rating, initiate charging etc. It has many other internal components as mentioned in the product overview section of this document. 3 Service Configuration The subscription engine administrator can create and configure the subscription service using service configuration web based UI which is an integral module of subscription engine. It has the capabilities to provide the role based access rights to defined sets of users. As a part of subscription service configuration, system administrator can define the basic service definition, rating definition with the corresponding validity and usage, behavior during grace and suspension period definition, configuration of CP URL for provisioning as well as for content fetch and deliver, configuration of notification messages for various events/scenarios and complex business models like combo packs. 4 Rating Engine The subscription engine contains the embedded rating engine module which is responsible for applying the rates to the subscription service requested by subscriber based on the subscriber balance which in turn handles the low and negative balance scenarios in case of prepaid but for postpaid it will impose the base price for the requested subscription service. Based on the rate imposed and the corresponding validity and usage, subscription engine will initiate the provisioning request towards the CMS/VAS applications/3rd party content providers. 5 Reporting Engine The reporting engine module forms the integral part of subscription engine solution which will be responsible for generating standard reports out of the box pertinent to subscription but the adhoc reports will be generated by BI system which currently exists in ICL's eco system. The list of reports which needs to be generated will be provided by ICL's business and technical team stake holders. Also the reporting module has the capability to provide the role based access to the users for generating, viewing and modifying the reports. 6 Logger The subscription engine will have the logging capabilities with various severity levels to log the tasks executed during the fulfillment of subscription request. The following are the types of logs which will be written by subscription engine components. 1) Transaction Logs 2) CDRs (in a predefined format being agreed with Idea) 3) Error Logs 4) Request Logs 5) Debug logs 7 Customer Care Module The subscription engine customer care module will be integrated with the IDEA CRM system using silent login feature which will facilitate the call centre agent to handle customer queries/complaints by view the transactions on customer care screens and can also apply various filters on the different attributes to view the specific transactions. Also it will help call centre agents to place the activation and deactivation orders on behalf of subscribers pertinent to subscriptions. 8 Monitoring Subscription engine components have the capabilities of generating SNMP based alert through the agents deployed on the system where subscription engine components are hosted. It also has capability to define the MIBs which will be accessed using the SNMP protocol. Subscription engine product provides the out of box monitoring system known as net alert. It provides the user friendly dash board which displays the health of the system in real time. Subscription Engine Features The following are the key features of the centralized subscription engine which will be supported for ICL's VAS subscription services. 1) Serve as centralized subscription engine for VAS subscription services in ICL's ecosystem 2) Subscriber's subscriptions life cycle management 3) Conversion of subscription request from different channels in to unified standard format, i.e. subscription engine will expose the standard the interface which will be invoked for any request pertinent to VAS subscriptions. 4) Maintaining the rating definitions and apply the rating based on the balance of the subscriber for all VAS subscription services 5) Initiating the charging request towards IN via UCS for prepaid. 6) Support low balance handling scenarios through various charging models viz. step charging, N-X charging. 7) Initiate the Provisioning request of the subscription service for the subscriber to the following systems - HLR - Postpaid billing system - Internal applications - RIM Server - UCSe - Third party CP's 8) Creation, configuration and administration of subscription services 9) Generation of standard reports pertinent to VAS subscriptions 10) Content fetch and deliver mechanism to facilitate the subscribers query resolution pertinent to content delivery 11) Sending the following types of notifications to the subscribers a. For taking consent of the subscriber before purchase of subscription b. For taking consent of the subscriber before doing the renewal c. Sending the acknowledgement for the acceptance of the subscription request d. Sending appropriate notification messages in case of error and success pertinent to subscriber's subscription request 12) Customer care for handling complaints resolution, transaction viewing and subscription specific orders viz. activation, deactivation, and suspension. pertinent to VAS subscriptions 13) Monitoring system generating proactive alerts 14) Logging capabilities with various log levels for trouble shooting Product Overview 1 B3A Platform Overview Already the Content Aggregator and Portal Management Platform for the B! Group, and for several Mobile operators worldwide, the B!3A is a best in class vintage platform with proven reliability and security and over 80 man years of development effort spent to date. It is the most comprehensive Mobile VAS platform providing possibilities across STK, SMS, WAP, MMS, Web and IVR, backed with strong CRM and reporting capabilities. [pic] The B!3A platform provides an extensive set of tools that enable all tasks needed to create and operate a complete digital content marketplace. Among the main features are: - Short-code management - Service delivery - Content aggregation - Content management - Portal management (browsing & downloading) - Billing - Enhanced Reporting & Business Intelligence - Campaign Management Tool, Promotion List / Subscriber management - Subscription Management - System Monitor, queue monitor, Net alerter, Simulators 2 B! SUBSCRIPTION MANAGER OVERVIEW The B! Subscription Manager is a core component of the B!3A platform, that manages: i) Activation of subscription services ii) Subscriber lists management as per service iii) Activation & renewal billing based on service pricing configuration iv) Deactivation of service on subscriber request or automated basis v) Handling of business logics for the above process and facilitates a host of other necessities Subscriptions can offer high value to the operator as well as subscriber. Some benefits are as follows: - High ARPU realization for operators - Subscriber Engagement leading to Retention and Loyalty - Upfront Payment from the user to service providers - Low cost for availing services - User delight from the type of service offerings sent directly to mobile without user initiating request everyday (only one time activation request is required) Equally important are the business models that are followed. Each model will allow addressing a different set of users and market. B! Subscription manager is live with various billing models, some of which are as below: - Monthly pricing of Rs.20 per month or Rs.30 per month etc. - Weekly Pricing of Rs.7 per week - Daily pricing of Rs.1 per day - Other customized business cases as per requirements A high level overview of the solution is provided below: [pic] It is a highly flexible and configurable component that allows charging a pre defined amount for a specified duration on a recurrent basis for any service. . Multiple pricing / billing configuration . Configurable re-subscription logic and renewal time period (everyday, every 7 days, every 15 days, every 30 days etc.) . Auto renewal or one time charging configuration . Configurable no. of alerts per day or per week or both (1 alert per day, 2 alerts per day + 1 alert of x service per week etc.) The Subscription Engine by definition allows charging a pre defined amount for a specified duration on a recurrent basis for any service. Text, WAP, WEB, IVR, USSD &MMS based subscription services can be configured Multiple Levels of Services . Powered with flexible, robust, scalable & high availability architecture . Many configurable plug and play modules available . Integration with external network elements & business logics . Supports multiple content types & channels . Integrated with all Charging gateways & protocols . Real time , comprehensive & detailed reporting . Backed with reliable monitoring tools and interfaces Focus on user experience . Centralized subscription mechanism ensuring proper communication . Global STOP/CHECK keywords . Vernacular Service Provisioning . Avoid spamming from external content provider Innovative models . All you can eat SMS Services - Unlimited Txt . Multiple pricing options (daily, weekly, monthly subscription, etc.) . Flexible Charging > Multiple price points > Partial charging > Operator circle wise charging 3 Product Features and Functionalities The B! Subscription Manager consists of a number of features which not only help in managing the optimal delivery of services but also help in managing the customers. A detailed description of the features is as follows: 1 Subscription Manager GUI [pic] User Management Interface User Management is an authentication feature that provides administrators with the ability to identify and control the state of users logged into the system. B! UI is loaded with enhanced security constraints on user login basis; it's easy to maintain users groups/ individual with specific permission based on the role of the user like internal, external or third party user. [pic] User Creation Form & Process Interface provides the user management functionality to add/ edit user profile. In the time of user creation specific details are to be filled by admin, then after user can also use the same to update his profile. [pic] Subscription Service Creation The services are created by a defined process which involves the following steps: - Keyword Configuration - List Creation & Subscriber Management - System Messages Configuration - Charging Configuration - Content Source Configuration - Subscription Service Message Schedule & Push Routing & Configuration features of SE A number of features go about in making a service live and demands a number of service definitions and configurations on the platform level. All such configurations are carried out though the B! Subscription Engine. A list of the same is described below:- Bulk short code, keyword configuration Allows to create or modify multiple keywords, service details, operator, circle, short-code in one go Caching configuration The premium service framework provides an object manager to configure timer interval based content caching. It allows configuration of timer-interval for caching of content. The feature enhance the response time of services dependent on 3rd Party content provisioning Suffix management support Suffix management allows provisioning of certain services like chat based services on SMS. The suffix allows management of a session between two users. The platform provides an interface to configure the suffix for specific keywords used for these managed services. Keyword versioning facility A keyword versioning facility on the premium service framework allows managing multiple STK versions segregated between various zones or upgrades. It provides a strong feature to manage the STK services identified in different time warps. This facility also helps in differentiated CRM management for different STK services for e.g. allows to track the traffic on different versions of STK services. SMS character limit management The SMS character limit management & configuration feature restricts the length of response messages. This avoids network congestion caused due to unwanted and lengthy responses to a variety of keywords. The feature allows setting character limits for each keyword based on the business requirements. 2 Service and Content delivery Features . No of alerts to be sent are configurable by service and time period. E.g. for News service 2 alerts per day at 9AM and 5PM and For Joke service 1 alert per day at 11AM etc. . Content fetch via internal or external CMS . Simple to complex configurations supported e.g. all configurations are done as service@operator@circle giving the flexibility to give different logic to same services as per circle . Can be integrated with Network components to provide subscription services like MCA, GPRS subscription, RBT etc 3 SE Charging Capabilities The B! Subscription manager charging capabilities is based on BOS - Buongiorno's Online Service for Billing. BOS is capable of facilitating charging across different protocols including HTTP/S. Some of the salient features of BOS are as described below:- . Java Based Framework . The interface: The interface is in charge of receiving the requests. Essentially these are methods that allow the sites and applications to connect with BOS Gateway. . The business components: a collection of modules for business purposes. One of these modules will be in charge of storing in the database the request and the result. The business modules are indifferent to the operators. Example of a BOS business module is its statistics module. . The BOS Charging plug-ins that will implements the different charging platform protocols and connections to the different operators [pic] Control / Monitoring This module collects statistics information for the purpose of monitoring the correct functioning of the system. Charging protocols supported by BOS . HTTP/S . PSA UCAP . SOAP . CAMEL . JSON Over HTTP . XML Over HTTP . TWSS Over HTTPS . IPX . BOS GATEWAY AND BOS API Capabilities . BOS is Buongiorno's Online Service for Billing. . BOS Gateway is a platform that allows applications to connect to the external operators billing. . BOS API is the application to connect to the BOS Gateway. . BOS Gateway is the platform and BOS API provides the interface or collection of standard methods to perform transactions though the BOS Gateway. . BOS API has been created after considering the integration guides of the Telecommunication Operators with which Buongiorno works, taking into account the methods they require and standardizing them. . Applications present in Be3A or a regional application call the methods of BOS API when they need to perform a billing operation requiring connection with the operator's system. Features . BOS plug-ins are developed for the protocols of the different operators billing. . The system is built with a common database structure for all billing messages and a single reporting interface to go with it. . The system provides a common interface for all billing to be used by web and wap applications. This facilitates managing all billing communications and promotes retrieving reports and connection information in a uniform way. Statistics follow a common and well defined interface, because statistics are stored in a common database structure. . The system enforces common processes for all billing in the company. . Using this system provides a common platform resulting in faster developments in the future for all, providing more reliable billing and reporting. . The system satisfies legal requirements in many countries where the operator must be notified of any subscription to an external service performed by their customer. Characteristics . It is a modular system. . The system is configurable. . The system provides failover and will be up always, as billing is a critical process for the company . Good performance. . It provides a comprehensive solution for all the known billing platforms. STRUCTRE OF BOS [pic] Charging Lifecycle The Charging lifecycle follows the following process: . Check . Reserve . Charge . Commit . Rollback BOS Monitoring . Alarms . Instances . Main: Instance Summary . Alarm . Runtime Traffic . Agent Cache . URI Details . Tools . Instance Config . Log Operations: grep + tail and vice versa, last tickets, tail only . Process Operations: restart, kill, socket details, allow/deny auto start etc. . Runtime Traffic Status - [pic] 4 Charging & Renewal Features . Allows multiple pricing / charging configurations for different services. E.g. Cricket alerts at Rs.7 per week and News alerts at Rs.30 per month and combination of such services. . Allows different pricing configuration for Activation charge & Renewal charge. E.g. Rs.4 on activation and Rs.7 on renewal . Configurable renewal logic by time period. E.g. Everyday, every 7 days, every 15 days, every 30 days etc. . Auto renewal or one time charging configuration . Support for Partial Charging , Step Charging and Grace / Suspension Management 5 Subscription/Charging Models One Time Sub Model [pic] Try and Buy Configuration The subscription services can also be offered free for some days in the form of trial period. Once the no of trial days gets exhausted, SE can either send the notification to take the consent from the subscriber OR SE will charge the subscriber for that subscription service based on the service definition configuration. . Configure subscription service Price Point as 0 for the trail period . Configure the number of days after which the trial period expires . Configure the actual Price point of the service to be charged once the trial expires . Configure the number of days after which the warning message is to be sent. [pic] Auto Renewal/Grace Period configuration When the subscription service is configured as auto renewable, based on the validity period the subscriber's subscription will be renewed after successful charging. But if the charging fails while renewing the service, the subscriber's subscription will go under grace period where in subscribers will get the service based on the service configuration. Even if the charging is not successful during the configured grace period, the subscriber's subscription will go under suspension. . Renewal duration is configured to 30 days therefore for each user the renewal date will be after 30 days of start date. . Renewal Message is configured which is sent to the user after renewal is complete. . Grace period parameter in days is also configured inside the XML which specifies the number of days after which the grace period expires. The user is automatically suspended after grace period expires. [pic] Partial Charging The subscription engine will charge the subscriber based on the available balance, i.e. without applying (N-x) charging model. . sub_price: param specifies variable price points configured for the service . sub_endday: param specifies the number of days after which the service will end for each corresponding price point. . sub_warnday: param specifies the number of days after which the warning message will be sent for each corresponding price point. . MT Price point indicates the price points that are immediately billed after sending the Welcome MT. [pic] Trigger Based Charging The charging module can be associated with various triggers that are generated by the system based on the status of the MT sent to a user. The events are configured inside the trigger object created inside the be3a repository under /etc/triggers folder. The triggers can also be configured to operate on certain services only by specifying the matching criteria. [pic][pic] 6 Subscription API [pic] Sub/Unsub API Enables 3rd parties to subscribe and unsubscribe users to the services. User Details API Enables 3rd Parties or External Network Elements to access a particular or all user details Charging Details API Enables 3rd Parties or External Network elements to access charging details for a particular user Send Message API Enables 3rd parties or External Network Elements to send Text, Binary or WAP push messages to particular user groups List Services API Provides Information about subscription services that are available on the system DB Sync API API enables to sync data with external network elements Content Fetch API API that enables content fetching from 3rd parties 7 Subscription Engine - Reporting Features The following are the reports which can be generated from B! Subscription engine. . User Management . Subscription Report . Total Charging Report . Free Content Push Feature . Total Page Views Report . Content Download Total Counts Report . Circle Wise Wap Hits Report . Wap Circle Hits & Revenue Report . Content Download Zone Wise , Report . Online real time interface . View active subscriptions of a user . Activate new service for a user . Deactivate existing service of the user . Login management for Customer Care . Customizable as per requirement [pic] 8 Monitoring and System Maintenance B! System Monitor is a real time dashboard which monitors all the live systems and shows their current Status on an HTTP Interface. [pic] Net Alerter B! System is equipped with ""NETALERTER"", an automatic alert tool that sends configurable alert messages to service manager email/SMS. Features . It monitors response to configurable HTTP requests: . Possibility to configure SCRIPT to manage monitoring on external servers (ping, disk space, mysql alive, slave running, etc...) . Standard get & traps architecture (similar to SNMP) . In the case of failure the alert is raised: . Delivered via SMS to a list of MSISDN . Delivered via e-mail . It is possible to configure several user groups and alert priority: . For each single check it is possible to configure: . Frequency of check . Syntax to analyze response to HTTP request (HTML page parser) [pic] 4 Product Architecture [pic] 6 Product Components The subscription framework consists of a number of components which helps in managing the complete lifecycle of subscription services right from the service creation to the delivery of the desired services. [pic] 1 SANDMAN - DISCOVERY LAYER Sandman is a piece of software that connects B!3A to the telecom operators that use numerous protocols. Sandman uses an asynchronous protocol to interface between a messaging platform (such as B!3A) and the various Telco Operators for processing any kind of message data; mainly Short Message Services and Multimedia Message Services. From an internal point of view we can say that Sandman acts as a gateway, handling a multitude of internal threads to ensure true asynchrony. This gateway can be split into two sides, 'left' and 'right', where the left side corresponds to B!3A interaction and the right side to Telco interaction. This structure can be further broken down into three layers. The bottom layer is the communication layer (corresponding to OSI levels 3 and 4, or the network and transport layers, also called SC). The middle is the codec layer (corresponding to OSI level 5, or the session layer, also called MS). The top layer is the layout layer (called the third level). All functions on levels SC (Serial Connector) and MS (Message Serializer) are provided by plug-ins. There are relatively few SC plug-ins while there are more than 50 different MS plug-ins, covering a plethora of protocols, both standard and proprietary. All input to and output from Sandman takes place on the Communication (SC) Layer. The Serial Connectors are responsible for making connections between Sandman and the external world. All information is sent and received as byte streams. The SC layer is usually split into functional units, the most common being a buffer unit and a protocol unit. This means that bytes can be written to the SC layer in the buffer unit and subsequently passed to the protocol unit to be sent out as a TCP/IP packet once a sufficient number of bytes have been written to the layer. This avoids sending a message for each byte written to the SC layer, which would cause an extremely high number of messages to be sent and congestion in the system. The SC layer is not always necessarily present if the MS layer does not require the functionality provided by the SC layer. The codec or Message Serializer (MS) level handles the actual messages. It draws on an extensive number of protocols to de-serialize and serialize the messages. In other words, it translates bytes into messages and vice versa. Also, it is at this level that messages can be modified and manipulated, if necessary Again, this layer may be broken down into functional units. Finally, the Layout layer, or third level, is where the actual transition from one side of Sandman to another takes place. In other words, it passes messages from the B!3A side of Sandman to the Telco side and vice versa. Since this is where transitions occur, it is also used for housekeeping functions such as counting, filtering and routing. The messages flow back and forth through the system in an asynchronous way - there may be any number of connections on either side. This structure can be represented by the following diagram. [pic] Picture 1 - The Basic Structure of Sandman It is worth noting that there may be many connections for the same short- codes, or one connection for many short-codes. Sandman provides all the flexibility needed to deal with all these Telco-specific problems, completely isolating B!3A (or any other Lside client). 2 BOS - B! CHARGING GATEWAY B.O.S. or BOS is Buongiorno's Online Service for Billing and Subsriptions. BOS Gateway is a platform that allows applications to connect to the external operators billing and subscription services. BOS API is the application to connect to the BOS Gateway. BOS Gateway is the platform and BOS API provides the interface or collection of standard methods to perform transactions though the BOS Gateway. BOS API has been created after considering the integration guides of the Telecommunication Operators with which Buongiorno works, taking into account the methods they require and standardizing them. Applications present in Be3A or a regional application call the methods of BOS API when they need to perform a billing or subscription operation requiring connection with the operator's system. [pic] The application module that requires connecting to the BOS Gateway has an instance of BOS API. Therefore invokes the methods of BOS API. BOS API has been developed to allow the applications to access the BOS Gateway. As an example, the regional team might have an application that contains a method to charge the customers account. This method executes in B!3A which calls the BOS Gateway that connects that local application with the operator with the appropriate protocol. BOS API communicates with the gateway using simple HTTP protocol. BOS API provides a bigger level of abstraction. It is not mandatory to use the API. The other possible ways consist of connecting directly with the gateway and making http requests directly using that connection. An instance of BOS is identified by its URI A URI has been set up for each operator. For example, there is a URI for Telco-Operator1. A Be3a application needing to communicate for billing or subscription purposes with this operator would use the URI setup by BOS for that operator: https://xx.xx.xx.xx:port/bos/<name_of_operator>/ Note that there are various servers for BOS. The instance of BOS API for the Regional or Be3a application would invoke a URI (URL) such as the one above to communicate with the operator for billing or subscription purposes. 3 PREMIUM SERVER - SUBSCRIPTION MANAGER Premium Server is a very important integral component of the Subscription Management Framework. This component takes care of the application logic processing based on the defined rules of the service. All the Subscription Services logic resides with Premium Server. As far as B! is concerned, a service is far more complex. Services are based on -pull-push strategies as illustrated below. [pic] Mobile Originated messages (hereafter referred to as MO) are messages that arrive from a handset, whereas Mobile Terminated messages (hereafter referred to as MT) are ones that finish on a consumer's mobile device. Services are accessed by consumers using service numbers, most of the time these are shortcodes. Shortcodes are telephone numbers of four or five digits provided by Operators in order to provide services with numbers that are easy to remember. The consumer sends a short message with a keyword, code or a known syntax text to the shortcode number. Hence, the platform receives a known subset of messages which require routing through the system to direct the message to the correct service or application. Accordingly, depending on the service itself, one or more service components may be operational. Furthermore, one or more instances could exist in order to maximize performance, but this is not apparent from the point of view of consumers. By _instance', we mean an entire implementation of the Premium Services Framework. Finally, we can say that the service is the minimal unit for accounting and billing purposes. The Client is the entity that requests the creation and implementation of services for consumers. These may range from mobile telecom operators, companies wishing to launch a product or promote existing ones and even B! itself. A helpful distinction is that each service belongs to one client but a client may have many services. Furthermore, the client is defined in terms of billing or revenue share for the services, so several logical clients can exist for the same physical client (entity) to aid billing. A list of valid clients is defined in a standard DTD. Finally, we need to make a distinction between single message services and multi message services. Single message services are the classic services that most consumers are familiar with. Its response depends purely on the MO sent by the consumer. An example would be the downloading of a service using one message only. Multi message services, on the other hand, are far more interactive and also more complex in terms of routing. The response to the consumer's MO is dependent on previous interactions between the consumer and the system itself. This means that it is necessary to generate and store user states that can be used as identifiers for incoming MOs and so monitor the progress of the consumer through the steps of the multi-part message. An example of this would be a trivia quiz game where question and answer messages bounce back and forth between the consumer and the system. Identical MOs can generate different responses depending on the previous state generated by the process. The diagram below is an illustration of this idea [pic] Here we can clearly see that identical MOs, in this case -a|, generate different responses from the system. The system records the user's state and processes subsequent messages based on it. It then modifies the state, once the message has been processed and the response sent, in order to be ready to process the next MO in a correct manner. The Premium Services Framework architecture has been specifically designed to handle the complex routing demands made by multi-messages. To do this, the framework has been streamlined, breaking down processes into sub-sets of common tasks handled by dedicated components. 4 ENGINE SMS (RENEWALS, MESSAGE DELIVERY) Push services engine is the component that produces any messages associated to a list and scheduled to be sent using the B!3A standard list and message interface. This engine is also known as _scheduler engine' or _jmailer engine', although jmailer engines do not process scheduled messages. This section will describe the complete process from production to delivery. The delivery procedure, after messages are produced, is common to all applications, simply by changing the producer application to another (such as premium). The following diagram shows the flow of the messages starting from the database, where they are stored after being created for scheduling, to the XMS gateway (sandman). Route queues and processes are shared by all applications that need to deliver messages using that route. All other components are often configured to process one or more countries. A group of countries is known as region for management purposes. Using independent queues and components for each region or country provides isolation between them. Only the use of shared resources such as system shared resources or shared routes in one region can affect the delivery/production in other regions. Every step or component configures the resources it uses, so more resources can be allocated wherever needed. 5 The Scheduler The scheduler is the component that acquires messages and users from the database and injects the resulting jobs to be processed in the delivery queues. All lists in B!3A need to be assigned to a cluster. The cluster is a name for a group of scheduler nodes. Each cluster will be attended by one or more nodes. Each node is configured to process messages from one or more clusters. Every _push services engine' can have one or more scheduling nodes. Every node is configured to produce jobs for a region. The scheduler will periodically iterate over the list of countries to fetch any messages pending to be produced. A node can contain a _pre/post module executer'. A Pre-scheduling module is a software component associated to a message that will be executed before the users are fetched from the list and any other production tasks. A Post-scheduling module is a software component associated to a message that will be executed after a message is produced (some final user messages may be delivered by that time, but it is not granted to be called after delivery, but after production). The _pre/post module executer' thread will execute the module and notify the main producer when finished. Execution will be aborted if the timeout configured expires (often 30 minutes). Slow modules have been confirmed to delay deliveries in the lists that have this module associated to their deliveries. The following schema shows the procedure: [pic] As you can see, In-scheduler/Single-scheduling modules are directly executed by the scheduler. In the scheduler part, the main component detects messages to be produced and signs them with the node identifier. Once the message is ready, it queries the list to obtain the users that will receive it. It will produce jobs, containing blocks of users (often +5000) and referencing the message to be delivered. The jobs are inserted into the splitter queues, which is the entry point of the delivery procedure. 6 CRON SERVER (SCHEDULER) CRON is the name of a program that enables users to execute commands or scripts (groups of commands) automatically at a specified time/date; it is where all timed events are initiated. On the B!3A platform, CRON jobs are used to execute application modules at a predetermined moment in time. The CRON is a daemon, which means that it only needs to be started once, and will then lie dormant until it is required. The CRON daemon -wakes up| every minute and examines all the stored configuration files, called crontabs, to check each of them for commands that may have been scheduled to be executed at the current time. 7 Component Functionalities First time Activation Flow [pic] 1 B! Gateway SANDMAN, B!'s propriety solution, is the Internal Gateway of the B!3A platform which processes inbound SMS requests and out bound MT pushes form the platform. It supports all major connectivity protocols such as SMPP, HTTP, CIMD etc. and is used for SMS, MMS or WAP pushes. 2 Processor The Application processor is the component that defines logics & actions for a keyword received via the Gateway. In the case of subscriptions it routes the relevant keywords towards the Subscription module. 3 Subscription module This component is the core of the Subscription Manager and manages all information related to the subscription service of a particular user based on defined business logics, such as: . Service activated . Activation date . Last billed date . Renewal date . Deactivation date It also processes activation / deactivation requests for all services and can also support a 'Check' feature for customer to know their existing active subscription services. 4 Charging Manager The Billing Manager is responsible to bill users for service activation and renewal, by integrating with the operators billing mechanism/system. 5 Database / CMS All information related to the user is stored in the form of lists, this includes storage of the following in the respective service list: . Activation date . Last billed date . Renewal date . Deactivation date The CMS stores the content in the Database or fetches them from external 3rd party URLs. 6 Delivery Engine Responsible for content delivery, the Delivery Engine receives the request from the subscription module and accordingly pushes the content. Subscriber User Content Delivery Flow [pic] Additional components utilized during content delivery, not described above, are as follows: 1 Cron Cron is an application layer that triggers events, such as when to send a content push. It invokes the subscription module for processing. 2 Subscriber List The Subscriber Lists are tables within the database which store all information related to the user. Each subscription service has a unique list and within these lists, subscriber information is stored. Subscription Engine Use cases for Prepaid 1 Subscription service via the discovery channels Subscriber can request for the subscription service via different discovery channels. Viz. SMS, MMS, IVR, WAP, USSD, WEB, SD/Customer Care /Sanchaya (Out Dialler Call Centre) Interface, Retail (VTOP Up's), black berry, app store, STK & DSTK etc. The request is forwarded to the Subscription engine which has a request intercepting layer which will intercept the multi lingual request from multiple bearers and transforms the request in to the unified format accepted by subscription engine. 1 Subscription Activation through SMS [pic] . Subscriber request for text based subscription purchase request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not.In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service. o Subscription Engine will do the following subscription specific validations based on Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. . Whether the requested subscription service have been discovered via valid channel or not.Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber . The subscription engine apply rating rules on the service by using the following parameters :- o The subscriber balance. o The rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula, where N =Balance of the subscriber, x= Threshold limit. . Depending on the subscribers balance, the SE decides the subscription rate to be implemented and initiates the charging request towards IN via UCS. . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Failure Scenarios :- Diagram 1 [pic] Diagram 2 [pic] Diagram 3 [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN. . In such a case, Subscription Engine will treat the subscriber as post- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription Engine would write the respective transaction logs & CDR in the SDP standard CDR format. Failure Scenario - Charging Failure scenario . Subscription Engine initiates charging request towards IN via UCS and UCS fails to respond. . Subscription Engine will retry charging for configured number of retries defined as a part of service definition . If the charging fails even after configured number of retries than SE will generate the failure CDR. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition. . Subscription Engine will generate the CDR with appropriate status code (Eg -Provisioning failed). Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. 2 Subscription Activation through USSD Diagram 1 . Subscriber request for text based subscription purchase request via USSD to Messaging gateway. . The Messaging gateway forwards the request to the USSD application using the Http protocol. . USSD Application forwards the Subscription request to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber . The subscription engine apply rating rules on the service by using the following parameters :- o The subscriber balance. o The rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the subscription rate to be implemented and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. Failure Scenarios :- Diagram 1 [pic] Diagram 2 [pic] Diagram 3 [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP. . Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN. . In such a case, Subscription Engine will treat the subscriber as post- paid. . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription Engine would write the respective transaction logs & CDR in the SDP standard CDR format. Failure Scenario - Charging Failure scenario . Subscription Engine initiates charging request towards IN via UCS and UCS fails to respond. . Subscription Engine will retry charging for configured number of retries defined as a part of service definition. . If the charging fails even after configured number of retries than SE will generate the failure CDR. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition. . Subscription Engine will generate the CDR with appropriate status code (Eg -Provisioning failed). Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. 3 Subscription Activation through WAP [pic] . Subscriber request for text based subscription purchase request via WAP Portal. . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the SE decides the subscription rate to be implemented and initiates the charging request towards IN via UCS. . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Failure Scenarios Diagram 1 [pic] Diagram 2 [pic] Diagram 3 [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP,Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN. . In such a case, Subscription Engine will treat the subscriber as post- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription Engine would write the respective transaction logs & CDR in the SDP standard CDR format. Failure Scenario - Charging Failure scenario . Subscription Engine initiates charging request towards IN via UCS and UCS fails to respond. . Subscription Engine will retry charging for configured number of retries defined as a part of service definition. . If the charging fails even after configured number of retries than SE will generate the failure CDR Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition. . Subscription Engine will generate the CDR with appropriate status code (Eg -Provisioning failed). Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. 4 Subscription Activation through WEB [pic] . Subscriber request for text based subscription purchase request via WEB site to WEB gateway. . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters - o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the SE decides the subscription rate to be implemented and initiates the charging request towards IN via UCS. . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Failure Scenarios Diagram1 [pic] Diagram 2 [pic] Diagram 3 [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN. . In such a case, Subscription Engine will treat the subscriber as post- paid. . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription Engine would write the respective transaction logs & CDR in the SDP standard CDR format. Failure Scenario - Charging Failure scenario . Subscription Engine initiates charging request towards IN via UCS and UCS fails to respond. . Subscription Engine will retry charging for configured number of retries defined as a part of service definition. . If the charging fails even after configured number of retries than SE will generate the failure CDR Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition. . Subscription Engine will generate the CDR with appropriate status code (Eg -Provisioning failed). Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Engine will send the successful subscription purchase notification to the subscriber. 5 Subscription Activation through IVR Diagram 1 [pic] . Subscriber request for text based subscription purchase request via IVR to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the SE decides the subscription rate to be implemented and initiates the charging request towards IN via UCS. . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Failure Scenario Diagram 1 [pic] Diagram 2 [pic] Diagram 3 [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP. Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN . In such a case, Subscription Engine will treat the subscriber as post- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription Engine would write the respective transaction logs & CDR in the SDP standard CDR format. Failure Scenario - Charging Failure scenario . Subscription Engine initiates charging request towards IN via UCS and UCS fails to respond. . Subscription Engine will retry charging for configured number of retries defined as a part of service definition . If the charging fails even after configured number of retries than SE will generate the CDR Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition. . Subscription Engine will generate the CDR with appropriate status code (Eg -Provisioning failed). Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. 6 Subscription Activation through CRM [pic] . Subscriber request for text based subscription purchase request via CRM to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the SE decides the subscription rate to be implemented and initiates the charging request towards IN via UCS. . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Failure Scenarios Diagram 1 [pic] Diagram2 [pic] Diagram3 [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP. Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN . In such a case, Subscription Engine will treat the subscriber as post- paid. . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription Engine would write the respective transaction logs & CDR in the SDP standard CDR format. Failure Scenario - Charging Failure scenario . Subscription Engine initiates charging request towards IN via UCS and UCS fails to respond. . Subscription Engine will retry charging for configured number of retries defined as a part of service definition. . If the charging fails even after configured number of retries than SE will generate the failure CDR. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition. . Subscription Engine will generate the CDR with appropriate status code (E.g. -Provisioning failed). Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber 7 Subscription Activation through OBD [pic] . The OBD places call to the subscriber regarding the various subscriptions available for the user. . Subscriber requests for subscription service purchase to the Out Bound dialer(OBD) . OBD sends the subscription request on behalf of the subscriber to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS. . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Failure scenario Diagram1 [pic] Diagram2 [pic] Diagram 3:- [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN. . In such a case, Subscription Engine will treat the subscriber as post- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription Engine would write the respective transaction logs & CDR in the SDP standard CDR format. Failure Scenario - Charging Failure scenario . Subscription Engine initiates charging request towards IN via UCS and UCS fails to respond. . Subscription Engine will retry charging for configured number of retries defined as a part of service definition. . If the charging fails even after configured number of retries than SE will generate the failure CDR Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition. . Subscription Engine will generate the CDR with appropriate status code (Eg -Provisioning failed). Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. 8 Subscription Activation through Sanchaya [pic] . Sanchaya places call to the subscriber regarding the various subscriptions available for the user. . Subscriber requests for subscription service purchase to the sanchaya. . Sanchaya writes the response in to a file and sends the file to the SD team. . SD team uploads the file through UI for Bulk provisioning. . GUI sends the FTP file to the FTP location . The Scheduler fetches the FTP file from the FTP location. . Scheduler fetches one record at a time from the FTP file and forwards it to the Subscription engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS. . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. 9 Subscription Activation through VMS Voucher Management system has a collection of vouchers. The subscriber purchases the voucher from the VMS [pic] . Voucher Management system has a collection of vouchers. The subscriber purchases the voucher from the VMS. . VMS forwards the service request to the subscription Engine. But before handing over the request to subscription engine, VMS will perform the pin validation. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . The subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. NOTE: In the scenarios where pin validation is required, respective systems will be responsible to do the pin validations before handing over the request to subscription engine, i.e. subscription engine will not perform any pin validations nor will it maintain the pin in its system. 2 Renewal of Subscription Service Subscription Engine would facilitate the Renewal based on the various parameters like count, duration and volume. Subscription Engine would set an auto trigger within its internal system. The system would raise an internal trigger once the period for Service Subscription is reaching its end. Pre-Renewal message can be configurable and also the number of days it needs to be sent prior to also needs to be configurable. The trigger might also come from an external application/ system if the usage gets exhausted. 1 Subscription renewal based on validity Each subscription service has a validity period. The system would raise an internal trigger for renewal of the service, once the period for Service Subscription is reaching its end. [pic] . Subscription Engine fetches the records for renewal based on validity. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the SE decides the subscription rate to be implemented and initiates the charging request towards IN via UCS. . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Failure Scenario If the subscriber fails to renew the subscription service within the validity period, the subscription service status is changed to Grace period. In this grace period the application continues to deliver the content for a configured number of days. [pic] Failure Scenario - Charging Failure scenario (subscription status from active period to grace period) . Subscription Engine initiates charging request towards IN via UCS and UCS fails to respond. . Subscription Engine will retry charging for configured number of retries defined as a part of service definition . If the charging fails even after configured number of retries than SE will update the user state to the grace mode and continue content delivery for configured number of days . Subscription engine updates the subscriber's subscription status to grace mode in the SE database. . Subscription engine generate the failure CDR . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber . Updates the subscription service's Grace Mode status in SDP UUP component . Subscription engine will send the unsuccessful subscription purchase notification to the Message Gateway . Subsequently Subscription Engine will send the unsuccessful subscription renewal to the subscriber NOTE: In case of Blackberry, Subscription engine will be responsible for suspending the subscriber's blackberry service on the RIM server when the subscriber's blackberry service subscription goes in grace state by initiating the suspension provisioning request towards RIM server. 2 Renewal Subscription based on Usage exhaustion Each subscription Service has a validity period and a usage limitation. If the subscription service is in its validity period but it has utilized the usage limitation, then the Subscription engine notifies the subscriber to take the consent for renewal of that subscription service. [pic] . Application notifies the Subscription engine regarding the subscribers whose subscription service usage is exhausting . Subscription engine notifies the subscriber to take the consent for renewal of that subscription service. . Subscriber opts for renewal of the subscription service. . Subscription engine fetches the rating charge of subscription service information pertinent to that subscriber from SE database. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the SE decides the subscription rate to be implemented and initiates the charging request towards IN via UCS. . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Updates the subscription service renewal status in SDP UUP component to assign the subscription service to the subscriber. . Subscription engine will send the successful subscription renewal notification to the Message Gateway . Subsequently Subscription Engine will send the successful subscription renewal to the subscriber 3 Renewal of Service and not Validity Each subscription Service has a validity period and a usage limitation. If the subscription service is in its validity period but its usage gets exhausted, then the subscriber can opt for additional usage wherein its subscription service validity still remains the same. In this scenario, the respective applications will be responsible for sending the trigger to the SE wherein SE will do charging and will notify the application/system responsible for content delivery for the addition of usage. For e.g. the subscriber have purchased the subscription service on 1st March having monthly validity i.e. renewal is pending on 1st of April, and allowed 20 contents to download. If subscriber exhaust his usage within 20 days than subscriber can opt for additional service usage but his renewal will still happen on 1st of April. [pic] . Once the subscriber's usage gets exhausted before the expiry of validity, subscriber is opting for service renewal (usage addition) and the request for the same will be forwarded to application. . Application will send the trigger to Subscription engine regarding the service renewal of subscriber (usage addition) . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription engine will perform the validations pertinent to service renewal based on subscriber profile . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . SE will subsequently initiates the charging request towards IN via UCS. . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends the renewal of service notification request to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Update the SE with this transaction . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Subscription engine will send the successful service renewal notification to the Message Gateway . Subsequently messaging gateway will send that notification to the subscriber 4 Renewal of Service and Validity Each subscription Service has a validity period and a usage limitation. If the subscription service is in its validity period but its usage gets exhausted, then the subscriber can opt for additional usage associated with some validity for the same. In this scenario, the respective applications will be responsible for sending the trigger to the SE wherein SE will do charging and will notify the application/system responsible for content delivery for the addition of usage and associated validity. For e.g. the subscriber have purchased the subscription service on 1st March having monthly validity i.e. renewal is pending on 1st of April, and allowed 20 contents to download. If subscriber exhaust his usage within 20 days than subscriber can opt for additional service usage with the associated validity of 15 days but his next renewal will happen on 5th of April. Note: The flow for this scenario will be similar to flow as mentioned in section 8.2.3 except the change of next renewal date 3 Subscription service in grace mode If the subscriber fails to renew the subscription service within the validity period, the subscription service status is changed to Grace period. In this grace period the application continues to deliver the content for a configured number of days. [pic] . Subscription Engine fetches the subscribers whose subscription service is in grace mode. . Subscription Engine would do the following validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Updates the subscription service renewal status in SDP UUP component to assign the subscription service to the subscriber. . Subscription engine will send the successful subscription renewal notification to the Message Gateway . Subsequently Subscription Engine will send the successful subscription renewal to the subscriber NOTE: In case of Blackberry, Subscription engine will be responsible for suspending the subscriber's blackberry service on the RIM server when the subscriber's blackberry service subscription goes in grace state by initiating the suspension provisioning request towards RIM server. Failure Scenario - Charging Failure scenario(Grace mode to suspension mode) s If the subscriber fails to renew the subscription service within the grace period, the subscription service status is changed to suspension period. In this suspension period the application stops to deliver the content. [pic] . Subscription Engine initiates charging request towards IN via UCS and UCS fails to respond. . Subscription Engine will retry charging for configured number of retries defined as a part of service definition. . If the charging fails even after configured number of retries than SE will update the user state from grace mode to suspension mode and stops the content delivery. . Subscription engine generate the failure CDR. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. . Updates the subscription service's suspension Mode status in SDP UUP component. . Subscription engine will send the unsuccessful subscription purchase notification to the Message Gateway. . Subsequently Subscription Engine will send the unsuccessful subscription renewal to the subscriber. NOTE: In case of Blackberry, Subscription engine will be responsible for suspending the subscriber's blackberry service on the RIM server when the subscriber's blackberry service subscription goes in suspend state by initiating the suspension provisioning request towards RIM server. 4 Subscription service in Suspension mode If the subscriber fails to renew the subscription service within the suspension period, the subscription service status is changed to deactivation. The subscription engine deactivates the service to the subscriber and updates its database with the deactivation status. Suspension to Deactivation mode [pic] . Subscription engine will try to renew the subscription service which is in suspended mode for configured number of days. . The suspended period of the subscription service gets exhausted. . The subscription engine will initiate the deactivation of the subscription service for the subscriber. . The subscription engine does the subscription deactivation request and syntax validation. . Subscription engine sends the subscription deprovisioning request to the application . Subscription engine updates the subscriber's subscription deactivation status SE database. . Updates the subscription service's deactivation status in SDP UUP component . Subsequently Subscription Engine will send the subscription service deactivation notification to the subscriber NOTE: In case of Blackberry, Subscription engine will be responsible for suspending the subscriber's blackberry service on the RIM server when the subscriber's blackberry service subscription goes in suspend state by initiating the suspension provisioning request towards RIM server. 5 Subscription service in deactivation mode When a subscription service is in deactivation mode, the subscription service is stopped for the subscriber. Any request for renewal of the service would be treated as a new request. There are different scenarios in which the subscription service can be in the deactivation mode:- 1. Suspension mode to deactivate mode: - As discussed in the previous use case. If the subscriber fails to renew the subscription service within the suspension period, the subscription service status is changed to deactivation. The subscription engine deactivates the service to the subscriber and updates its database with the deactivation status. 2. Opt in Deactivation:-If the subscriber explicitly requests (opts) for the deactivation of the subscription service, the Subscription engine deactivates the subscription service for the subscriber. 1 OPT IN Deactivation of the subscription [pic] . Subscriber sends the subscription service deactivation request via SMS on a short code and keyword to Messaging gateway which in turn will forward the request to subscription engine. . Subscription Engine would do the follow validations:- o Deactivation request syntax is valid or not o Subscriber is already subscribed to the requested service or not o Subscription Engine would send an acknowledgement to the subscriber. . Subscription Engine sends the subscription service deprovisioning request to the application for subscriber. . Subscription Engine will update the deactivation status of the subscription service for the subscriber in its database. . Subscription Engine generates a CDR for this process. . SE will update the subscriber's subscription status as deactivated in UUP . Subscription Engine will send the successful deactivation of subscription notification to the subscriber 6 Business Models for the subscription The subscriber can request for a subscription service via various discovery channels. The subscription engine validates the request and then apply rate for the subscription service .Subscription Engine would fetch the subscription definition which includes rating information for requested service and hit the IN via UCS to fetch the balance of the subscriber. There are various business model applied for deciding the rate of the subscription service:- o Step charging o Micro charging o Trigger charging. The subscription engines apply rating rules on the service by using the following parameters:- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit Depending on the subscribers balance, the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS. Step charging :- For the subscription service, a set of step charging rate is available. Depending on the subscribers balance, the step charge value is decided. Example: - For the news subscription, the base rate for the News subscription is Rs.30/-.The subscription Engine defines 4 step charging as follows:- |SL.No | Rate |No.of Days valid|Alerts | |1 |30 |30 |30 | |2 |20 |20 |20 | |3 |10 |10 |10 | |4 |5 |5 |5 | Depending on the balance of the subscriber, the step charge is decided as explained below:- o Case 1:- If the subscribers balance is Rs. 35 , Threshold value is Rs.5 , Then charging amount is 35-5 =30 ; So the SE will opt for the 1st rate ie RS 30/-.So the subscription service will be available for 30 days with 30 alerts. o Case 2:-If the subscribers balance is Rs. 22 , Threshold value is Rs.5 , Then charging amount is 22-5 =17 ; So the SE will opt for the 2st rate ie RS 10/-. So the subscription service will be available for 10 days with 10 alerts. o Case 3:-If the subscribers balance is Rs. 6 , Threshold value is Rs.5 , Then charging amount is 6-5 =1 ; the SE doesn't have any step charge defined for this amount .So SE will not activate the subscription service Micro Charging :- Subscription Engine would fetch the subscription definition which includes rating information for requested service and fetch the balance of the subscriber. If the subscriber has a low balance, the subscription engine uses the N-x formula to compute the subscription/charging rate of the service, where N =Balance of the subscriber, x= Threshold limit. Example:- The subscriber has a balance of Rs.15/- and as per TRAI regulation, the threshold limit is Rs.3/- Then the subscription Engine will deduct RS.12/- (15-3 ie N-x) as the subscription charges. Trigger charging: - This is an event based subscription service request. Ex: - subscription for world cup. The subscription engine uses the N-x formula to compute the subscription/charging rate of the service, where N =Balance of the subscriber, x= Threshold limit. Example:- The subscription service rate is RS.30/-. The subscriber has a balance of Rs.15/- and as per TRAI regulation, the threshold limit is Rs.3/- Subscription Engine will deduct RS.12/- (15-3 i.e. N-x)as the subscription charges and provide the service for configured no. of days. 1 Step charging [pic] . Subscriber request for text based subscription purchase request via SMS (any discovery channel) to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription o Service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the Subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. For each subscription service, the subscription engine would decide the step charging as discussed in scenario above Note: Balance check & Charging will be performed by integrating to the necessary charging elements (UCS) . If user doesn't have sufficient balance to activate, apply low balance handling features as: o Per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. 2 Micro Charging [pic] . Subscriber request for text based subscription purchase request via SMS (any discovery channel) to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription o service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the Subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE apply rate based on the available balance (N-x charging) . Subscriber engine deducts the threshold value (x) from the subscription service rate. . If user doesn't have sufficient balance to activate, apply low balance handling features as: o Per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. 3 Trigger Charging:- [pic] . Trigger charging is an event based subscription which will be available to the subscriber for a preconfigured no. of days. . Subscription Engine initiates the provisioning of the subscription service request for preconfigured no. of days. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . SE writes the transaction logs. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. 5 Fetch and deliver Once subscriber's subscription is successfully provisioned for a subscription service wherein Subscription Engine will fetch and deliver the content based on various metrics. Also subscription engine will have capability to cache the content instead of hitting internal or external applications for fetching the content before delivering the content to each subscriber. Subscription Engine will fetch the content in predefined scheduled time and deliver it to the subscriber. Subscription Engine will also manage the counter on the metrics on each content delivery and log the corresponding transactions. [pic] . Subscription Engine periodically fetches the application specific content and writes in to the file. . Subscription Engine will fetch the subscribers to whom the content is to be delivered. . Subscription Engine updates the content delivery status of the subscriber. . Subscription Engine delivers the application specific content to the subscriber via the messaging gateway. Failure Scenario - content Fetch failure scenario :- . In Case, the Subscription engine fails to fetch the application specific content, it will generate an alert. . Subscription Engine will retry fetching the application specific content for configured number of times. Failure Scenario - content delivery failure scenario :- . If Subscription engine fails to deliver the application specific content to the subscriber, it will retry delivering the application specific content for configured number of times to the subscriber. 6 Normal content delivery [pic] . Once the subscription service is purchased successfully, it will be responsibility of application to deliver the content directly to the subscriber. . Application will fetch the list of subscribers to whom the content needs to be delivered . Application will deliver the content to the subscriber based on pre- defined schedule and targeted usage of subscriber . Once the usage gets exhausted application will send the usage exhaustion notification to the subscription engine . Subscription engine in turn will send the renewal notification to the subscriber 7 Try and Buy pack Some subscription services are available in try and buy pack. Initially this pack is available for free to the subscriber. At the end of Try and buy trial pack, the subscriber engine apply rate for the subscription service. [pic] . Subscriber request for subscription purchase via SMS to Messaging gateway. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription o Service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would sends the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . Subscription Engine updates the try and buy pack in the SE database . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the try and buy subscription pack in SDP UUP component Charge user on end of try and buy pack . At the end of Try and buy trial pack, the subscriber engine apply rate for the subscription service. . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . The application delivers the content to the subscriber successfully. 7 Combo pack Combo pack is a combination of two or more services where in the combined price for activation is defined in the combo service definition, the combined price for combo can be defined as complete or in steps in case of activation. There are 4 types of Combo pack available. 1. Combo pack 1 2. Combo pack 2 3. Combo pack 3 4. Combo pack 4 1 Combo pack 1 Combo1 is a combination of two or more services (maximum 4) where in the combined price for activation is defined in the combo service definition, the combined price for combo can be defined as complete or in steps in case of activation. The distribution of alerts and validity to the users will be based on the user's balance and the corresponding price & validity matrix provided by the product manager. The renewal process in this case is independent of the combo configuration rather it follows the renewal process of the individual services that are present in the combo however a priority definition is provided which decides which service out of all services present in combo shall be renewed first. Lower priority service will not get renewed until the higher priority service gets renewed, i.e. renewal will always be based on longest running service. [pic] . Subscriber request for combo pack 1 subscription purchase request via messaging gateway to the subscription engine for SMS based discovery channel . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters - o Subscriber balance. o Rating information for requested combo service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the SE decides the subscription rate to be implemented and initiates the charging request towards IN via UCS. . The combo pack has more than 1 service available. Each service has a specific usage available for specific valid period. The distribution of alerts and validity to the users will be according to the user's balance and price & validity matrix configured in combo service definition. For example.- Assume a combo pack has a combination of Jokes and astro .The various step charge available is as follows:- 1. Charged price is RS. 45 for 3 Jokes alert and 2 astro alert, validity 30 days for joke and 20 days for astro 2. Charged price is RS. 40 for 3 Jokes alert and 2 astro alert, validity 25 days for joke and 15 days for astro . On successful charging, the subscription engine sends subscription service provisioning request for the available services as a part of combo pack with their respective validity period data and usage related information to the respective applications. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Scenario for Renewal:- The renewals will be executed according to the priority defined in the combo definition. The lower priority service will be renewed only when the higher priority service in the combo is renewed, i.e. renewal will be based on longest running service. The validity and content alerts distribution is according to the matrix configured in the single services and not the combo definition. User will be activated to the combo if the user balance belongs to any of the steps defined in the combo definition matrix, if the users balance is less than the last step defined in the matrix then user will be denied of the service. The distribution of usage and validity to the user is also according to the user's balance and price & validity matrix definition of the combo. If the user is already subscribed to one of the single services that are part of combo that will have no effect on the activation of combo and the user will receive alerts from both combo and already subscribed single service. Assuming the combo pack has 2 services. ComboSubPack-1 with Content Validity X and ComboSubPack-2 with Content Y Validity i.e. combo sub pack 1 has higher priority than combo sub pack 2, then depending on the balance of the subscriber, Combo sub pack1 will be renewed for a higher subscription rate Example:- Rates for combo sub pack1:- 1. Rs 45. for 3 alerts , validity 30 days 2. Rs.40 , 3 alerts , validity 20 days 3. Rs 35 , 2 alerts , validity 15 days Rates for combo pack 2:- 1. Rs 30 , for 3 alerts , validity 15 days 2. Rs.20 , 2 alerts , validity 10 days 3. Rs 10 , 2 alerts , validity 5 days If the subscriber has renewed for Rs 60/- , as combo sub pack 1 has higher priority, so it will be renewed with higher amount and combo sub pack renewed with the balance amount. Combo sub pack1 is renewed for Rs.45 and combo sub pack 2 will be renewed for Rs.10 only (Rs. 60 -Rs 45 = Rs.15. the step charge is valid for Rs 10/-) . The subscription engine checks the priority of the service sub pack1 and service sub pack 2. If the service pack 1 is the higher priority pack then it is renewed first. Else if the pack is lower priority service, then it will be renewed only when the higher priority service in the combo is renewed. . Subscription Engine fetches the record of the subscriber for renew pack1. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters - o The subscriber balance. o The rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the higher priority sub pack gets the highest amount renewed and the lower priority sub pack gets the balance. . On successful charging, the subscription engine sends subscription service provisioning request for the available services as a part of combo pack with their respective validity period data and usage related information to the respective applications. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. 2 Combo pack 2 Combo2 is a combination of two or more services (maximum 4) where in the combined price for activation is defined in the combo definition, the combined price for combo can be defined as complete or in steps in case of activation. The distribution of alerts and validity to the users will be according to the user's balance and price & validity matrix provided by the product managers. The renewal process in this case is dependent of the combo configuration and not on renewal process of the individual services that are present in the combo. The distribution of validity and content alerts in renewals is defined in the renewal price & validity matrix of the combo. [pic] . Subscriber request for combo pack subscription purchase request via messaging gateway to the subscription engine for SMS based discovery channel . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters - o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the SE decides the subscription rate to be implemented and initiates the charging request towards IN via UCS. . The combo pack has more than 1 service available. Each service has a specific content available for specific valid period. For example.- Assume a combo pack has a combination of Jokes and astro .The various step charge available is as follows:- 1. Charged price is RS. 45 for 3 Jokes alert and 2 astro alert, validity 30 days for joke and 20 days for astro 2. Charged price is RS. 40 for 3 Jokes alert and 2 astro alert, validity 25 days for joke and 15 days for astro So if the subscriber balance is Rs. 50, the subscription service of Rs 45 is available for the subscriber . On successful charging, the subscription engine sends subscription service provisioning request for the available services as a part of combo pack with their respective validity period data and usage related information to the respective applications. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Scenario for Renewal:- The renewals in this case will be executed according to the price & validity matrix configured in the combo definition. The validity and content alerts distribution is according to the matrix configured in the combo and not on the single service definition. Assuming the combo pack has 2 services. Depending on the balance of the subscriber, Combo pack will be renewed. Example:- Rates for combo pack:- 1. Rs 45. for 3 alerts , validity 30 days 2. Rs.40 , 3 alerts , validity 20 days 3. Rs 35 , 2 alerts , validity 15 days If the subscriber has renewed for Rs 50/- , the 1st subscription rate is charged for the service. . Subscription Engine fetches the record of the subscriber for renew of the combo pack. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters - o The subscriber balance. o The rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the subscription rate is decided. . On successful charging, the subscription engine sends subscription service provisioning request for the combo pack with validity period data to the applications. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. 3 Combo pack 3 Combo3 is a combination of two services where in separate price and validity for activation is defined for the services in the combo definition. The distribution of alerts and validity to the users will be according to the user's balance and price & validity matrix field by the ops team as well as it will be dependent on the percentage ratio defined in the service definition. The renewal process in this case is also dependent on the combo configuration rather the renewal process of the individual services that are present in the combo. | | | | | | | |Charged Price |No. of|Validity J |COMBO |Charg| | | |Alerts| | |ed | | | | | | |Price| Example: - Assume a combo pack has a combination of Jokes and astro. A percentage ratio is defined in the service definition i.e. Jokes service is given 60% preference and Astro is given 40 %.The various step charge available is as follows:- 1. Charged price is RS. 30 for 3 Jokes alert, validity 30 days 2. Charged price is RS. 25 for 3 Jokes alert and validity 25 days 3. Charged price is RS. 15 for 2 astro alert, validity 30 days 4. Charged price is RS. 10 for 2 astro alert and validity 25 days If the subscriber has a balance of RS.60, Jokes service will be given 60% preference and astro will be given 40% preference i.e. Rs.30 will be charged for Joke service and Rs.15 will be charged for astro [pic] . Subscriber request for combo pack subscription purchase request via messaging gateway to the subscription engine for SMS based discovery channel . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters - o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the SE decides the subscription rate to be implemented and initiates the charging request towards IN via UCS. . The combo pack has more than 1 service available. Each service has a specific content available for specific valid period. The distribution of alerts and validity to the users will be according to the user's balance and price & validity matrix field by the ops team as well as it will be dependent on the percentage ratio defined in the service definition as explained in the above example. . On successful charging, the subscription engine sends subscription service provisioning request for the available services as a part of combo pack with their respective validity period data and usage related information to the respective applications. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Scenario for Renewal:- The renewals in this case will be executed according to renewal price & validity configured in combo definition. The validity and content alerts distribution is according to the matrix configured in the combo definition and not the single service definition. | | | | | | | | | | |Charged Price |No. of|Validity J | | | |Alerts| | Assuming the combo pack has 2 services. ComboSubPack-1 with Content X Validity X and ComboSubPack-2 with Content Y Validity I.e. combo sub pack 1 has higher percentage priority than combo sub pack 2, then depending on the balance of the subscriber, Combo sub pack1 will be renewed for a higher subscription rate [pic] . Subscription Engine fetches the record of the subscriber for renewal of the combo pack. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters - o The subscriber balance. o The rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , rating rules are based on the allocation percentage ratio as defined by the SE (60:40 | 50:50) . On successful charging, the subscription engine sends subscription service provisioning request for the available services as a part of combo pack with their respective validity period data and usage related information to the respective applications. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. 6 Combo pack 4 Combo4 is a combination of two services where in separate price and validity for activation is defined for the services in the combo definition. The distribution of alerts and validity to the users will be according to the user's balance and price & validity matrix field by the ops team as well as it will be dependent on the parent child relationship a percentage ratio defined in the service definition. The renewal process in this case is also dependent on the combo configuration rather the renewal process of the individual services that are present in the combo. | |Charged Price |No. of|Validity J |COMBO | | | |Alerts| | | Example: - Assume a combo pack has a combination of Jokes and astro. A parent child relation and percentage ratio is defined in the service definition i.e. Jokes service is the parent and given 60% preference and Astro is the child with given 40 %.The various step charge available is as follows:- 1. Charged price is RS. 30 for 3 Jokes alert, validity 30 days 2. Charged price is RS. 25 for 3 Jokes alert and validity 25 days 3. Charged price is RS. 15 for 2 astro alert, validity 15 days 4. Charged price is RS. 10 for 2 astro alert and validity 10 days If the subscriber has a balance of RS.60, Jokes service will be given 60% preference and astro will be given 40% preference ie Rs.30 will be charged for Joke service and Rs.15 will be charged for astro [pic] . Subscriber request for combo pack subscription purchase request via messaging gateway to the subscription engine for SMS based discovery channel . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters - o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance, the SE decides the subscription rate to be implemented and initiates the charging request towards IN via UCS. . The combo pack has more than 1 service available. Each service has a specific content available for specific valid period. The distribution of alerts and validity to the users will be according to the user's balance and price & validity matrix field by the ops team as well as it will be dependent on the parent child relation and percentage ratio defined in the service definition as explained in the above example. . On successful charging, the subscription engine sends subscription service provisioning request for the available services as a part of combo pack with their respective validity period data and usage related information to the respective applications. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . The subscription engine applies for Parent Child tagging based on the service definition. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Scenario for renewal The renewals in this case will be executed according to renewal price & validity configured in combo definition. The validity and content alerts distribution is according to the matrix configured in the combo definition and not the single service definition. User will be activated to the combo if the user balance belongs to any of the steps defined in the combo definition matrix, if the users balance is less than the last step defined in the matrix then user will be denied of the service. The distribution of content alerts and validity to the user is also according to the user's balance and price & validity matrix definition of the combo. If the user is already subscribed to one of the single services that are part of combo that will have no effect on the activation of combo and the user will receive alerts from both combo and already subscribed single service. . Subscription Engine fetches the record of the subscriber for renewal of the combo pack. . Subscription Engine validates if the Combo sub pack is a child or parent. If the Combo sub pack is a child, need to validate if the parent is already activated and subscribed. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters - o The subscriber balance. o The rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , rating rules are based on the parent child relation and the allocation percentage ratio as defined by the SE (60:40 | 50:50) . On successful charging, the subscription engine sends subscription service provisioning request for the available services as a part of combo pack with their respective validity period data and usage related information to the respective applications. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. 8 Provisioning of the subscription services Based on type of services, the subscription service needs to be provisioned in the following elements 1. Application responsible for delivering the content viz. CMS, 3rd party CP, etc. 2. Network elements, e.g. GPRS, Blackberry, MCA has to be registered in HLR and additionally blackberry service also has to be provisioned on RIM server. 1 RBT Provisioning The ring back tone (RBT) service needs to be provisioned in the HLR. The subscription engine sends the request for RBT service provisioning to EAI layer. EAI layer forwards the RBT provisioning request to HLR via the Comptel IL7 interface. [pic] . Subscriber request for RBT subscription purchase request via SMS will be first forwarded to the RBT application for application specific validations. . RBT application on successful validation will forward the request to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o HLR provisioning information . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o The subscriber balance. o The rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . RBT subscription request need to be provisioned (registered) in the HLR. The subscription engine sends the request for RBT service provisioning to EAI layer. . EAI layer forwards the RBT provisioning request to HLR via the Comptel IL7 interface. . Subscription engine will poll the response from IVSM history table pertinent to charging and provisioning. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Subscription engine is updated with the RBT subscription service status for the subscriber. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Failure Scenarios [pic] Scenario 1:-UUP doesn't have HLR provisioning information :- Subscription engine will fetch the provisioning related information required to invoke the Comptel IL7 interface from either of following 2 systems _NSMS _UUP The UUP has the HLR provisioning information. If in case UUP doesn't have the HLR provisioning information, EAI layer forwards the request to the NSMS . . The Subscription engine sends request to the EAI layer to fetch the provisioning information. . The EAI layer forwards the request to the UUP. . If UUP doesn't have the HLR provisioning information, EAI layer forwards the request to the NSMS. . The provisioning information is send to Subscription Engine from NSMS via the EAI layer. Scenario 2:-Subscription provisioning fails in the RBT application :- . Subscription Engine sends the request for provisioning to RBT applications and it fails. . Subscription Engine will retry provisioning request to application for configured number of retries defined as a part of service definition. . If the configured number of retrial fails, Subscription Engine will push the provisioning request in to the RBT application's retry queue. 2 Pre-tone Provisioning The pre-tone service needs to be provisioned in the HLR. The subscription engine sends the request for pre tone service provisioning to EAI layer. EAI layer forwards the pretone provisioning request to HLR via the Comptel IL7 interface. [pic] . Subscriber request for pre tone subscription purchase request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid in the pre tone application. o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o HLR provisioning information . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber . The subscription engine apply rating rules on the service by using the following parameters :- o The subscriber balance. o The rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . Pre tone subscription request need to be provisioned (registered) in the HLR. The subscription engine sends the request for pre tone service provisioning to EAI layer. . EAI layer forwards the pre tone provisioning request to HLR via the Comptel IL7 interface. . Subscription engine will poll the response from IVSM history table pertinent to charging and provisioning. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Subscription engine is updated with the pre tone subscription service status for the subscriber. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. [pic] Scenario 1:-UUP doesn't have HLR provisioning information :- Subscription engine will fetch the provisioning related information required to invoke the Comptel IL7 interface from either of following 2 systems - NSMS - UUP The UUP has the HLR provisioning information. If in case UUP doesn't have the HLR provisioning information, EAI layer forwards the request to the NSMS. . The Subscription engine sends request to the EAI layer to fetch the provisioning information. . The EAI layer forwards the request to the UUP. . If UUP doesn't have the HLR provisioning information, EAI layer forwards the request to the NSMS. . The provisioning information is send to Subscription Engine from NSMS via the EAI layer. Scenario 2:-Subscription provisioning fails in the pre-tone application :- . Subscription Engine sends the request for provisioning to pre-tone applications and it fails. . Subscription Engine will retry provisioning request to application for configured number of retries defined as a part of service definition. . If the configured number of retrial fails, Subscription Engine will push the provisioning request in to the pre tone application's retry queue 3 GPRS Provisioning When a subscriber requests for the GPRS subscription service, the subscriber has to be provisioned in the UCS evolve for GPRS service. [pic] . Subscriber request for the GPRS service via SMS to the Message gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid in UCSe (UCS evolve) o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o HLR provisioning information o Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine fetches the subscriber's balance. . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the rate for the subscription and initiates the charging request towards IN via UCS . Note: Balance check & Charging will be performed by integrating to the necessary charging elements (UCS) . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the GPRS provisioning request is send to UCs evolved. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Subscription Engine will send the successful GPRS subscription purchase notification to the subscriber . Updates the GPRS subscription service status in SDP UUP component to assign the subscription service to the subscriber. [pic] Failure scenario - GPRS provisioning fails in UCS evolve :- . The subscription engine sends the GPRS provisioning request to the UCS evolve and it fails. . Subscription Engine will retry GPRS subscription provisioning to UCSe for configured number of retries defined as a part of service definition. . If the configured number of retrial fails, Subscription Engine will push the GPRS subscription request in to the UCS evolve retry queue. 4 Blackberry Provisioning When a subscriber requests for the subscription service from blackberry, the subscription service has to be provisioned in the HLR and RIM server. [pic] . Subscriber request from a blackberry phone for subscription purchase request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o HLR provisioning information . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber . The subscription engine apply rating rules on the service by using the following parameters :- o The subscriber balance. o The rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . Blackberry subscription request need to be provisioned (registered) in the HLR and the RIM server. The subscription engine sends the request for blackberry provisioning to EAI layer. . EAI layer forwards the blackberry provisioning request to HLR and RIM server Via the Comptel IL7 interface. . IL7 sends the blackberry provisioning successful message to the subscription engine. . Subscription engine is updated with the blackberry subscription service successful status for the subscriber. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the blackberry subscription service status in SDP UUP component to assign the subscription service to the subscriber. [pic] Scenario 1:-UUP doesn't have HLR provisioning information :- Subscription engine will fetch the provisioning related information required to invoke the Comptel IL7 interface from either of following 2 systems _NSMS _UUP . Subscription engine sends request to the EAI layer to fetch the provisioning information. . The EAI layer forwards the request to the UUP. . If UUP doesn't have the HLR provisioning information, EAI layer forwards the request to the NSMS. . The provisioning information is send to Subscription Engine from NSMS via the EAI layer. Scenario 2:-Subscription provisioning fails on RIM server :- . In case, the subscription provisioning fails on the RIM server, the failure message is send to subscription engine via the IL7 and EAI layer. . Subscription Engine will retry provisioning request to application for configured number of retries defined as a part of service definition. . If the configured number of retrial fails, Subscription Engine will push the provisioning request in to the retry queue 5 Appstore provisioning Appstore has a collection of applications/ services .It provides the subscription service for valid subscriber. Appstore sends the subscription request (new added subscription) to the subscription engine. [pic] . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o The subscriber balance. o The rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service charging notification to the App Store . After receiving the charging successful notification, the app store will provide service to the subscriber. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Failure Scenario [pic] Failure Scenario :- charging notification to app store fails:- . The subscription Engine sends the successful charging notification to the app store and it fails. . Subscription Engine will retry charging for configured number of retries defined as a part of service definition . If the charging fails even after configured number of retries then SE will push the notification request to app store in retry queue. 6 Bulk subscription provisioning through API When an application request for the subscription service in bulk e.g. corporate subscription for a service, the request is fetched one record at a time from the API and forwarded it to the Subscription engine. [pic] . The application invokes bulk subscription service request to the bulk API. . Bulk API sends the FTP file to the FTP location . The Scheduler fetches the FTP file from the FTP location. . Scheduler fetches one record at a time from the FTP file and forwards it to the Subscription engine. . The Subscription engine does the necessary process and logs the response in a file. 7 Bulk subscription provisioning through UI When a subscriber request for the subscription service through a GUI, the request is fetched one record at a time from the API and forwarded to the Subscription engine. . [pic] . User selects a subscription service file from the GUI. . GUI sends the FTP file to the FTP location . The Scheduler fetches the FTP file from the FTP location. . Scheduler fetches one record at a time from the FTP file and forwards it to the Subscription engine. . The Subscription engine does the necessary process and logs the response in a file. 9 Subscription services for GPRS When a subscriber requests for a GPRS subscription, the subscription needs to be provisioned in the UCS evolve. The various GPRS subscription service available for the subscriber is as follows:- 1. Pre charged GPRS plan 2. GPRS Plan change 3. GPRS Daily pack Pre charged GPRS plan - This service plan comes as a complimentary offer to the subscriber. When the subscriber sends a request for the pre charged plan, the subscription engine validates if the request received is for GPRS plan change or it's a pre charge plan. If the request received is for GPRS pre charge plan , the SE validates if the subscriber had send the same plan change request earlier in the same day(repeated request).If the subscriber's GPRS plan is already changed on same day than SE will reject the subscription request. GPRS Plan Change:- When the subscriber sends a request for the GPRS plan change . the SE validates if the subscriber had send the same plan change request earlier in the same day(repeated request).If the subscriber's GPRS plan is already changed on same day than SE will reject the subscription request. GPRS Daily pack :- These subscription services are available on daily basis. When the subscriber request for the pack , the SE need not check , if the subscriber has already send the same request in that day.SE sends the GPRS provisioning to the UCS evolve. 1 GPRS plan change When the subscriber sends a request for the GPRS plan change, the SE validates if the subscriber had send the same plan change request earlier in the same day(repeated request).If the subscriber's GPRS plan is already changed on same day than SE will reject the subscription request. [pic] . Subscriber request for the GPRS plan change service via SMS to the Message gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid in UCSe(UCS evolved) o Subscriber is already subscribed to the requested service or not . The subscription engine validates if the request received is for GPRS plan change. . If the request received is for GPRS plan change , the SE validates if the subscriber had send the same plan change request earlier in the same day(repeated request).If the subscriber's GPRS plan is already changed on same day than SE will reject the subscription request. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o HLR provisioning information . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the subscription rate to be implemented and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the GPRS provisioning request is send to UCs evolved. . Generates audit logs in the form of CDR for charging transaction and EDR for event based processing. . Subscription Engine will send the successful GPRS plan change subscription purchase notification to the subscriber . Updates the GPRS subscription plan status in SDP UUP component to assign the subscription service to the subscriber. [pic] Failure scenario - GPRS provisioning fails in UCS evolve :- . The subscription engine sends the GPRS provisioning request to the UCS evolve and it fails. . Subscription Engine will retry GPRS subscription provisioning to UCSe for configured number of retries defined as a part of service definition. . If the configured number of retrial fails, Subscription Engine will push the GPRS subscription request in to the UCS evolve retry queue. 2 Pre-charge GPRS activation request Pre charge plan is a complimentary subscription service available to the subscriber. The subscription engine validates the request and then provisions this service in the UCS evolve. [pic] . Pre charge GPRS service is available as a complimentary offer to the subscriber. . IN will send the pre-charge subscription request to subscription engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid in UCSe(UCS evolved) o Subscriber is already subscribed to the requested service or not . The subscription engine validates if the request received is for GPRS plan change or it's a pre charge plan. . The SE validates if the subscriber had send the same GPRS request earlier in the same day(repeated request).If the subscriber's GPRS plan is already changed on same day than SE will reject the subscription request. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o HLR provisioning information . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . SE will send the GPRS provisioning request to UCS evolve. . Generates audit logs in the form of CDR for charging transaction and EDR for event based processing. . Subscription Engine will send the successful GPRS pre charge subscription purchase notification to the subscriber . Updates the GPRS subscription plan status in SDP UUP component to assign the subscription service to the subscriber. [pic] Failure scenario - GPRS provisioning fails in UCS evolve . The subscription engine sends the GPRS provisioning request to the UCS evolve and it fails. . Subscription Engine will retry GPRS subscription provisioning to UCSe for configured number of retries defined as a part of service definition. . If the configured number of retrial fails, Subscription Engine will push the GPRS subscription request in to the UCS evolve retry queue. 3 GPRS Daily Pack These subscription services are available on daily basis. When the subscriber request for the pack, the SE need not check, if the subscriber has already send the same request in that day. SE sends the GPRS provisioning to the UCS evolve. [pic] . Subscriber request for the GPRS daily pack service via SMS to the Message gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid in UCSe(UCS evolved) o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o HLR provisioning information . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On successful charging, the GPRS provisioning request is send to UCS evolved. . Generates audit logs in the form of CDR for charging transaction and EDR for event based processing. . Subscription Engine will send the successful GPRS pre charge subscription purchase notification to the subscriber . Updates the GPRS subscription plan status in SDP UUP component to assign the subscription service to the subscriber. Usage consumption Scenario [pic] . The UCS evolve sends notification for usage consumption to the subscription engine. . The subscription engine initiates the GPRS plan provisioning request to the UCS evolve. . The UCS evolve will send the GPRS provisioning success message to the subscription engine. . The default GPRS plan is updated in the Subscription Engine. . Updates the GPRS subscription service in SDP UUP component to assign the subscription service to the subscriber. 10 Subscription plan for Blackberry When a subscriber requests for a subscription service from his blackberry phone, the subscription needs to be provisioned in the HLR as well as in the RIM server. The various subscription service requests available for the subscriber are as follows:- 1. Blackberry Plan change 2. Blackberry service change There are many subscription services available for a blackberry user and each service has many plan options. So a blackberry user can opt for the following 1. Change the subscription service. 2. Change the plan for a given service. Example:- Service A has 2 plans :- 1. Plan 1A - Price Rs 100 valid for 30 days. 2. Plan 2A -Price Rs 50 for 15 days. Service B has 2 plans :- 1. Plan 1B - Price Rs 200 valid for 30 days' 2. Plan 2B - Price Rs 100 valid for 15 days The subscriber is given the opportunity:- 1. change the service from Service A to service B (Blackberry service change) 2. change from plan , Plan 1A to Plan 1B.( Blackberry Plan change) 1 Blackberry plan change [pic] . Subscriber request for the Blackberry plan change for a selected subscription service via SMS to the Message gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not . The subscription engine validates if the request received is for Blackberry plan change for a selected subscription service. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber . The subscription engine apply rating rules on the service by using the following parameters :- o Subscriber balance. o Rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, success message is send to the subscription. . Generates audit logs in the form of CDR for charging transaction and EDR for event based processing. . Subscription Engine will send the successful Blackberry plan change subscription notification to the subscriber . Updates the Blackberry subscription plan status in SDP UUP component to assign the subscription service to the subscriber. 2 Blackberry Service change [pic] . Subscriber request from a blackberry phone for subscription service change request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o HLR provisioning information . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o The subscriber balance. o The rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . Blackberry subscription service request need to be provisioned (updated) in the HLR and the RIM server. The subscription engine sends the request for blackberry provisioning to EAI layer. . EAI layer forwards the blackberry provisioning request to HLR and RIM server Via the Comptel IL7 interface. . IL7 sends the blackberry provisioning successful message to the subscription engine. . Subscription engine is updated with the blackberry subscription service successful status for the subscriber. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the blackberry subscription service status in SDP UUP component to assign the subscription service to the subscriber. Failure Scenarios [pic] Scenario 1:-UUP doesn't have HLR provisioning information :- Subscription engine will fetch the provisioning related information required to invoke the Comptel IL7 interface from either of following 2 systems _NSMS _UUP If UUP does not have the HLR provisioning information, EAI sends the request to NSMS . The Subscription engine sends request to the EAI layer to fetch the provisioning information. . The EAI layer forwards the request to the UUP. . If UUP doesn't have the HLR provisioning information, EAI layer forwards the request to the NSMS. . The provisioning information is send to Subscription Engine from NSMS via the EAI layer. Scenario 2:-Subscription provisioning fails on RIM server :- . In case, the subscription provisioning fails on the RIM server, the failure message is send to subscription engine via the IL7 and EAI layer. . Subscription Engine will retry provisioning request to application for configured number of retries defined as a part of service definition. . If the configured number of retrial fails, Subscription Engine will push the provisioning request in to the retry queue 11 Subscribers life cycle management 1 IN Status-Active [pic] . Subscriber request for text based subscription purchase request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine checks the subscriber's status in the IN. If the status is active, It would continue with the process of applying rate. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber . The subscription engine apply rating rules on the service by using the following parameters :- o The subscriber balance. o The rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . On failure, apply retry policy (if any) as configured in service profile. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. 2 IN Status-InActive A subscriber's status can be inactive in IN under the following scenario:- 1. Subscriber has ported out / deactivated:-The subscriber has requested for the service and due to some reason the request is stored in the retry queue/ bucket. In the mean time, the subscriber has ported out / deactivated. So when the request is retrieved from the retry bucket, the IN status of the subscriber is already inactive. 2. The request is stored in the bulk. [pic] . Subscriber request for the service is stored in the retry queue/ bucket. The request is retrieved and forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine checks the subscriber's status in the IN. If the status is inactive, Subscription Engine generates an EDR for event based processing. . Subscription Engine logs the response in a file. Scenario 2:- Bulk request . Subscriber request for the service is stored in the bulk. The request is retrieved from the queue i.e. fetch one record at a time and forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine checks the subscriber's status in the IN. If the status is inactive, subscription Engine generates an EDR for event based processing. . Subscription Engine logs the response in a file. NOTE: In case of blackberry, subscription engine will initiate the blackberry service deprovisioning request for the subscriber towards HLR and RIM server. 3 IN Status -Grace Period [pic] . Subscriber request for text based subscription purchase request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine fetches the status of the subscriber IN. If the status is grace period, it would continue with the process of applying rate. . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the IN status (viz. Active, Grace, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine will hit the IN via UCS to fetch the balance of the subscriber. . The subscription engine apply rating rules on the service by using the following parameters :- o The subscriber balance. o The rating information for requested service. o Calculates the charging amount for the subscription service by using N- x formula , where N =Balance of the subscriber , x= Threshold limit . Depending on the subscribers balance , the SE decides the charging rate for the subscription and initiates the charging request towards IN via UCS . If user doesn't have sufficient balance to activate, apply low balance handling features as per configured in the service profile. These may be o Fallback service o Micro charging . The Subscription engine pushes the subscription request in the retry bucket for a configured number of days. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Updates the subscription service grace status in SE database. NOTE: UUP will identify the subscriber whose IN status gets changed from Active to Grace and will tag the same in separate table. Script will be executed once in a day to poll the tagged status changed from UUP. This in turn will invoke the API exposed by the subscription engine which in turn will take the appropriate action. In case of blackberry, if the subscriber is in Grace, then 2 scenarios exist. 1) For existing blackberry subscribers, subscription engine will initiate the blackberry service suspension request for the subscriber towards HLR and RIM server. 2) For the fresh blackberry activation request from the subscriber, subscription engine will deny the request to the subscriber. 4 SIM Change When the subscriber changes the SIM, there will system/application that will trigger the subscription engine notifying that the SIM of the subscriber has been changed so that the SE will initiate the request to provision the new SIM on RIM server. The SIM change request is being tagged in CRM (Crystal/Icare) as an SR (Service Request) route. These SRs are being pushed to the external table of CRM which will be picked by the automation scripts and once it successfully replaces the SIM on HLR subsequently it will trigger the subscription engine for the SIM exchange of the subscriber. [pic] . . SE will receive the SIM exchange notification from the automation scripts which is handling SIM exchange on the HLR . Automation scripts will invoke the API exposed by the subscription engine which in turn will take the appropriate action mentioned in subsequent steps. . The subscription engine validates if the subscriber has a blackberry service. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o Provisioning information. . The subscription engine sends the Blackberry provisioning request for new SIM to the EAI layer. . The EAI layer forwards the request to the RIM server via the Comptel IL7 interface. . RIM server sends the provisioning response to the Subscription engine. ( The new SIM is registered with the RIM server) . Subscription engine logs the new SIM provisioning response in the SE database. 5 Pre to Post Migration When the subscriber undergoes pre to post migration, the subscription engine validates if the subscriber has a blackberry service, if so has to de-provision the request for that particular subscriber on the RIM server. Also, subscription engine will send the deprovisioning request to the respective applications for which subscriber has been subscribed to so that the respective applications will stop delivering the content to the subscriber. [pic] . UUP will identify the subscriber migrated from pre to post and will tag the same in separate table. . Script will be executed once in a day to poll the tagged pre to post migrated subscriber from UUP. . This in turn will invoke the API exposed by the subscription engine which in turn takes the appropriate action as mentioned in subsequent steps. . The subscription engine validates if the subscriber has a blackberry service. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o Provisioning information. . The subscription engine sends the Blackberry deprovisioning request for new SIM to the EAI layer. . The EAI layer forwards the request to the RIM server via the Comptel IL7 interface. . RIM server sends the successful deprovisioning response to the Subscription engine. . Subsequently subscription engine will send the subscriber's subscriptions deprovisioning request to the respective application to which subscriber has been subscribed too. . Subscription engine logs the Deprovisioning response in the SE database. 6 Post to Pre Migration When the subscriber undergoes post to pre migration, subscription engine will send the deprovisioning request to the respective applications for which subscriber has been subscribed to so that the respective applications will stop delivering the content to the subscriber. [pic] . UUP will identify the subscriber migrated from post to pre and will tag the same in separate table. . Script will be executed once in a day to poll the tagged postpaid to prepaid migrated subscriber from UUP. . This in turn will invoke the API exposed by the subscription engine which in turn takes the appropriate action as mentioned in subsequent steps. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out . Subscription engine will send the subscriber's subscriptions deprovisioning request to the respective application to which subscriber has been subscribed too. . Subscription engine logs the Deprovisioning response in the SE database. 7 Churn Scenario [pic] . When a subscriber is deactivated/ ported out from the network, the application / system sends a request to the subscription Engine. . Subscription Engine fetches the list of subscription services pertinent to the subscriber . Subscription Engine initiates the deactivation of the subscription service request by the subscriber . Subscription Engine validates the following :- o Subscription deactivation request and syntax validation. . Subscription Engine sends a deprovisioning request to the application . Subscription Engine updates the deactivation status of the subscriber in the SE database . Write audit logs in the form of CDR . Send SMS notification to the user with the subscription deactivation message. . Updates the subscription deactivation status in SDP UUP component. 8 Port Out Scenario When the subscriber gets ported out from the IDEA network then all the subscription services assigned to the subscriber needs to be deactivated. There exist the following 2 scenarios when the subscriber gets ported out. > During renewal or bulk activation, subscription engine is performing port out validation. > Real time trigger provided by MNP system when the subscriber gets ported out. Scenario I [pic] When the renewal request is initiated by subscription engine or when the subscription requests are being handled as a part of bulk activation, subscription engine will perform the following steps: Renewal Request/Retry Bucket: Subscription engine will fetch the profile from UUP and will perform the subscription specific validations based on the subscriber profile. During this activity if subscription engine finds that the subscriber has been ported out than SE will generate the EDR for that particular request and subsequently SE will write the corresponding response logs in the file. At the same time subscription engine will remove the entry from UUP for that particular subscription of subscriber. Bulk Activation: Subscription engine will fetch one by one record for processing and will initially do the request syntax validation including application specific parameter validations. Subsequently subscription engine will fetch the profile from UUP and will perform the subscription specific validations based on the subscriber profile. During this activity if subscription engine finds that the subscriber has been ported out than SE will generate the EDR for that particular request and subsequently SE will write the corresponding response logs in the file. At the same time subscription engine will remove the entry from UUP for that particular subscription of subscriber. Scenario II [pic] . When a subscriber is ported out from the network, the respective application / system sends a request to the subscription Engine. . Subscription Engine fetches the list of subscription services pertinent to the subscriber . Subscription Engine initiates the deactivation of the subscription service request by the subscriber . Subscription Engine validates the following :- o Subscription deactivation request and syntax validation. . Subscription Engine sends a deprovisioning request to the application . Subscription Engine updates the deactivation status of the subscriber in the SE database . Write audit logs in the form of CDR . Send SMS notification to the user with the subscription deactivation message. . Remove the all subscription services against the subscriber from SDP UUP component. Subscription Engine Use Cases for Postpaid 1 Subscription service via the discovery channels Subscriber can request for the subscription service via different discovery channels. Viz. SMS, MMS, IVR, WAP, USSD, WEB, SD/Customer Care /Sanchaya (Out Dialler Call Centre) Interface, Retail (VTOP Up's), black berry, app store, STK & DSTK etc. The request is forwarded to the Subscription engine which has a request intercepting layer which will intercept the multi lingual request from multiple bearers and transforms the request in to the unified format accepted by subscription engine. 1 Subscription Activation through SMS [pic] . Subscriber request for text based subscription purchase request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6,it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends subscription service provisioning to the application. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Provisioning in BSCS iX [pic] . Subscription Engine identifies the circle of the subscriber and forwards the provisioning request to the BSCs iX via the EAI Layer. . BSCS iX tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS iX,it will impose the charging for the service as per the service rating definition. Failure Scenarios :- Diagram 1 [pic] Diagram 2 [pic] Diagram 3 Provisioning Failure in BSCS iX [pic] Diagram 4 [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber found on IN. . In such a case, Subscription Engine will treat the subscriber as pre- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine imposes the prepaid flow. Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN. . In such a case, Subscription Engine will treat the subscriber as post- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine pushes the request in to IVSM DB for rating and charging by inserting the request in to IVSM master table. Failure Scenario - BSCS 6 provisioning Failure scenario . Subscription Engine initiates provisioning request towards BSCS 6 via IVSM and provisioning fails. . Subscription Engine will retry provisioning for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than SE will generate the failure CDR. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - BSCS iX provisioning Failure scenario . Subscription Engine initiates provisioning request towards BSCS iX via EAI and provisioning fails. . Subscription Engine will retry provisioning for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than SE will generate the failure CDR. . BSCS iX will deprovision the subscription service for the subscriber. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition in real time. . If the provisioning to application still not successful than SE will push it in to retry bucket which will be taken as offline activity Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. 2 Subscription Activation through USSD Diagram 1 [pic] . Subscriber request for text based subscription purchase request via USSD to Messaging gateway. . The Messaging gateway forwards the request to the USSD application using the Http protocol. . USSD Application forwards the Subscription request to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6,it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends subscription service provisioning to the application. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Provisioning in BSCS iX [pic] . Subscription Engine identifies the circle of the subscriber and forwards the provisioning request to the BSCs iX via the EAI Layer. . BSCS iX tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS iX,it will impose the charging for the service as per the service rating definition. Failure Scenarios :- Diagram 1 [pic] Diagram 2 [pic] Diagram 3 [pic] [pic] Diagram 4 [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber found on IN. . In such a case, Subscription Engine will treat the subscriber as pre- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine imposes the prepaid flow. Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN. . In such a case, Subscription Engine will treat the subscriber as post- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine pushes the request in to IVSM DB for rating and charging by inserting the request in to IVSM master table. Failure Scenario - BSCS 6 provisioning Failure scenario . Subscription Engine initiates provisioning request towards BSCS 6 via IVSM and provisioning fails. . Subscription Engine will retry charging for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than SE will generate the failure CDR. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - BSCS iX provisioning Failure scenario . Subscription Engine initiates charging request towards BSCS iX via EAI and provisioning fails. . Subscription Engine will retry charging for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than SE will generate the failure CDR. . BSCS iX will deprovision the subscription service for the subscriber. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition in real time. . If the provisioning to application still not successful than SE will push it in to retry bucket which will be taken as offline activity Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. 3 Subscription Activation through WAP [pic] . Subscriber request for text based subscription purchase request via WAP Portal. . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6,it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends subscription service provisioning to the application. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Provisioning in BSCS iX [pic] . Subscription Engine identifies the circle of the subscriber and forwards the provisioning request to the BSCs iX via the EAI Layer. . BSCS iX tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS iX,it will impose the charging for the service as per the service rating definition. Failure Scenarios Diagram 1 [pic] Diagram 2 [pic] Diagram 3 [pic] [pic] Diagram 4 [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber found on IN. . In such a case, Subscription Engine will treat the subscriber as pre- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine imposes the prepaid flow. Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN. . In such a case, Subscription Engine will treat the subscriber as post- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine pushes the request in to IVSM DB for rating and charging by inserting the request in to IVSM master table. Failure Scenario - BSCS 6 provisioning Failure scenario . Subscription Engine initiates provisioning request towards BSCS 6 via IVSM and provisioning fails. . Subscription Engine will retry provisioning for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than SE will generate the failure CDR. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - BSCS iX provisioning Failure scenario . Subscription Engine initiates provisioning request towards BSCS iX via EAI and provisioning fails. . Subscription Engine will retry provisioning for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than SE will generate the failure CDR. . BSCS iX will deprovision the subscription service for the subscriber. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition in real time. . If the provisioning to application still not successful than SE will push it in to retry bucket which will be taken as offline activity. Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. 4 Subscription Activation through WEB [pic] . Subscriber request for text based subscription purchase request via WEB site to WEB gateway. . Subscriber request for text based subscription purchase request via WAP Portal. . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6,it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends subscription service provisioning to the application. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Provisioning in BSCS iX [pic] . Subscription Engine identifies the circle of the subscriber and forwards the provisioning request to the BSCs iX via the EAI Layer. . BSCS iX tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS iX,it will impose the charging for the service as per the service rating definition. Failure Scenarios Diagram1 [pic] Diagram 2 [pic]Diagram 3 [pic][pic] Diagram 4 [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber found on IN. . In such a case, Subscription Engine will treat the subscriber as pre- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine imposes the prepaid flow. Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN. . In such a case, Subscription Engine will treat the subscriber as post- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine pushes the request in to IVSM DB for rating and charging by inserting the request in to IVSM master table. Failure Scenario - BSCS 6 provisioning Failure scenario . Subscription Engine initiates provisioning request towards BSCS 6 via IVSM and provisioning fails. . Subscription Engine will retry provisioning for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than SE will generate the failure CDR. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - BSCS iX provisioning Failure scenario . Subscription Engine initiates provisioning request towards BSCS iX via EAI and provisioning fails. . Subscription Engine will retry provisioning for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than SE will generate the failure CDR. . BSCS iX will deprovision the subscription service for the subscriber. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition. . Subscription Engine will generate the CDR with appropriate status code (Eg -Provisioning failed). Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. 5 Subscription Activation through IVR Diagram 1 [pic] . Subscriber request for text based subscription purchase request via IVR to Subscription Engine. . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6,it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends subscription service provisioning to the application. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Provisioning in BSCS iX [pic] . Subscription Engine identifies the circle of the subscriber and forwards the provisioning request to the BSCs iX via the EAI Layer. . BSCS iX tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS iX, it will impose the charging for the service as per the service rating definition. Failure Scenario Diagram 1 [pic] Diagram 2 [pic] [pic] [pic] Diagram 4 [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber found on IN. . In such a case, Subscription Engine will treat the subscriber as pre- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine imposes the prepaid flow. Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN. . In such a case, Subscription Engine will treat the subscriber as post- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine pushes the request in to IVSM DB for rating and charging by inserting the request in to IVSM master table. Failure Scenario - BSCS 6 provisioning Failure scenario . Subscription Engine initiates provisioning request towards BSCS 6 via IVSM and provisioning fails. . Subscription Engine will retry provisioning for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than SE will generate the failure CDR. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - BSCS iX provisioning Failure scenario . Subscription Engine initiates provisioning request towards BSCS iX via EAI and provisioning fails. . Subscription Engine will retry provisioning for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than SE will generate the failure CDR. . BSCS iX will deprovision the subscription service for the subscriber. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition in real time. . If the provisioning to application still not successful than SE will push it in to retry bucket which will be taken as offline activity. Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. 6 Subscription Activation through CRM [pic] . Subscriber request for text based subscription purchase request via CRM to Subscription Engine. . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6,it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends subscription service provisioning to the application. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Provisioning in BSCS iX [pic] . Subscription Engine identifies the circle of the subscriber and forwards the provisioning request to the BSCs iX via the EAI Layer. . BSCS iX tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS iX, it will impose the charging for the service as per the service rating definition. Failure Scenarios Diagram 1 [pic] Diagram2 [pic] Diagram3 [pic] [pic] Diagram 4 [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber found on IN. . In such a case, Subscription Engine will treat the subscriber as pre- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine imposes the prepaid flow. Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN. . In such a case, Subscription Engine will treat the subscriber as post- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine pushes the request in to IVSM DB for rating and charging by inserting the request in to IVSM master table. Failure Scenario - BSCS 6 provisioning Failure scenario . Subscription Engine initiates provisioning request towards BSCS 6 via IVSM and provisioning fails. . Subscription Engine will retry provisioning for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than SE will generate the failure CDR. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - BSCS iX provisioning Failure scenario . Subscription Engine initiates provisioning request towards BSCS iX via EAI and provisioning fails. . Subscription Engine will retry provisioning for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than SE will generate the failure CDR. . BSCS iX will deprovision the subscription service for the subscriber. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition in real time. . If the provisioning to application still not successful than SE will push it in to retry bucket which will be taken as offline activity. Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. 7 Subscription Activation through OBD [pic] . The OBD places call to the subscriber regarding the various subscriptions available for the user. . Subscriber requests for subscription service purchase to the Out Bound dialer(OBD) . OBD sends the subscription request on behalf of the subscriber to Subscription Engine . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6,it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends subscription service provisioning to the application. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Provisioning in BSCS iX [pic] . Subscription Engine identifies the circle of the subscriber and forwards the provisioning request to the BSCs iX via the EAI Layer. . BSCS iX tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS iX, it will impose the charging for the service as per the service rating definition. Failure scenario Diagram1 [pic] Diagram2 [pic] Diagram 3:- [pic] [pic]Diagram 3:- [pic] Failure Scenario - Fetch subscriber profile fails and Subscriber found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber found on IN. . In such a case, Subscription Engine will treat the subscriber as pre- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine imposes the prepaid flow. Failure Scenario - Fetch subscriber profile fails and Subscriber not found on IN . In case, Subscription Engine fails to fetch subscriber's profile from UUP, Subscription Engine will initiate the charging request towards IN via UCS which in turn returns subscriber not found on IN. . In such a case, Subscription Engine will treat the subscriber as post- paid . Subscription Engine would send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery. . Subscription engine pushes the request in to IVSM DB for rating and charging by inserting the request in to IVSM master table. Failure Scenario - BSCS 6 provisioning Failure scenario . Subscription Engine initiates provisioning request towards BSCS 6 via IVSM and provisioning fails. . Subscription Engine will retry provisioning for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than SE will generate the failure CDR. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - BSCS iX provisioning Failure scenario . Subscription Engine initiates charging request towards BSCS iX via EAI and provisioning fails. . Subscription Engine will retry charging for configured number of retries defined as a part of service definition . If the charging fails even after configured number of retries than SE will generate the failure CDR. . BSCS iX will deprovision the subscription service for the subscriber. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Failure Scenario - Subscription provisioning request to application failure scenario . After successful charging, Subscription Engine will send the subscription provisioning request either to internal (CMS) or to external applications responsible for content delivery which in turn fails. . Subscription Engine will retry subscription provisioning to application for configured number of retries defined as a part of service definition in real time. . If the provisioning to application still not successful than SE will push it in to retry bucket which will be taken as offline activity. Failure Scenario -Subscription provisioning in internal database failure scenario . After successful subscription provisioning in application responsible for content delivery, Subscription Engine will update its own database for the requested subscription to the subscriber which in turn fails. . Subscription Engine will write the same into temporary file which would be consumed to insert into the subscription engine database. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. Failure Scenario - Update subscriber profile with subscription in UUP failure scenario . Subscription Engine updates the subscription service provisioning request to UUP component to assign the subscription service to the subscriber which in turn fails. . SE will write the purchased subscription details of the subscriber in to the file which will be updated later in UUP offline. . SE will generate the relevant CDR with appropriate status code (Database down). . Subsequently Subscription Engine will send the successful subscription purchase notification to the subscriber. 8 Subscription Activation through Sanchaya [pic] . Sanchaya places call to the subscriber regarding the various subscriptions available for the user. . Subscriber requests for subscription service purchase to the sanchaya. . Sanchaya writes the response in to a file and sends the file to the SD team. . SD team uploads the file through UI for Bulk provisioning. . GUI sends the FTP file to the FTP location . The Scheduler fetches the FTP file from the FTP location. . Scheduler fetches one record at a time from the FTP file and forwards it to the Subscription engine. . Subscription request would be forwarded to Subscription Engine. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not. In case, the subscriber has already subscribed to the service it sends an ""Already subscribed"" notification. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6,it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends subscription service provisioning to the application. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Provisioning in BSCS iX [pic] . Subscription Engine identifies the circle of the subscriber and forwards the provisioning request to the BSCs iX via the EAI Layer. . BSCS iX tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS iX, it will impose the charging for the service as per the service rating definition. 2 Renewal of Subscription Service Subscription Engine would facilitate the Renewal based on the various parameters like count, duration and volume. Subscription Engine would set an auto trigger within its internal system. The system would raise an internal trigger once the period for Service Subscription is reaching its end. Pre-Renewal message can be configurable and also the number of days it needs to be sent prior to also needs to be configurable. 1 Subscription renewal based on validity Each subscription service for subscriber has a validity period. The system would raise an internal trigger for renewal of the service, once the period for Service Subscription is reaching its end. But SE will update its own database for any renewal but it will not initiate any charging request. The charging on renewal will be taken care by postpaid billing system. [pic] . Subscription Engine fetches the records for renewal based on validity. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subsequently subscription engine sends subscription service provisioning to the application. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status with renewal date in SDP UUP component for the subscription service of subscriber. Note: In postpaid, post transformation scenario, BSCS iX will initiate the rating and charging in case of renewals. 3 Opt-in Deactivation of Subscription The subscribers can explicitly requests (opts) for the deactivation of the subscription service, wherein the Subscription engine deactivates the subscription service for the subscriber. [pic] . Subscriber sends the subscription service deactivation request via SMS on a short code and keyword to Messaging gateway which in turn will forward the request to subscription engine. . Subscription Engine would do the follow validations:- o Deactivation request syntax is valid or not o Subscriber is already subscribed to the requested service or not o Subscription Engine would send an acknowledgement to the subscriber. . SE will push the deprovisioning request to IVSM which in turn will de- provision the subscription service against the subscriber in BSCS 6 via ISMS. . Once it is successfully de-provisioned in BSCS 6 Subscription Engine sends the subscription service deprovisioning request to the application for subscriber. . Subscription Engine will update the deactivation status of the subscription service for the subscriber in its database. . Subscription Engine generates a CDR for this process. . SE will remove the entry of subscription service of that subscriber from UUP. . Subscription engine will send the successful deactivation of subscription notification to the subscriber 4 Try and Buy Pack Some subscription services are available in try and buy pack. Initially this pack is available for free to the subscriber. At the end of Try and buy trial pack, the subscriber engine apply rate for the subscription service. [pic] . Subscriber request for subscription purchase via SMS to Messaging gateway. . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription o Service has been offered. o Whether the subscriber is black listed. o Check the status (viz. Active, Suspend, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine will send the request acknowledgement to the subscriber. . Subscription engine will send the provisioning request to the application . Subscription Engine updates the try and buy pack in the SE database . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the try and buy subscription pack in SDP UUP component Charge user on end of try and buy pack . At the end of Try and buy trial pack , the subscriber engine will push the request to IVSM for rating and charging which in turn will provision the subscription service for the subscriber in BSCS 6 through ISMS. . On successful charging, the subscription engine sends subscription service provisioning to the application. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . The application delivers the content to the subscriber successfully. 5 Provisioning of Subscription Services Based on type of services, the subscription service needs to be provisioned in the following elements 1. Application responsible for delivering the content and / or 2. Network elements, e.g. GPRS, Blackberry, MCA has to be registered in HLR and additionally blackberry service also has to be provisioned on RIM server. 1 RBT Provisioning The ring back tone (RBT) service needs to be provisioned in the HLR. The subscription engine sends the request for RBT service provisioning to IVSM. IVSM forwards the request to BSCS 6 via ISMS where the request is provisioned and the subscription service is tagged to the subscriber. BSCS 6 forwards the RBT provisioning request to HLR via the Comptel IL7 interface. Diagram 1 [pic] . Subscriber request for RBT subscription purchase request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid in the RBT application. o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o HLR provisioning information . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status (viz. Active, Suspend, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . RBT subscription request need to be provisioned (registered) in the HLR. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6,it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends subscription service provisioning to the application. . BSCS 6 forwards the RBT provisioning request to HLR via the Comptel IL7 interface. . Subscription engine will poll the response from IVSM history table pertinent to charging and provisioning. . On successful charging, the subscription engine sends subscription service provisioning to the application. If subscription service provisioning fails, do a credit back of money, if supported. Else mark the record for manual reconciliation. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Subscription engine is updated with the RBT subscription service status for the subscriber. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Provisioning in BSCS iX [pic] . Subscription Engine identifies the circle of the subscriber and forwards the provisioning request to the BSCs iX via the EAI Layer. . BSCS iX tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS iX, it will impose the charging for the service as per the service rating definition. . BSCS iX forwards the RBT provisioning request to HLR via the Comptel IL7 interface. . EAI layer sends the RBT provisioning response to the Subscription engine. Failure scenarios:- [pic] [pic] [pic] Scenario 1:-Subscription provisioning fails in the RBT application :- . Subscription Engine sends the request for provisioning to RBT applications and it fails. . Subscription Engine will retry provisioning request to application for configured number of retries defined as a part of service definition. . If the configured number of retrial fails, Subscription Engine will push the provisioning request in to the RBT application's retry queue Scenario 2:- HLR provisioning Failure scenario . Subscription Engine initiates provisioning request towards HLR via EAI and provisioning fails. . Subscription Engine will retry provisioning for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than HLR sends an unsuccessful provisioning response to BSCS iX via comptel . BSCS iX will deprovision the subscription service for the subscriber. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Scenario 3:-UUP doesn't have HLR provisioning information :- Subscription engine will fetch the provisioning related information required to invoke the Comptel IL7 interface from either of following 2 systems - NSMS - UUP The UUP has the HLR provisioning information. If in case UUP doesn't have the HLR provisioning information, EAI layer forwards the request to the NSMS. . The Subscription engine sends request to the EAI layer to fetch the provisioning information. . The EAI layer forwards the request to the UUP. . If UUP doesn't have the HLR provisioning information, EAI layer forwards the request to the NSMS. . The provisioning information is send to Subscription Engine from NSMS via the EAI layer. 2 Pre-Tone Provisioning The pre-tone service needs to be provisioned in the HLR. The subscription engine sends the request for pre-tone service provisioning to IVSM. IVSM forwards the request to BSCS 6 via ISMS where the request is provisioned and the subscription service is tagged to the subscriber. BSCS 6 forwards the RBT provisioning request to HLR via the Comptel IL7 interface. [pic] . Subscriber request for pre-tone subscription purchase request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid in the pre- tone application. o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o HLR provisioning information . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status (viz. Active, Suspend, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Pre-tone subscription request need to be provisioned (registered) in the HLR. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6, it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends subscription service provisioning to the application. . BSCS 6 forwards the pre-tone provisioning request to HLR via the Comptel IL7 interface. . Subscription engine polls the response from IVSM history table . On successful charging, the subscription engine sends subscription service provisioning to the application. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Subscription engine is updated with the pre-tone subscription service status for the subscriber. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Provisioning in BSCS iX [pic] . Subscription Engine identifies the circle of the subscriber and forwards the provisioning request to the BSCS iX via EAI Layer. . BSCS iX tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS iX, it will impose the charging for the service as per the service rating definition. . BSCS iX forwards the pre-tone provisioning request to HLR via the Comptel IL7 interface. . EAI layer sends the pre-tone provisioning response to the Subscription engine. Failure Scenarios Scenario 1:-Subscription provisioning fails in the Pre-tone application :- . Subscription Engine sends the request for provisioning to Pre-tone applications and it fails. . Subscription Engine will retry provisioning request to application for configured number of retries defined as a part of service definition. . If the configured number of retrial fails, Subscription Engine will push the provisioning request in to the pre-tone application's retry queue [pic] [pic] Scenario 2:- HLR provisioning Failure scenario . Subscription Engine initiates provisioning request towards HLR via EAI and provisioning fails. . Subscription Engine will retry provisioning for configured number of retries defined as a part of service definition . If the provisioning fails even after configured number of retries than HLR sends an unsuccessful provisioning response to BSCS iX via Comptel . BSCS iX will de-provision the subscription service for the subscriber. . Subscription Engine will send the unsuccessful subscription purchase notification to the subscriber. Scenario 3:-UUP doesn't have HLR provisioning information :- Subscription engine will fetch the provisioning related information required to invoke the Comptel IL7 interface from either of following 2 systems - NSMS - UUP The UUP has the HLR provisioning information. If in case UUP doesn't have the HLR provisioning information, EAI layer forwards the request to the NSMS. . The Subscription engine sends request to the EAI layer to fetch the provisioning information. . The EAI layer forwards the request to the UUP. . If UUP doesn't have the HLR provisioning information, EAI layer forwards the request to the NSMS. . The provisioning information is send to Subscription Engine from NSMS via the EAI layer. 3 GPRS Provisioning When a subscriber requests for the GPRS subscription service, the subscriber has to be provisioned in the UCS evolve for GPRS service and also in HLR. [pic] . Subscriber request for GPRS subscription purchase request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid in the pre- tone application. o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status (viz. Active, Suspend, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6, it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends GPRS subscription service provisioning to the UCSe. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Subscription engine is updated with the GPRS subscription service status for the subscriber. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Provisioning in BSCS iX [pic] . Subscription Engine identifies the circle of the subscriber and forwards the provisioning request to the BSCS iX via EAI Layer. . BSCS iX tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS iX, it will impose the charging for the service as per the service rating definition. Failure Scenarios Scenario 1:-Subscription provisioning fails in the UCSe :- . Subscription Engine sends the request for provisioning to UCSe and it fails. . Subscription Engine will retry provisioning request to application for configured number of retries defined as a part of service definition. . If the configured number of retrial fails, Subscription Engine will push the provisioning request in to the pre-tone application's retry queue [pic] Scenario 2:-UUP doesn't have HLR provisioning information :- Subscription engine will fetch the provisioning related information required to invoke the Comptel IL7 interface from either of following 2 systems - NSMS - UUP The UUP has the HLR provisioning information. If in case UUP doesn't have the HLR provisioning information, EAI layer forwards the request to the NSMS. . The Subscription engine sends request to the EAI layer to fetch the provisioning information. . The EAI layer forwards the request to the UUP. . If UUP doesn't have the HLR provisioning information, EAI layer forwards the request to the NSMS. . The provisioning information is send to Subscription Engine from NSMS via the EAI layer. 4 Blackberry Provisioning When a subscriber requests for the subscription service from blackberry, the subscription service has to be provisioned in the HLR and RIM server. [pic] . Subscriber request for blackberry subscription purchase request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid in the blackberry application. o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o HLR provisioning information . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status (viz. Active, Suspend, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Blackberry subscription request need to be provisioned (registered) in the HLR and also on RIM server. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6, it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends subscription service provisioning to the application. . BSCS 6 forwards the blackberry provisioning request to HLR and to RIM server via the Comptel IL7 interface. . IVSM will poll the provisioning response from IVSM history table. . Subscription engine is updated with the pre-tone subscription service status for the subscriber. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. Provisioning in BSCS iX [pic] . Subscription Engine identifies the circle of the subscriber and forwards the provisioning request to the BSCS iX via EAI Layer. . BSCS iX tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS iX, it will impose the charging for the service as per the service rating definition. . BSCS iX forwards the blackberry provisioning request to HLR and RIM server via the Comptel IL7 interface. . EAI layer sends the blackberry provisioning response to the Subscription engine. Failure Scenario Subscription provisioning fails in the RIM server :- . Subscription Engine sends the request for provisioning to RIM server and it fails. . Subscription Engine will retry provisioning request to RIM for configured number of retries defined as a part of service definition. . If the configured number of retrial fails, Subscription Engine will push the provisioning request in to the RIM provisioning retry queue 6 Subscription Services for GPRS When a subscriber requests for a GPRS subscription, the subscription needs to be provisioned in the UCS evolve. The various GPRS subscription service available for the subscriber is as follows:- 1. GPRS Plan change 2. GPRS Daily pack GPRS Plan Change:- When the subscriber sends a request for the GPRS plan change . the SE validates if the subscriber had send the same plan change request earlier in the same day(repeated request).If the subscriber's GPRS plan is already changed on same day than SE will reject the subscription request. GPRS Daily pack :- These subscription services are available on daily basis. When the subscriber request for the pack , the SE need not check , if the subscriber has already send the same request in that day.SE sends the GPRS provisioning to the UCS evolve. 1 GPRS Plan Change When the subscriber sends a request for the GPRS plan change, the SE validates if the subscriber had send the same plan change request earlier in the same day(repeated request).If the subscriber's GPRS plan is already changed on same day than SE will reject the subscription request. [pic] . Subscriber request for the GPRS plan change service via SMS to the Message gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid in UCSe(UCS evolved) o Subscriber is already subscribed to the requested service or not . The subscription engine validates if the request received is for GPRS plan change. . If the request received is for GPRS plan change , the SE validates if the subscriber had send the same plan change request earlier in the same day(repeated request).If the subscriber's GPRS plan is already changed on same day than SE will reject the subscription request. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6, it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends GPRS subscription service provisioning to the UCSe. . Update the its own DB with the status as success for GPRS plan change . Generates audit logs in the form of CDR for charging transaction and EDR for event based processing. . Subscription Engine will send the successful GPRS plan change subscription purchase notification to the subscriber . Update the GPRS subscription plan status in SDP UUP component to assign the subscription service to the subscriber. Failure scenario - GPRS provisioning fails in UCS evolve :- . The subscription engine sends the GPRS provisioning request to the UCS evolve and it fails. . Subscription Engine will retry GPRS subscription provisioning to UCSe for configured number of retries defined as a part of service definition. . If the configured number of retrial fails, Subscription Engine will push the GPRS subscription request in to the UCS evolve retry queue. 2 GPRS Daily Pack These subscription services are available on daily basis. When the subscriber request for the pack, the SE need not check, if the subscriber has already send the same request in that day. SE sends the GPRS provisioning to the UCS evolve. [pic] . Subscriber request for the GPRS daily pack service via SMS to the Message gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid in UCSe(UCS evolved) o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6, it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends GPRS subscription service provisioning to the UCSe. . Update the its own DB with the status as successful purchase for GPRS daily pack . Generates audit logs in the form of CDR for charging transaction and EDR for event based processing. . Subscription Engine will send the successful GPRS daily pack subscription purchase notification to the subscriber . Updates the GPRS subscription plan status in SDP UUP component to assign the subscription service to the subscriber. Usage consumption Scenario . When the subscriber GPRS usage gets exhausted, UCS evolve will migrate the subscriber to GPRS default plan. . The UCS evolve sends notification for usage consumption to the subscription engine along with successful GPRS default plan provisioning. . The default GPRS plan is updated in the Subscription Engine. . Updates the GPRS subscription service in SDP UUP component to assign the subscription service to the subscriber. 7 Subscription Plan for Blackberry When a subscriber requests for a subscription service from his blackberry phone, the subscription needs to be provisioned in the HLR as well as in the RIM server. The various subscription service requests available for the subscriber are as follows:- 1. Blackberry Plan change 2. Blackberry service change There are many subscription services available for a blackberry user and each service has many plan options. So a blackberry user can opt for the following 1. Change the subscription service. 2. Change the plan for a given service. Example:- Service A has 2 plans :- 1. Plan 1A - Price Rs 100 valid for 30 days. 2. Plan 2A -Price Rs 50 for 15 days. Service B has 2 plans :- 1. Plan 1B - Price Rs 200 valid for 30 days' 2. Plan 2B - Price Rs 100 valid for 15 days The subscriber is given the opportunity:- 1. change the service from Service A to service B (Blackberry service change) 2. change from plan , Plan 1A to Plan 1B.( Blackberry Plan change) 1 Blackberry Plan Change [pic] . Subscriber request for the Blackberry plan change for a selected subscription service via SMS to the Message gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not . The subscription engine validates if the request received is for Blackberry plan change for a selected subscription service. . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category (viz. Gold, silver, youth, etc) for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB (viz. Mobility, data card, PCO, etc) of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6, it will impose the charging for the service as per the service rating definition. . Update the its own DB with the status as success for blackberry plan change . Generates audit logs in the form of CDR for charging transaction and EDR for event based processing. . Subscription Engine will send the successful Blackberry plan change subscription notification to the subscriber . Updates the Blackberry subscription plan status in SDP UUP component to assign the subscription service to the subscriber. 2 Blackberry Service Change [pic] . Subscriber request from a blackberry phone for subscription service change request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out o HLR Id o HLR provisioning information . Subscription Engine would fetch the subscription definition which includes rating information for requested service. . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status (viz. Active, Suspend, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6, it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends subscription service provisioning to the application. . BSCS 6 forwards the blackberry service change provisioning request to HLR as well as RIM server via the Comptel IL7 interface. . Subscription engine polls the response from IVSM history table . Subscription engine is updated with the blackberry subscription service successful status for the subscriber. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the blackberry subscription service status in SDP UUP component to assign the subscription service to the subscriber. 8 Subscriber's life cycle management 1 Subscriber's Status - Active [pic] . Subscriber request for text based subscription purchase request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status (viz. Active, Suspend, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine checks the subscriber's status in the UUP. If the status is active, it would continue with the process of rating & charging. . Subscription Engine would send the request acknowledgement to the subscriber. . Subscription engine pushes the request in to IVSM DB for provisioning by inserting the request in to IVSM master table. . IVSM forwards the request for provisioning to BSCS 6 via the ISMS. . BSCS 6 tags the requested subscription service to the subscriber and notifies the subscription engine with a successful message. . On successful provisioning in BSCS 6, it will impose the charging for the service as per the service rating definition. . On successful provisioning in BSCS 6, the subscription engine sends service provisioning request to the application. . Do callback, if configured, with MSISDN, action, status, amount charged, next charging date. . Write audit logs in the form of CDR for charging transaction and EDR for event based processing. . Send SMS notification to the user with the configured message. . Updates the subscription service status in SDP UUP component to assign the subscription service to the subscriber. 2 Subscriber's Status - Suspend [pic] . Subscriber request for text based subscription purchase request via SMS to Messaging gateway. . Subscription request would be forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out . Subscription Engine would fetch the subscription definition which includes rating information for requested service . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status (viz. Active, Suspend, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine checks the subscriber's status in the UUP. If the status is suspend than the subsequent action has to be taken. . Subscription engine will push the request in to retry bucket where in subscription engine will try to process the request once in a day for configurable number of days . If the retry is successful than subscription engine will process the request further for rating and charging. . If the retry is unsuccessful with in configured number of days than SE will send the acknowledgement back to the subscriber with an appropriate message for not processing the request. NOTE: UUP will identify the subscriber whose status gets changed from Active to Suspend and will tag the same in separate table. Script will be executed once in a day to poll the tagged status changed from UUP. This in turn will invoke the API exposed by the subscription engine which in turn will take the appropriate action. In case of blackberry, if the subscriber is in Suspend state, then 2 scenarios exist. 1) For existing blackberry subscribers, subscription engine will initiate the blackberry service suspension request for the subscriber towards HLR and RIM server. 2) For the fresh blackberry activation request from the subscriber, subscription engine will deny the request to the subscriber. 3 Subscriber's Status - Inactive A subscriber's status can be inactive under the following scenario:- 1. Subscriber has ported out / deactivated:-The subscriber has requested for the service and due to some reason the request is stored in the retry queue/ bucket. In the mean time, the subscriber has ported out / deactivated. So when the request is retrieved from the retry bucket, the status of the subscriber is already inactive. 2. The request is stored in the bulk. [pic] . Subscriber request for the service is stored in the retry queue/ bucket. The request is retrieved and forwarded to Subscription Engine . Subscription Engine would do the follow validations o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status (viz. Active, Suspend, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine checks the subscriber's status from UUP. If the status is inactive, Subscription Engine generates an EDR for event based processing. . Subscription Engine logs the response in a file. Scenario 2:- Bulk request . Subscriber request for the service is stored in the bulk. The request is retrieved from the queue i.e. fetch one record at a time and forwarded to Subscription Engine . Subscription Engine would do the follow validations o Requested Service is valid or not o Application specific parameters or service tokens are valid o Subscriber is already subscribed to the requested service or not . Subscription Engine would fetch the subscriber's profile from SDP UUP. o Subscriber type o Circle o Status o Subscriber segment o Ported In / Out . Subscription Engine will do the following subscription specific validations based on subscriber profile like o Whether the subscriber is ported out subscriber. o Whether the subscriber belongs to prepaid or post paid. o Whether the subscriber is eligible or belongs to the category for which this subscription service has been offered. o Whether the subscriber is black listed. o Check the status (viz. Active, Suspend, Inactive) of subscriber. o Whether the requested subscription service exist for that subscriber's circle or not. o Whether the requested subscription services need to be offered to the particular LOB of the subscriber's or not. o Whether the requested subscription service have been discovered via valid channel or not. . Subscription Engine checks the subscriber's status from UUP. If the status is inactive, subscription Engine generates an EDR for event based processing. . Subscription Engine logs the response in a file. Integration The Subscription Engine performs the following integrations to carry out some of the major tasks 1 UUP Integration This is performed by Subscription Engine to find out different parameters of a Subscriber Profile e.g. to find out if a subscriber is post-paid or pre-paid, to which circle the subscriber belongs, subscriber segment and category etc. These parameters may be used to determine appropriated charging and provisioning interfaces to be used for a particular service for a subscriber. Also, the subscription Engine will update UUP with subscribers' subscription profile. Subscription engine will be integrated with UUP using JDBC connectivity along with thin driver which provides efficient performance. 1 Fetch subscriber profile Subscription fetches the following information from UUP during the fulfillment of subscription request. [pic] In scenario, when UUP is down or unable to connect to UUP or subscriber profile not found in UUP, subscription engine will hit the IN via UCS to fetch the balance and if the UCS returns subscriber not found error than the subscriber is treated as postpaid else the subscriber will be treated as prepaid. 2 Update subscription Profile Subscription engine will insert and update the following attributes as a subscriber's subscription profile in UUP for following scenarios. > Activation > Renewal > Grace > Suspension Note: In subscription deactivation scenario, record will be deleted from UUP containing subscription for a subscriber. [pic] Based on the type of subscription request, following parameters will be updated as a part of subscriber's subscription profile in UUP. 1 Case I: Subscription Activation During subscription activation, record will be inserted in to UUP SERVICE_ITEM TABLE populating following attributes MSISDN_NUMBER SERVICE_ID SERVICE_NAME ACTIVATION_DATE SERVICE_ITEM_STATUS SOURCE_SYSTEM LAST_MODIFIED_DATE (internally updated by UUP DB) 2 Case II: Subscription Renewal During subscription renewal, record will be updated in to UUP SERVICE_ITEM TABLE with following attributes LAST_RENEWAL_DATE LAST_MODIFIED_DATE (internally updated by UUP DB) 3 Case III: Subscription Grace When the subscriber's subscription status gets changed from active to grace, record will be updated in to UUP SERVICE_ITEM TABLE with following attributes SERVICE_ITEM_STATUS STATUS_CHANGE_DATE LAST_MODIFIED_DATE (internally updated by UUP DB) 4 Case IV: Subscription Suspension When the subscriber's subscription status gets changed from grace to suspension, record will be updated in to UUP SERVICE_ITEM TABLE with following attributes SERVICE_ITEM_STATUS STATUS_CHANGE_DATE LAST_MODIFIED_DATE (internally updated by UUP DB) 2 UCS Integration Subscription engine will integrate with UCS in real time for prepaid using HTTPS protocol exposed by UCS. This will enable subscription engine to check pre-paid subscriber balance amount and also to charge /refund /block the amount of a subscriber. The balance check is mandatory check for all subscriptions as after this all low and negative balance handling related charging features can be applied. The following are the set of charging parameters which needs to be sent to the UCS by subscription engine during URL invocation. |S# |Parameter |Data |Max |Description |Get Balance| | | |Type |Length| |Mandatory | | | | | | |Parameters | |1 |MSISDN or other |CHAR |16 |Mobile Number |Y | | |identifier | | | | | |2 |Circle ID |CHAR |2 |Circle ID |Y | |3 |CP ID |CHAR |2 |CP ID | | |4 |Platform |CHAR |1 |Platform | | |5 |Charging Frequency |CHAR |1 |Charging | | | | | | |Frequency | | |6 |Discovery Bearer |CHAR |1 |Discovery | | | | | | |Bearer | | |7 |On-Net/Off-Net |CHAR |1 |On-Net/Off-Net| | |8 |Sub-Category/ |CHAR |12 |Sub-Category/ | | | |Parameter | | |Parameter | | |9 |Discovery Portal |CHAR |4 |Discovery | | | | | | |Portal | | |10 |Delivery Bearer |CHAR |4 |Delivery | | | | | | |Bearer | | |11 |IN Bucket |CHAR |3 |IN Bucket | | | |Identifier | | |Identifier | | |12 |Postpaid Charging |CHAR |30 |Used for | | | |Parameters | | |Postpaid | | | | | | |Charging | | |13 |Content Type |CHAR |4 |Content Type | | |14 |Content ID |CHAR |30 |Unique | | | | | | |Identity | | | | | | |Number in CP/ | | | | | | |CMS Library | | |15 |Content Description|CHAR |30 |Content | | | | | | |Description | | |16 |Copyright IDs |CHAR |10 |Copyright ID | | |17 |Billing Call Type |CHAR |1 |Balance Check,|Y | | |Parameter | | |Charge Against| | | | | | |Balance Check,| | | | | | |Direct Charge,| | | | | | |Balance | | | | | | |Refund. | | |18 |EUP |CHAR |10 |Base End-User | | | | | | |Charge To Be | | | | | | |Attempted | | |19 |Service Type |CHAR |3 |Event Download| | | |Identifier Flag | | |(0), First | | | | | | |Time | | | | | | |Subscription | | | | | | |(1), | | | | | | |Re-subscriptio| | | | | | |n (2), | | | | | | |Browsing (3), | | | | | | |Streaming (4).| | | | | | |Other | | | | | | |combinations | | | | | | |for Gifting, | | | | | | |Recommendation| | | | | | |etc. | | |20 |Transaction ID |CHAR |100 |Transaction ID|Y | |21 | SMS Shortcode |CHAR |9 |Shortcode for | | | | | | |MO / MT | | | | | | |request | | |22 | SMS Keyword |CHAR |20 |Keyword sent | | | | | | |in MO / MT | | | | | | |request | | |23 |Discount percentage|CHAR |10 |Discount | | | | | | |applied on | | | | | | |base price | | |24 |Roaming Identifier |CHAR |25 |Roaming | | | | | | |identifier | | | | | | |passed by WAP | | | | | | |Gateway | | |25 |Tariff class |CHAR |20 |Tariff Class | | | | | | |whereever | | | | | | |applicable | | |26 |Adjustment Code |CHAR |24 |Variable field| | | | | | |populated by | | | | | | |SDP nodes. | | |27 |Additional |CHAR |20 |Any additional| | | |Parameter 1 | | |parameters | | | | | | |that may be | | | | | | |required to be| | | | | | |passed in | | | | | | |future | | |28 |Additional |CHAR |20 |Any additional| | | |Parameter 2 | | |parameters | | | | | | |that may be | | | | | | |required to be| | | | | | |passed in | | | | | | |future | | |29 |Additional |CHAR |20 |Any additional| | | |Parameter 3 | | |parameters | | | | | | |that may be | | | | | | |required to be| | | | | | |passed in | | | | | | |future | | |30 |Additional |CHAR |20 |Any additional| | | |Parameter 4 | | |parameters | | | | | | |that may be | | | | | | |required to be| | | | | | |passed in | | | | | | |future | | |31 |Additional |CHAR |20 |Any additional| | | |Parameter 5 | | |parameters | | | | | | |that may be | | | | | | |required to be| | | | | | |passed in | | | | | | |future | | |32 |Additional |CHAR |20 |Any additional| | | |Parameter 6 | | |parameters | | | | | | |that may be | | | | | | |required to be| | | | | | |passed in | | | | | | |future | | |33 |Additional |CHAR |20 |Any additional| | | |Parameter 7 | | |parameters | | | | | | |that may be | | | | | | |required to be| | | | | | |passed in | | | | | | |future | | |34 |Additional |CHAR |20 |Any additional| | | |Parameter 8 | | |parameters | | | | | | |that may be | | | | | | |required to be| | | | | | |passed in | | | | | | |future | | |35 |Additional |CHAR |20 |Any additional| | | |Parameter 9 | | |parameters | | | | | | |that may be | | | | | | |required to be| | | | | | |passed in | | | | | | |future | | |36 |Additional |CHAR |20 |Any additional| | | |Parameter 10 | | |parameters | | | | | | |that may be | | | | | | |required to be| | | | | | |passed in | | | | | | |future | | The following are the illustrative set of response parameters from UCS for different operations. |Operations |Response Codes |Response Code Description | |Get Balance |EBH_Result_OK |Get Balance Successful | | |Request_Parameter_Missing |Request Parameter Missing | | | |(Will be decomposed based on| | | |number of parameters) | | |MSISDN_Not_Found |Subscriber not found | | |ERR_Operation_Failed |Get Balance request failed | | |ERR_Allocation_Failed |Unable to allocate the | | | |amount | | |Circle_ID_Not_Found | | | |CONN_Timeout | | | | | | |Debit |EBH_Result_OK |Get Balance Successful | | |Request_Parameter_Missing |Request Parameter Missing | | | |(Will be decomposed based on| | | |number of parameters) | | |MSISDN_Not_Found |Subscriber not found | | |ERR_Operation_Failed |Credit request failed | | |ERR_Allocation_Failed |Unable to allocate the | | | |amount | | |Circle_ID_Not_Found | | | |CONN_Timeout | | | |Tariff_Class_not_Found | | | |Tariff_Paln_Not_Found | | | |NOT_Enough_Funds | | | | | | |Credit |EBH_Result_OK |Get Balance Successful | | |Request_Parameter_Missing |Request Parameter Missing | | | |(Will be decomposed based on| | | |number of parameters) | | |MSISDN_Not_Found |Subscriber not found | | |ERR_Operation_Failed |Credit request failed | | |ERR_Allocation_Failed |Unable to allocate the | | | |amount | | |Circle_ID_Not_Found | | | |CONN_Timeout | | | | | | Based on the response codes mentioned above, SE will take the following actions. 1 Case I: Request parameter missing error In this scenario, subscription engine will not retry but will send the subscription request purchase failure notification to the end subscriber. 2 Case II: Operation failed In this scenario, subscription engine will not retry but will send the subscription request purchase failure notification to the end subscriber. 3 Case III: Connection Time out In this scenario, subscription engine log this request in to the file and will be reconciled manually with IN. If the subscriber has been charged, than subscription provisioning for subscriber will be done offline else that request will be pushed in retry bucket. 4 Case IV: Unable to connect to UCS In this scenario, subscription engine will try to charge for configured number of retries. Subsequently, even if charging fails, SE will push the request in to retry bucket. 5 Case V: Allocation Failed In this scenario, subscription engine will try to charge for configured number of retries. Subsequently, even if charging fails, SE will push the request in to retry bucket. 3 Integration with BSCS 6 and BSCS iX The subscription engine will integrate with BSCS 6 and iX to provision the subscription service for the subscriber. Subsequently BSCS 6 and iX will maintain do the rating and charging for monthly and advance rental. 1 BSCS 6 Integration Subscription engine will use IVSM as the provisioning channel for tagging the subscription request to the subscriber in BSCS 6. Subscription engine will push the request to IVSM using DB link which in turn will insert the request in to IVSM master table. IVSM fetch the request from the table one by one and process the request by doing certain validations and subsequently provisioning the subscriber in BSCS 6 via ISMS. Once the subscriber is provisioned, ISMS will insert the response in to IVSM history table which is specific to each service where in SE will pull the response from that table. The structure of the IVSM master table and IVSM history table is same as provided below. IVSM Master Table & IVSM History Table |Field Names | |TRXID | |APPSOURCE | |REQUESTCODE | |MOBILENO | |CIRCLEID | |REQUESTFLAG | |REQUESTDATE | |STATUS | |REJECTCODE | |PROCESSDATE | |LOADDATE | |CUSTCODE | |CO_ID | |BILLCYCLEDATE | |PROCESSID | |REJECTIONDESCRIPTION | 2 BSCS iX integration Subscription engine will use EAI layer as a provisioning layer to provision the subscription for subscriber in BSCS iX. Subscription engine will push the BO (Business Object) which is in the form of XML to EAI layer using XML over JMS which in turn will send the request to BSCS iX for provisioning using XML over JMS. 4 Messaging Gateway Integration Subscription engine will integrate with messaging gateway using SOAP over HTTPS interface exposed by the messaging gateway. This will enable subscription engine to receive subscription specific request (MO) discovered via SMS, USSD and STK channel, also subscription engine will be to send the notifications or content to the subscribers (MT). The subscription engine will receive the MO in the format as illustrated below. POST https://172.30.51.92:9001/ HTTP/1.1 Content-Type: text/xml; charset=ISO-8859-1 Connection: Keep-Alive Host: 172.30.51.92 Content-Length: 758 <?xml version=""1.0"" encoding=""ISO-8859-1""?> <message id=""routerSMSNode1@SVHJ0657:16134""><sms type=""mo""><retry count=""0"" max=""3""/><destination messageid=""110209160051""><address><number type=""abbreviated"">5196161</number></address></destination><source><address> <number type=""international"">919922001604</number></address></source><ud type=""text"">Inside</ud><pid>0A</pid><vp type=""absolute""><date><year>2011</year><month>2</month><day>10</day><hour>10 </hour><minute>33</minute><second>44</second><millisecond>148</millisecond>< /date></vp><scts><date><year>2011</year><month>2</month><day>9</day><hour>10 </hour><minute>30</minute><second>51</second><millisecond>0</millisecond></d ate></scts><param name=""unique_id"" value=""71211020916034423430""/></sms></message> The subscription engine will receive the MO in the format as illustrated below. POST / HTTP/1.1 Content-Type: text/xml Host: 172.30.196.126:55000 Content-Length: 721 Accept: */* Authorization: Basic c2V0ZXN0aWRlYTpzZXRlc3RpZGVh <?xml version=""1.0"" encoding=""UTF-8""?><message><sms type=""mt""><source><address><number type=""abbreviated"">519616</number></address></source><destination messageid=""01EC0308D3EB012D6741""><address><number type=""international"">919594945658</number></address></destination><dcs>0</dc s><ud type=""text"">Response ::20110201 11:00:01</ud><param name=""content_size"" value=""28""/><param name=""developer_content_id"" value=""buongiorno""/><param name=""content_type"" value=""text""/><param name=""content_sub_category"" value=""buongiorno""/><param name=""content_sub_sub_category"" value=""idea""/><param name=""media_type"" value=""sms""/><param name=""copyright_owner"" value=""buongiorno""/><param name=""delivery_channel"" value=""sms""/></sms></message> 5 CMS Integration Subscription Engine integrates with internal (CMS) and external VAS application for all VAS/application specific validations, provisioning, de- provisioning, suspension, content delivery (fetch & deliver scenario) etc. related actions. Subscription engine will send the following provisioning request pertinent to subscription using SOAP over HTTPS. Purchase subscription Cancel Subscription Renewal Subscription Note: The provisioning URL towards VAS applications and 3rd party CPs will vary from application to application and CP to CP. The following are the set of parameters which needs to be sent to CMS for purchase subscription |Sr. No.|Parameter Name |Type of Values | | | | | |1 |sec:password |Constant | |2 |sec:referencedUserID |Blank | |3 |sec:referencedUserName |Blank | |4 |sec:serviceId |Constant | |5 |sec:username |Constant | |6 |sec:userType |Constant | |7 |user:fieldname |Constant | |8 |user:userType |Constant | |9 |user:value |MSISDN of Subscriber | |10 |urn:subscriptionOfferId |Subscription Service ID | |11 |tran:creditPoints |Blank | |12 |tran:currency |Constant | |13 |tran:deliveryMethod |Constant | |14 |tran:discountPlanId |Blank | |15 |tran:discountSetId |Blank | |16 |tran:drmTechnology |Constant | |17 |tran:netPrice |Price Point | |18 |tran:notificationCampaign|Blank | | |Id | | |19 |tran:offerCampaignId |Blank | |20 |tran:pricePlanId |Price Point Identifier | |21 |tran:priceSetId |Subscription Service ID | |22 |tran:promotionCode |Blank | |23 |tran:purchaseChannel |Constant | |24 |tran:purchaseToken | | |25 |tran:recommendationId |Blank | |26 |tran:requestedPrice |Blank | |27 |tran:rightsId | | |28 |tran:screen |Constant | |29 |tran:subscriptionOfferId |Subscription Service ID | |30 |tran:vat |Constant | |31 |tran:origin |Blank | |32 |cat:entityType | | |33 |cat:value | | |34 |tran:parented | | |35 |tran:parentName | | |36 |tran:portal |Constant | |37 |tran:portalRoot |Constant | |38 |tran:portalSessionId |Blank | |39 |com:key |UID | |40 |com:value |Value of Global | | | |Transaction ID | |41 |urn:referenceTransactionI|Blank | | |d | | | | | | The following are the set of parameters which needs to be sent to CMS for cancel subscription |Sr. No.|Parameter Name |Type of Values | | | | | |1 |sec:password |Constant | |2 |sec:referencedUserID |Blank | |3 |sec:referencedUserName |Blank | |4 |sec:serviceId |Constant | |5 |sec:username |Constant | |6 |sec:userType |Constant | |7 |user:fieldname |Constant | |8 |user:userType |Constant | |9 |user:value |MSISDN of Subscriber | |10 |Urn:subscriptionOfferId |Subscription Service ID | |11 |Urn:portal |Blank | |12 |Urn:referenceTransactionId|Transaction ID | | | | | The following are the set of parameters which needs to be sent to CMS for renewal of subscription |Sr. No.|Parameter Name |Type of Values | | | | | |1 |sec:password |Constant | |2 |sec:referencedUserID |Blank | |3 |sec:referencedUserName |Blank | |4 |sec:serviceId |Constant | |5 |sec:username |Constant | |6 |sec:userType |Constant | |7 |user:fieldname |Constant | |8 |user:userType |Constant | |9 |user:value |MSISDN of Subscriber | |10 |urn:subscriptionOfferId |Subscription Service ID | |11 |urn:referenceTransactionId|Transaction ID | | | | | 6 EAI Layer Integration Subscription engine will integrate with EAI layer using XML/JMS in async manner for the following scenarios. > HLR provisioning > RIM provisioning for blackberry > Fetch provisioning information from NSMS viz. HLR ID, SIM ID & IMSI 1 HLR & RIM Provisioning Subscription engine will push the business object in the form of XML in to the queue exposed by the EAI layer as a service which in turn will forward the Comptel IL7 and IL7 will be responsible provisioning the service on HLR as well as on RIM server. The illustrative BO for the same is provided below. <soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/""> <soapenv:Header/> <soapenv:Body> <iauto:ComptelProvisionBO xmlns:iauto=""http://xml.in.ibm.com/schema/ComptelProvisionBORequest""> <iauto:messageHeader> <iauto:headerInfo> <iauto:REQUEST_TYPE>Async Request- Response</iauto:REQUEST_TYPE> <iauto:MOBILE_NUMBER>8975600123</iauto:MOBILE_NUMBER> <iauto:SERVICE_TYPE>Process Service</iauto:SERVICE_TYPE> <iauto:CIRCLE_ID>MH</iauto:CIRCLE_ID> <iauto:CHANNEL_TYPE>iauto</iauto:CHANNEL_TYPE> <iauto:TRACE_ID>1267526504968</iauto:TRACE_ID> <iauto:LOB>PrePaid</iauto:LOB> <iauto:OPERATION_NAME>Provision_Req_Comptel</iauto:OPERATION_NAME> </iauto:headerInfo> <iauto:errorInfo> <iauto:ERROR_CODE /> <iauto:ERROR_MESSAGE /> <iauto:SEVERITY /> </iauto:errorInfo> <iauto:operationStatusCode> <iauto:OPERATION_STATUS_CODE></iauto:OPERATION_STATUS_CODE> </iauto:operationStatusCode> <iauto:serviceSpecificInfo> <iauto:RETRY_COUNT>0</iauto:RETRY_COUNT> <iauto:RETRY_INTERVAL>10</iauto:RETRY_INTERVAL> <iauto:CORRELATION_ID>1267526504968</iauto:CORRELATION_ID> </iauto:serviceSpecificInfo> </iauto:messageHeader> <iauto:messageBody> <iauto:businessInput> <iauto:CIRCLE_ID>MH</iauto:CIRCLE_ID> <iauto:HLR_ID>2</iauto:HLR_ID> <iauto:REQUEST_TYPE>TBF</iauto:REQUEST_TYPE> <iauto:REQUEST_ID>TBF</iauto:REQUEST_ID> <iauto:BB_ACTION>BB_ACTION</iauto:BB_ACTION> <iauto:BB_SERVICE_NAME>BB_SERVICE_NAME</iauto:BB_SERVICE_NAME> <iauto:IMSI_NUMBER>11111111111</iauto:IMSI_NUMBER> <iauto:MSISDN_NUMBER>8975600123</iauto:MSISDN_NUMBER> <iauto:SIM_NUMBER>simno</iauto:SIM_NUMBER> </iauto:businessInput> <iauto:businessOutputData> <iauto:businessOutput> <iauto:SMESSAGE></iauto:SMESSAGE> <iauto:STATUS></iauto:STATUS> <iauto:FINISHED_DATE></iauto:FINISHED_DATE> </iauto:businessOutput> </iauto:businessOutputData> </iauto:messageBody> </iauto:ComptelProvisionReqBO> The response is populated in iauto:businessOutputData tag which in turn is sent back in the form of BO in same structure to the subscription engine via EAI layer. 2 Fetch provisioning information from NSMS Subscription engine will push the business object in the form of XML in to the queue exposed by the EAI layer as a service which in turn will forward the request to NSMS to fetch the provisioning related information. The illustrative BO for the same is provided below. <?xml version=""1.0"" encoding=""UTF-8""?> <soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/""> <soapenv:Header/> <soapenv:Body> <iauto:RetriveMSISDNDetailsBO xmlns:iauto=""http://xml.in.ibm.com/schema/RetriveMSISDNDetailsBORequest""> <iauto:messageHeader> <iauto:headerInfo> <iauto:REQUEST_TYPE>ASynchronous Request- Response</iauto:REQUEST_TYPE> <iauto:MOBILE_NUMBER>8975600123</iauto:MOBILE_NUMBER> <iauto:SERVICE_TYPE>Info service</iauto:SERVICE_TYPE> <iauto:CIRCLE_ID>MH</iauto:CIRCLE_ID> <iauto:CHANNEL_TYPE>FTA</iauto:CHANNEL_TYPE> <iauto:TRACE_ID>3232</iauto:TRACE_ID> <iauto:LOB>PrePaid</iauto:LOB> <iauto:OPERATION_NAME>Retrive_MSISDN_Details</iauto:OPERATION_NAME> </iauto:headerInfo> <iauto:errorInfo> <iauto:ERROR_CODE/> <iauto:ERROR_MESSAGE/> <iauto:SEVERITY/> </iauto:errorInfo> <iauto:operationStatusCode> <iauto:OPERATION_STATUS_CODE>Success</iauto:OPERATION_STATUS_CODE> </iauto:operationStatusCode> <iauto:serviceSpecificInfo> <iauto:RETRY_COUNT/> <iauto:RETRY_INTERVAL/> <iauto:CORRELATION_ID>3232</iauto:CORRELATION_ID> </iauto:serviceSpecificInfo> </iauto:messageHeader> <iauto:messageBody> <iauto:businessInput> <iauto:MSISDN_NUMBER>8975600123</iauto:MSISDN_NUMBER> </iauto:businessInput> <iauto:businessOutputData> <iauto:businessOutput> <iauto:MSISDN>8975600123</iauto:MSISDN> <iauto:STATUS>Closed</iauto:STATUS> <iauto:IMSI>404220421998569</iauto:IMSI> <iauto:SIM>8991220400021998569</iauto:SIM> <iauto:HLR_ID>4</iauto:HLR_ID> </iauto:businessOutput> </iauto:businessOutputData> </iauto:messageBody> </iauto:RetriveMSISDNDetailsBO> </soapenv:Body> </soapenv:Envelope> The response is populated in iauto:businessOutputData tag which in turn is sent back in the form of BO in same structure to the subscription engine via EAI layer. 7 Mediation Integration Subscription engine will generate the CDR for each transaction and the same will be recorded in to CDR adhering to Idea SDP CDR Specification. These CDR files will be pushed to the mediation at a frequency of every 2 hours using SFTP protocol through scripts running on the servers of subscription engine component generating CDRs. Mediation in turn will forward these CDR file to BSS downstream systems, viz. BSCS 6 & iX, RSS, RA & BI. The following attached spread sheet captures IDEA SDP CDR Specification pertinent to subscriptions. 8 CRM Integration The customer care module of subscription engine will be integrated with IDEA unified customer care using silent login feature to handle the customer queries and complaints. The CSR will seamlessly login in to from unified CRM in to subscription engine customer care module. The subscription engine customer care module will expose the HTTPS based standard interface which will be invoked by IDEA CRM to embed the screens in it. The minimum parameters that will be required by SM customer care module as mentioned below will be passed by unified CRM for seamless login. V MSISDN V USER ID V PASSWORD V CIRCLE ID Solution Benefits The following are the benefits pertinent to subscription engine solution 1) Easy integration with the subscription engine using the standard interface exposed by the subscription engine. 2) It will provide the unified view of the subscriber pertinent to subscription services which are being currently provided by the various vendors in isolated manner for the set of subscription services they are offering. 3) Unified view of subscriber pertinent to subscription will enable business to target the specific set of subscribers for VAS subscription specific campaigns. 4) Based on the CDR generated by subscription engine, IDEA will be able to do the revenue settlement with content partners in precise manner which will eliminate any disputes with the content partners 5) Unified approach for HLR provisioning across all the circles for prepaid and postpaid 6) Subscription engine will have the capability to fetch the balance of the subscriber and than initiate the charging request. This will avoid multiple charge request to INs providing performance optimization 7) Subscription engine will provide the fetch and deliver mechanism of the content to subscriber leading to quality of service (QoS) for the subscriber. Also it will facilitate to resolve the customers queries and complaints for the content not being delivered to the subscriber. 8) Centralized customer care to provide the unified view of the subscription transactions of a particular subscriber since currently independent vendor's customer care module is integrated with IDEA CRM. 9) Consolidate reports pertinent to VAS subscriptions to business and technical team using reporting module of subscription engine. 10) Based on the CDR generated by subscription engine, BI will be able to generate the adhoc reports pertinent to subscriptions Reporting The subscription engine logs all the transactions in to the embedded persistent database. This database is in real time sync with the reporting engine database so that there is no impact on the subscription engine performance while generating the reports. The subscription engine constitutes of reporting module which has the user friendly dash board to generate the standard reports by applying certain filters required by business and technical team. It not only displays the reports on the dash board but also has the flexibility to save the reports in excel format on to that system. But there are some adhoc reports which will be generated by the BI system based on the CDRs generated by subscription component. The illustrative sets of reports with screen shots provided by the Subscription Manager framework are provided below. USER V/S SUSBCRIPTION SERVICES REPORT The following report provides the user wise services status. This reporting interface also provides the feature to customer care agent to either subscribe / unsubscribe the user from respective services allowed for the user. [pic] DETAILED SERVICE STATUS REPORT The following report shows list of services and subscription status of the user. [pic] ACTIVATE SUBSCRIPTION The following report helps in activating the subscription of the user. [pic] SUBCRIPTION ACTIVATED The following screen shows the subscription activation status. [pic] SUBSCRIPTION DEACTIVATED The following screen shows the subscription deactivation status. [pic] DELIVERED MESSAGES REPORT The following report shows the complete detail of the messages pushed from the platform and their delivery status. [pic] [pic] MOBILE TRAFFIC SUMMARY REPORT The following report shows the details of MO/MT transactions per MSISDN. [pic] Logging The Subscription Manager Framework has an inbuilt logging mechanism. The subscription engine components will be responsible for generating various kinds of logs viz. transaction logs, error logs, request logs, debug logs. The log levels range between 0-9. The following matrix shows the log level and the kind of log information written by the subscription engine components. |Log Level|Information | |0 |No Logs | |1 |Very less and lightest logs. | |2 |Generic Information, Application Specific Information, | | |any specific information traces. | |3 |Error Log Messages( Recommended ) | |4 |Warning Messages. This is the default log level. | |5 |Statistical Messages | |6 |Hint Log Messages and Debug Log Messages | |9 |Debug Log Messages | On the production deployment it's recommended to set log level to 4 which will print the error log messages which are required to trace on the error scenarios and issues. Customer Care The subscription manager framework provide out of box customer care module which enables call centre agents to handle customer queries and complaints. The call centre agent can view the subscription information pertinent to subscriber by applying search filter on various parameters. This customer care module will be integrated with the IDEA CRM using silent login feature. The following are the features which will be provided by customer care module of subscription engine. > Access Control List > Role based responsibilities > Ability to V View Transaction status against MSISDN V Activate subscription service for a MSISDN V De-Activate subscription service V View transaction history against MSISDN / Transaction identifier > Perform search operation V MSISDN wise V Service wise V Date wise > Content fetch and deliver information V MSISDN to which content was delivered V Date and time of delivery of content V Status of delivery of content > Ability to credit / refund the subscriber in case subscription provisioning fails. NOTE: Role based access control rights will also be imposed on operation/action levels like activation and deactivation. The subscription engine customer care screens will provide information (sample parameters provided below) pertinent to subscriptions assigned to the subscriber as shown in screens shot. Sample Parameter 1. Subscriber MSISDN 2. Subscriber Type 3. Subscription service assigned to the subscriber 4. Request Date 5. Activation Date 6. Renewal Date 7. Deactivation Date 8. Expiry Date 9. Activation Bearer 10. Deactivation Bearer 11. Subscription status 12. Charge status 13. Last activation date 14. Service description / details 15. Subscription pack name 16. Circle 17. Prepaid / Postpaid 18. Provider 19. Transaction identifier 20. Auto renewable 21. Price Point [pic] Also it should provide the view of the transactions for the content delivered to the subscriber by subscription engine in fetch and deliver scenario. [pic] Traffic projection The following are the traffic projections provided by IDEA for VAS subscriptions. [pic] The details of the VAS subscription volumetric are provided in attached spreadsheet. [pic] Bandwidth Calculation The bandwidth calculation pertinent to VAS subscriptions are captured in attached spread sheet. [pic] For content fetch and deliver scenario, additional 0.5 MBPS of bandwidth will be required. Deployment Architecture [pic] Back-up & Recovery This section provides an overview of backup & maintenance process. Further, it details the encompassing inputs, process, outputs, responsibilities & authorities and other related Activities for this. The purpose of this policy is as follows: . To prevent the loss of data in the case of an accidental deletion or corruption of data or system failure. . To permit timely restoration of information and data, should such events occur. 1 Backup Components Subscription Engine components for which backup will be performed is: 1. Main Database Servers > Configuration Tables - Fortnightly > Service Routing Tables - Daily and Fortnightly > Transactional Tables - Daily and Fortnightly 2. Split Database Servers > Subscriber List Tables - Daily 3. Application Server (JHUB) > Conf & bin folders - CVS Backup > Lib and Classes folders - Fortnightly and as and when upgraded > logs - Daily 2 Backup Frequency Main Database Servers Daily Backups - Backups will be performed from the reporting or the mirror servers. Every day during off peak hours, a backup_db_daily.sh script will take the backup of all transactional tables since last to last full backups and put the same on a backup folder overwriting the data backup taken on the previous day. The Daily transactional tables are:- > MO Tables > MT Tables > BOS Billing Tables > CDR BOS Tables > Service Routing Tables > www and wwwsum Tables Most of above tables are Daily tables or updated regularly. These tables will be backed up on daily basis starting from the day on which the last to last fortnightly full backup was taken. Fortnightly Backups - Backups will be performed from the reporting or the mirror servers. Every fortnight a full backup will be done using backup_db_fort.sh script that will take the full backup, compress it and put it into a backup location. The script can be configured to keep previous certain copies of the data. Split Database Servers Daily Backup - Split databases are meant for storing subscriber specific information and updated daily or as per the associated service design. Therefore, a full backup will be performed on each split database server holding the subscriber list and associated information on daily basis using script ""backup_splitdb_daily.sh"". Application Servers (JHUB) Jhub Conf Backup - The conf folder contains all the necessary configuration files for running jhubs. Any changes to these files will also be committed on the CVS. Since the changes are not frequent CVS backup would be taken on daily basis and last 5 copies would be maintained. Jhub libraries and classes folder - Fortnightly or as and when changed. The libraries are static hence would be taken on fortnightly basis or after the change. Daily Logs Backup - A daily script will be configured to run every mid- night which will compress the previous day logs from the logs folder and put the same at a backup location. 3 Backups Verification On a daily basis, logged information generated from each backup job will be reviewed for the following purposes > To check for and correct errors. > To monitor the duration of the backup job. > To optimize backup performance where possible. > Random test restores will be done once every fortnight in order to verify that backups have been successful. Appendix 1 Messaging Gateway HTTP Legacy Specification [pic] 2 Messaging Gateway SMPP Connector Specification [pic] 3 Messaging Gateway HTTP Adapter Specification [pic] 4 UCS Evolve Interface Specification for GPRS Provisioning [pic] 5 CMS WSDL [pic] 6 SDP Subscription Engine CDR Specification [pic] 7 UCS Interface Specification for Charging [pic][pic][pic] ----------------------- The information in this document may not be disclosed outside of IBM/ Idea Cellular Limited and may not be duplicated, used or disclosed in part or full for any other purpose other than to evaluate the processes or design impacts of processes detailed in this document. IBM - GBS-Domestic retains ownership of this document. No edits to this document shall be carried out without explicit authorizations as detailed in the Document Control section in this document. [pic] [pic]"[m
 "IBM SDP SE Project SDP-SE Technical Design Document Prepaid Post-paid Online Churn - Implementation Version 1.0 DOCUMENT CONTROL Title: Technical Design document for Prepaid Post-paid Online Churn - Implementation. Date: 3rd August 2018 Distribution: IBM and Lumata Team DOCUMENT CHANGE RECORD |Date |Version |Author |Change Details | |2018-09-03 |1.0 |LUMATA |First Draft | DOCUMENT SIGN OFF |Nature of Sign |Person |Date |Role | |Off | | | | | | | | | | | | | | Contents DOCUMENT CONTROL 2 DOCUMENT CHANGE RECORD 2 DOCUMENT SIGN OFF 2 1 PREFACE 5 2 INTRODUCTION 5 2.1 Purpose of this document 5 2.2 Scope of this document 5 2.3 References 5 3 Design Overview 6 3.1 Current Process 6 3.1.1 New Consumer to fetch prepaid records 6 3.1.2 Changes in PostPaidStatus Change Module 7 3.1.3 Premium Changes 8 3.2 Risks 8 3.3 Issues 8 3.4 Assumption 8 3.5 Dependencies 8 4 System Affected Areas 9 4.1 API 9 4.2 SE Service Configuration (GUI) 9 4.3 BOS 9 4.4 Premiums 9 4.5 SE CDR modules 9 4.6 CRM 9 4.7 Provisioning 9 4.8 Configuration 9 4.9 Reporting 9 4.10 Shell Script 9 4.11 DB Changes 9 5 QUERIES 9 PREFACE This document describes ""Prepaid Post-paid Online Churn"" implementation at SDPSE. INTRODUCTION This document is designed to provide a detailed overview of Prepaid Post-paid Online churn functionality. 1 Purpose of this document The requirement is to accept prepaid customer's churn request online via EAI queue and before deleting the active services, check prepaid/post-paid flag/indicator at SE end. For post-paid customer accept request as current mechanism (via post-paid EAI queue) and before deleting active services compare date-time stamp of active service with received date-time stamp. Purpose of this document is to indicate the points where these new changes in the SE system/configuration will happen to implement the above mentioned requirement. 2 Scope of this document Scope of the document is to provide the design overview for the above said requirement, system areas which get affected during the implementation of the change, detailed changes for the new configuration flow and the design architecture for the current and the new change flow. 3 References [pic][pic] Design Overview New multithreaded consumer will be developed to receive prepaid online churn feed from EAI, which will consume messages from prepaid EAI queue and execute validations before deleting active services. In existing post-paid consumer extra validations for date-time stamp will be implemented. 1 Current Process In current process, SE_Daily cron fetches churn request from UUP's se_daily table. For churn records, SE fetches only those records for which SE_PROCESSED=0 and CHURN = 1 select msisdn,pre2post,post2pre,a2g,g2a,a2s,s2a,churn,simchg,old_sim,new_sim,e ventdt,se_processed,hlr_id,circle,prepaid_flag,imsi from UUP.SE_DAILY where (CHURN='1' or SIMCHG='1') and SE_PROCESSED='0' limit <endlimit> A csv file getting created by SE_daily module for selected records and placed in configured location. File read and processed by the inoticoming process to create bos tickets. These tickets get processed by the SE_Daily BOS instance and called the ChangeStatusAPI. ChangeStatusAPI generates & hits MO unsub URL to unsub the services. Premium receives unsub MO and deactivates the service. SE_Daily updates SE_DAILY table and sets SE_PROCESSED=1 for fetched records. Existing process will remain as it is and it'll fetch CHURN records from SE_daily table. 1 New Consumer to fetch prepaid records Prepaid EAI system will push prepaid churn records in prepaid EAI queue which will be consumed by SE system. At SE end, a new consumer module will be developed to fetch prepaid churn records from prepaid EAI queue. It'll be deployed on separate tomcat instance. Record Format- <?xml version=""1.0"" encoding=""UTF-8""?> <NS2:publishMessage xmlns:NS2=""http://ideacellular.com/integration/publish/events""> <eventHeader> <EVENT_TYPE>CHURN</EVENT_TYPE> <CHANNEL>PREPOL</CHANNEL> <MSISDN>5000000023</MSISDN> <LOB>PrePaid</LOB> <CIRCLE_CODE>DL</CIRCLE_CODE> <EVENT_FILTER> <DND_FLAG>FALSE</DND_FLAG> </EVENT_FILTER> </eventHeader> <eventBody> <CHURN> <CHURN_REASON_CODE>TC</CHURN_REASON_CODE> <CHURN_DATE>16/11/2015</CHURN_DATE> <CHURN_TIME>21:20:14</CHURN_TIME> <ACTIVATION_DATE>12-03-2014</ACTIVATION_DATE> </CHURN> </eventBody> </NS2:publishMessage> New multithreaded consumer will parse the xml and fetch required parameters from xml. It'll also check following parameters before processing the record. 1. Value of EVENT_TYPE should be CHURN or churn. 2. Valid 10 digit MSISDN with 91, same like post-paid. 3. If EVENT_TYPE value is other than CHURN or MSISDN is invalid then system will drop the churn request at consumer module itself. 4. In case mapping of CIRCLE_CODE parameter required then same will be done at consumer. 5. Consumer will also generate a unique transaction ID for each deactivation transaction. To keep uniqueness transactionid's 2rd and 3rd digit will be different and same will be configurable. 6. Consumer will check if received MSISDN record exist in se_subscription_details table or not. If record exists then it'll further process the request else it'll drop the request. 7. For each service in se_subscription_details, consumer will check prepaid flag value from mlist and if it's value is 'Y' (means prepaid) then consumer will create a ticket and push in premium queue for deactivation of services. If it's value is other than 'Y' then it'll check next service. 8. New log file will be created to write prepaid consumer logs. 2 Changes in PostPaidStatus Change Module 1. This module will also parse the value of RequestedDate(Format - dd/mm/yyyy hh:mm:ss) parameter. 2. If received status is ""Pending PD"" then this will select all services for the requested MSISDN. 3. For each service, it'll compare the activation date time of service with received RequestedDate. 4. If activation date time is less than RequestedDate then system will generate unsub ticket and push the same in JMS queue for further processing. 5. If activation date time is greater than RequestedDate then system will not deactivate the service. Sample Request <?xml version=""1.0"" encoding=""UTF-8"" ?> <scn:IDEAStatusChangeNotifications xmlns:scn=""http://in.ibm.com/schema/StatusChangeNotifications/""> <scn:messageBody> <scn:businessOutputData> <scn:IDEAStatusChangeNotifications> <scn:BANumber>100000085871</scn:BANumber> <scn:SANumber>1000000152070</scn:SANumber> <scn:msisdn>915340255283</scn:msisdn> <scn:status>Pending PD</scn:status> <scn:remarks>Success</scn:remarks> <scn:RequestedSystemName>SADMIN</scn:RequestedSystemName> <scn:RequestedDate>12/12/2012 21:00:00</scn:RequestedDate> <scn:user>SADMIN</scn:user> <scn:notificationDate>12/12/2012 21:00:00</scn:notificationDate> <scn:externalRefNumber>S1-14335561</scn:externalRefNumber> <scn:reason>MNP</scn:reason> <scn:circle>UPE</scn:circle> </scn:IDEAStatusChangeNotifications> </scn:businessOutputData> </scn:messageBody> </scn:IDEAStatusChangeNotifications> 3 Premium Changes Changes will be done at premium level to handle prepaid unsub request which are coming via prepaid consumer. 2 Risks In case request comes in bulk then there is a chance that queue will be built at premium module and this means processing will be slow. 3 Issues 4 Assumption In prepaid EAI queue only prepaid numbers request will be pushed by EAI. At SE level there is no special handling for Hybrid subscribers so for SE, request received via prepaid queue will be treated like a prepaid subscriber and via post-paid queue will be treated like a post-paid subscriber. 5 Dependencies A new tomcat instance is required to deploy new prepaid consumer module. System Affected Areas In order to implement the 'Prepaid post-paid online churn' feature below are the main effective areas where changes are required in SE: 1 API 2 SE Service Configuration (GUI) 3 BOS 4 Premiums Changes to be done at premium end are mention in Section 3.1.3. 5 SE CDR modules No change. 6 CRM 7 Provisioning No change in the Network Provisioning Module. 8 Configuration 9 Reporting No change. 10 Shell Script 11 DB Changes 12 PostPaidStatusChange Changes to be done at premium end are mention in Section 3.1.2. QUERIES 1. For post-paid request's date time comparison do we have to compare RequestedDate or notificationDate?"[m
[31m-"Business Goal: Assist seeker to respond to his questions. Seekerâ€™s profile extraction and ingestion. Visume Chat Bot (Lumen) Scope: User can ask about: Company CEO or leadership team. Company general info Companyâ€™s products Company turnover Organisation structure Cab facility Food/snacks/cafeteria facility Flexi timings Office timings Five day week Work from home policy Mediclaim policy Life Insurance policy Is company MNC? Companyâ€™s office address Companyâ€™s leave policy Maternity policy Appraisal cycle No of interview rounds Time to close open position Jobâ€™s compensation Onsite Opportunity or Foreign trips to employees Attrition rate Firing policy Roles and responsibilities for the Job Hiring Process Steps Human resource response time to candidate Lumen asks to seeker: What is your notice period? Where do you live? What is your current CTC? How many years of working experience do you have? What's your highest level of education/qualification? Who is your current employer/company? Key Features: During conversation, seeker can ask bot to take turn. And then bot proceeds further. Out of scope user queries are handled as part of NLU and dialogues (i.e. stories) Seeker can ask for human handoff during the conversation. Lumen indicates the high level scope of conversation in the beginning. Basic Small talks have also been introduced to make the conversation interesting. Seeker denial (Deny) is taken care of in sharing the info at important places. Abusive words or bad words have been handled during conversation. NLU model accuracy has been improved significantly by introducing Tensor Flow embedding in place of Spacy library. More than 35 K (including 500 top Indian) company names have been looked up to extract the company name from user free text. Top 500 Indian city names have been looked up to extract the user location from user free form text. Lumen asks 6 questions Seeker can asks up to 27 different questions to Lumen. Lumen is an AI bot. Therefore, it learns from the data. As we get more conversation data to train on, the accuracy would be greater. The seekerâ€™s profile extracted by Lumen is stored in a csv file in app directory. Lumenâ€™s responses are configurable in a file but retraining is required after change. Lumen questions are randomized as part of dialogue model. Lumen chatbot app is deployed in Lumata Digitalâ€™s premises only. Technology Used: Python 3.6.5 RASA Stack an open source framework (Rasa NLU â€“ 0.13.8 and Rasa Core â€“ 0.11.3) Slack client GIT Project: http://10.12.224.2/Projects/Visume-Chatbot.git Installation Procedure: Install python 3.x version Clone the project to your app directory pip install â€“r requirements.txt install spacy English language model Follow README.md instructions to train and run the application. Known Issues: Emoticons are not supported in user text. Multi Intents (user asks two queries/intents in one sentence). The user would get one response depending upon the confidence score. Spelling mistakes as part of user queries are not auto corrected in the model. Currently, the model is trained on some sample data created during development. So, the prediction score of intent, entities and actions may go less or wrong. However, training of the models is an on-going process and we would achieve production like accuracy soon. Next Steps: Open backlog items Feedbacks New Requirements"[m
[1mdiff --git a/imp/cleanfile.csv b/imp/cleanfile.csv[m
[1mindex 0221856..1e702be 100644[m
[1m--- a/imp/cleanfile.csv[m
[1m+++ b/imp/cleanfile.csv[m
[36m@@ -1,18 +1,4 @@[m
 data[m
[31m-abcd e f f f f f f f f g f h f f j f f k f f k l k e f f f j f f f f f f n l f f f l f f f f k f f k f j f f p f f f q l f[m
[31m-job description job title data analy tic specialist dept division enterprise information service reporting vp enterprise information general account bility data analytics pecialist responsible developing information driven insight help identify trend opportunit y provide solution based insight work closely e nterprise information service eis team extract meaning complex data relationship order e nhance ability better serve member provide depth analysis data using data mining profiling technique help u u nderstanding member behavio u r predict future need expert big data relationship th individual background trend analysis predictive modellin g required develop report enable u anticipate meet member need solution tailored individual circumstance possessing strong ability data report presentation successful candidate also ability effectively communicate information staff way clear easily understood end user primary duty responsibility business unit support act data analytics expert understands extract meaning complex data relationship nd develops report enable effective use resulting knowledge utilizes data model generate profile allow u customize service offering specific need member based profile develops predictive modelling trend analysis tool anticipate member need provide real time solution meet need provides training support use new report tool reporting analytics lead development enhancement reporting service encompass greater use forward looking predictive element assist data gathering strategy ensure alignment corporate go al objective identifies new opportunity data gathering fill gap existing model enhance model order drive higher level performance throughout organization design enhance data model analyze predict future member behaviour enabling u proactively meet client need assist duty required rganizational competency sale service orientation committed serving satisfying need external internal member client delivery superior value building strengthening maintaining long term relationsh ip[m
[31m-prepaid eai nfr subscriber day e tps need subscriber activate service may lakh create scenario churn prepaid eai pushing number queue prepaid eai post paid eai pushing number queue monitor following prepaid consumer log processing tomcat server jms queue premium server end end transaction status server parameter postpaid eai nfr subscriber day e tps need subscriber activate service create scenario churn post paid eai pushing number queue prepaid eai post paid eai pushing number queue monitor following prepaid consumer log processing tomcat server jms queue premium server end end transaction status server parameter[m
[31m-noproblem descriptionsuggested solutionresponsible functionstatus requirement analysis currently qa involved time requirement understanding ibm however developer involved lead understanding gap qa involvement increased starting requirement understnading phase ibm teampmopen requirement change every requirement change design development notified team particularly qa creates confusion testing requirement change development design condition etc documented shared email whole dev qa teamdevopen daily stand daily standup team practised currently daily standup team dev qa conducted page update everyone pmopen code commit code push git giving qa practised everytime code pushed git giving qa process followed everytime devopen deliverable item jar war managed central repositoryjenkins arti factory introduced devopen repetitive work currently repetitive work regression high consumes time using jmeter soapui initiate request automating manual flow improve testing save time change done existing automation regression qaopen defect leakage defect observed production dependency ibm team reduced eg uup ibm q bos stub harsha case one sit environment reserved qa pmopen deployment step deployment step shared qa major build deployment step shared qa major build devopen[m
[31m-proprietary document human resource department page job description role marketing service consultant l ocation noida scope purpose job responsible marketing service telecom service provider enterprise take ownership service life pro gramme manages client retention growth providing proactive strategic recommendation operational delivery marketing programme part team account made analyst receive support data scientist work cl osely sale technology responsible account data driven marketing background track record f driving marketing kpis successfully managed large scale marketing programme past k ey responsibility client management build strong client rel ationships highest level ct key point contact client strategic operational level personally manage client responsibility ensure invoicing triggered time finance team support finance team timely cash collection marketing service driving marketing service work define strategic p lan tactical operation leading delivery marketing consultancy client including business case model input functional specification program clustering segmentation exploratory analysis high level campaign strategy propensity modeling prediction detailed campaign strategy definition kpi reporting marketing training support global benchmark review leading operational delivery marketing program including campaign report set detailed campaign plan test learn campaign multivariate campaign testing interpretation kpi reporting campaign audit campaign reporting ad hoc campaign analysis roi analysis developing agreeing marketing plan cbm driving service kpis agree set target kpis program client drive result personally[m
[31m-job title software developer job description scope purpose job backend developer take care product release lifecycle analysis new feature delivery change production charge day day activity well developing evolution product ensure expected performance quality standard met backend developer also contributes actively organization evolution development process participates release planning key responsibility function developer focused java j ee technology e core java j ee strut spring hibernate web service soap rest maven junit activemq web logic server assist development improvement application maintenance plan process procedure standard priority ensuring regular check maintenance existing system skill skill experience required function developer focused java j ee technology e core java j ee strut spring hibernate web service soap rest maven junit activemq web logic server assist development improvement application maintenance plan process procedure standard priority ensuring regular check maintenance existing system b e b tech mca reputed college excellent academic year experience developing medium large sized project variety technology hand knowledge j ee together lightweight framework including spring mvc hibernate technology good understanding application development deployment life cycle methodology experience server side programming telecom specific high volume large system application environment would added advantage experience working linux operating system knowledge one open source software product maven junit apache activemq jmx experience working rdbms particular mysql mongodb database server keywords java j ee strut spring hibernate web service soap rest maven junit apache activemq jmx mysql mongodb[m
[31m-activate prepaid number service hit refund url hit callback url service counter key post nrml log log act txt echo date h n log mdn cat home sandman loadtest postpaid churn url http subscription activatesubscription msisdn mdn srvkey key user ibmuser pas ibm mode sm originator reqtype sub precharge n reqdate reqtime info activation request agr siteid mu refid id echo date h n url basepath log count expr count logic calling service seraily service counter eq service counter else service counter expr service counter fi end id expr id count eq tps sleep count fi done echo date h n log[m
[31m-test scenario read message ibm q via consumer push message jms q process run parallel thread test objective notice message processed smoothly using thread pooling consumer processing time consumer start time consumer end time total time taken process message minute db running consumer trigger mysql select status count jmailer ibmse se subscription detail group status status count active avr csr row set sec mysql select status count jmailer ibmse se subscription detail group status status count active avr csr row set sec jms q consumer log statistic message sent successfully per minute svhj scevent grep e com bdii se parser queuedataparser log scevent scevent log grep e message sent successfully grep wc l message sent per second svhj scevent grep e com bdii se parser queuedataparser log scevent scevent log grep e message sent successfully grep wc l message sent per minute svhj scevent grep e com bdii se parser queuedataparser log scevent scevent log grep e message sent successfully grep wc l received per minute svhj scevent grep e com bdii se messageobserver log scevent scevent log grep e com bdii se messageobserver queue message recieved grep wc l message received per sec svhj scevent grep e com bdii se messageobserver log scevent scevent log grep e com bdii se messageobserver queue message recieved grep wc l total message received grep e com bdii se messageobserver log scevent scevent log grep e com bdii se messageobserver queue message recieved grep wc l total message sent successfully sandman svhj grep e com bdii se parser queuedataparser log scevent scevent log grep e message sent successfully grep wc l message exist se sandman svhj grep e com bdii se parser queuedataparser log scevent scevent log grep e record exist se grep wc l test scenario read approximately k message ibm q via consumer push message jms q process run parallel thread test objective notice message processed smoothly using thread pooling consumer processing time consumer start time consumer end time message ibm q approximately message processed total time taken process message hour consumer log reference bash grep e com bdii se jms messagesender log scevent scevent log grep e message object wc l user state se consumer start previous data split active avr csr present state mysql select status count se subscription detail service name post nrml group status status count active avr csr row set sec split second round csr previous data split csr present state mysql select status count se subscription detail service name post nrml group status status count csr row set sec split second round csr user state number subscriber csr active avr existing q load testing[m
[31m-mohd mamoon email gmail com phone executive summary around year experience software development good knowledge system development life cycle sdlc strong object oriented concept software design implementation strong knowledge core java hibernate spring mvc design pattern servlets jdbc jsp html javascript maven unix web service soap experience developing web based application using java technology experience developing desktop based application using java technology strong interpersonal communication skill ability work team keep motivated ability achieve project goal within project constraint scope timing quality energetic self motivated team player refined designing analytical skill professional experience working software developer amdocs service private ltd nov march worked software developer glocal technology pvt ltd april nov technical skill skill type experience knowledge programming language java c web technology html javascript xml cs jquery j ee technology servlets jsp jdbc framework spring mvc hibernate web service web app server tomcat jboss ide eclipse websphere database mysql operating system window xp unix professional project project service delivery platform duration nov current role software developer team size environment software tool technology spring hibernate servlets jsp javascript websphere integration developer tomcat oracle html ant web service description sdp service delivery platform application part oms product receives thousand order upstream application validates sends downstream application telecommunication domain project involved order management process business support system process product management revenue management customer management project service delivery platform middleware system responsible orchestrating flow order sdp two subcomponents complex process controller cpc simple process controller spc transactional management system monitor transaction coming flowing sdp role contribution developed change request existing system developed new enhancement system involved system architect application design creation performed proper ut plan ut execution change request prepared unit test plan case manual testing professional project lifeline pharmacy description lifeline pharmacy online portal sell everything related health fitness like vitamin body building supplement weight loss hair loss skin care product prescribed medicine allopathic homeopathy herbal etc project lifeline pharmacy duration april nov role software developer team size environment software tool technology core java spring hibernate servlets jsp tomcat oracle html maven role contribution responsible developing new inhancement change request handling daily issue performed proper ut plan ut execution change request involved system architect application design creation academic detail degree certificate institute board year b tech information technology iimt eng college meerut uptu xii board x board personal detail father name mr dilshad ahmad date birth june language known english hindi urdu correspondence address f shaheen bagh new delhi place delhi mohd mamoon[m
[31m-area work education ai conversational ai informative bot history bot religious bot math bot science bot robotframework python git maven soap ui jmeter test link ai software testing qa nlp ml dl bug report automatic test case generation automatic test case automation automatic performance testing automation security testing automation database testing automation operational task automation like starting server etc chat client linux shell automation framework best practice qa qa ai based application[m
[31m-sagun sharma mobile email saguns gmail com objective pic get job software industry academia pic b tech computer science engineering college deemed b anangpuria institute technology management university name maharishi dayanand university rohtak haryana india percentage semester wise first semester second semester third semester fourth semester fifth semester sixth semester currently seventh semester higher secondary examination amity international school cbse board secondary school examination amity international school cbse board cgpa core computer competency pic good command programming language c c java html data structure object oriented concept well operating system thorough macromax flash player m excel m access related coursework pic summer project entitled qr code verification uploaded certificate pitney bowes gurgaon july done summer course core android codifier india janakpuri done course robotics core advance edubotix pune college campus accomplished certified course c c indian institute technology bombay developed word editor c language developed snake ladder game java programming language award honor pic attended international conference recent trend science technology september participated project citizen india international civic education programme received certificate community service teaching student underprivileged girl child school amitasha received proficiency certificate subject mathematics english central board secondary education cbse participated techno chem navy child school actively took participation walk blood initiative create awareness noble cause voluntary blood donation rotary blood bank rajpath year third prize vasudha district level science competition project water hycanith weed used alternative make paper participated various national science olympiad nso international mathematics olympiad imo participated english debate group discussion school well college skill pic excellent written oral communication dedicated effort work assigned ability work gracefully team oriented setting keen honest learner able grasp new concept quickly activity interest pic avid reader interest fiction thriller genre well english literature good hand writing good vocabulary knowledge passionate programmer choice fairly good hand designing web page interest include badminton volleyball personal detail pic date birth rd october language known english hindi[m
[31m-sania khan email saniakhan gmail com address zion lakeview apartment sector faridabad mobile objective work organization give opportunity self improvement leadership contributing symbolic growth organization technical innovative logical skill qualification qualification institute name year percentage b tech computer science engineering amity school engineering technology noida cgpa intermediate c b e modern vidya niketan faridabad high school c b e modern vidya niketan faridabad cgpa professional education b tech computer science engineering fundamental programming course inceptra technology java programming course ducat project currently project tampering fault detection electricity meter software development using visual studio microsoft sql server management studio industrial project elcom innovation pvt ltd android based voice logger indicator may june online shopping website interior designing using j ee html javascript cs jquery may june term paper premised data communication computer network network layer functionality protocol may june technical skill ides eclipse ide database sql server operating system microsoft window programming language c c java extracurricular activity participated event amity tech meet attended international conference signal processing integrated network hobby interest outdoor activity dancing personal detail father name mr khan gender female marital status single date birth september language english hindi hereby declare information produced true sania khan[m
 user requirement specification pcr se online churn feed document information project name sdp se project manager manish kamat submitted ibm corporate team submitted july version number internal pcr priority medium low medium high urgent change history version date description author july initial draft jeevan magdum draft july updated draft jeevan magdum updated table content change detail requirement change sdp se comment note query change detail requirement change sdp se change final solution requirement request short prepaid customer accept churn request online check description prepaid postpaid flag indicator deleting active service postpaid hybrid customer accept churn request online check date time stamp deleting active service background currently se churn number using se daily table uup received issue post pre migration number migrated day owner activated new service got deleted se churn solution prepaid customer accept churn request online check prepaid postpaid flag indicator deleting active service postpaid hybrid customer accept churn request online check date time stamp deleting active service detail online updation churn concerned msisdn change sdp se real time basis requirement churn updation request postpaid subscriber flow via postpaid eai sdp se b churn updation request prepaid subscriber flow via prepaid eai sdp se following logic applied given churn scenario churn prepaid subscriber msisdn churn status updation sdp se prepaid postpaid flag indicator check sdp se va service active corresponding msisdn based prepaid postpaid flag indicator check decision sdp se whether active va service msisdn question deleted churn request received sdp se prepaid msisdn active va service said msisdn prepaid flag va service deleted va service deleted sdp se deactivated said msisdn va service postpaid flag deleted va service deleted sdp se continue active said msisdn following logic applied given churn scenario churn postpaid subscriber msisdn churn status updation sdp se date time stamp check sdp se va service active corresponding msisdn based date time stamp check decision sdp se whether active va service msisdn question deleted activation date time stamp active va service date time stamp msisdn churn updation network va service deleted continue active said msisdn activation date time stamp active va service date time stamp msisdn churn updation network va service deleted thus deactivated said msisdn hybrid subscriber scope churn scenario churn postpaid subscriber hybrid subscriber logic mentioned applied impact sdp se nfr total prepaid subscriber churn per day avg subscriber day total postpaid subscriber churn per day avg subscriber day assumption reference pic comment note query[m
[31m-user requirement specification pcr postpaid status change event document information project name sdp se project manager neerav vaghela submitted ibm corporate team submitted july version number internal pcr priority medium low medium high urgent change history version date description author july initial draft ram rege draft july updated barred suspende ram rege info table content change detail requirement change sdp se comment note query change detail requirement change sdp se change accept status change event postpaid system request short following description churn number se case status changed churn mark customer barred case status change barred mark customer suspended case status change suspended trigger activation renewal barred suspended customer background currently se churn number using se daily table uup received issue postpaid number postpaid cdr generated due delay receiving churn solve delay issue se need accept churn information online currently se checking barred status need reject request barred status currently se checking suspended barred status renewal need stop renewal supsended status start cp customer becomes active detail change subscriber postpaid queue status change event refer requirement status change notification format reference section churn filter status accept churn status pending pd forward request se soft delete se table happening currently se daily table suspend filter status accept status td safe custody forward request se mark customer supended barred filter status accept status barred selective barring forward request se mark customer barred accept reason code barring stored barred customer accept status active mark customer active case barred suspended stage activation request reject activation request customer case customer suspended barred reason code mentioned property file refer reason code sheet reference section renewal request customer picked renewal case customer suspended barred reason code mentioned property file refer reason code sheet reference section update cp stop service customer barred suspended state trigger renewal subscriber becomes active call cp start service impact sdp se nfr lakh request day status change event assumption change postpaid subscriber existing process get churn se daily continue prepaid postpaid reference status change notification pic barred reason code list pic comment note query[m
 subscription engine solution document nt author mayur khatri owner ibm customer idea document history document location snapshot line document paper copy valid day printed refer author doubt currency document source document found document revision history date revision th mar date next revision doc revision change summary edited ver date mar initial draft document mayur khatri mar incorporated solution review mayur khatri comment reviewed reviewer title reviewed jignesh k karia lead architect chandrashekhar k delivery owner upasani sudip banerjee project manager approval release document requires following approval idea approver title ibm idea tejasvi bishnoi sdp program manager idea kavinder pawanhee sdp business lead distribution document distributed idea title ibm idea idea marketing revenue assurance sdq network security team ibm idea sdp team ibm gb idea pe associated smes content introduction objective purpose reference abbreviation assumption dependency system context unified user profile uup messaging gateway wap portal crm web portal ivr obd ucs eai mediation cm va application rd party cps ucse ucs evolve hlr rim bscs bscs ix bility bs system ivsm solution overview logical architecture diagram solution architecture overview diagram solution description discovery channel layer subscription engine messaging gateway sm stk channel ussd subscription engine wap gateway subscription engine ivr obd portal subscription engine web portal subscription engine crm subscription engine channel charging layer ucs subscriber profile repository unified user profile fetch subscriber profile update subscription profile integration layer eai hlr provisioning rim provisioning bscs ix provisioning provisioning layer cm provisioning va application rd part content provider bscs provisioning hlr provisioning pre transformed scenario rim provisioning bs system revenue assurance system revenue settlement system business intelligence postpaid billing system mediation subscription engine discovery layer subscription engine core service configuration rating engine reporting engine logger customer care module monitoring subscription engine feature product overview b platform overview b subscription manager overview product feature functionality subscription manager gui service content delivery feature se charging capability charging renewal feature subscription charging model subscription api subscription engine reporting feature monitoring system maintenance product architecture product component sandman discovery layer bos b charging gateway premium server subscription manager engine sm renewal message delivery scheduler cron server scheduler component functionality b gateway processor subscription module charging manager database cm delivery engine cron subscriber list subscription engine use case prepaid subscription service via discovery channel subscription activation sm subscription activation ussd subscription activation wap subscription activation web subscription activation ivr subscription activation crm subscription activation obd subscription activation sanchaya subscription activation vms renewal subscription service subscription renewal based validity renewal subscription based usage exhaustion renewal service validity renewal service validity subscription service grace mode subscription service suspension mode suspension deactivation mode subscription service deactivation mode opt deactivation subscription business model subscription step charging micro charging trigger charging fetch deliver normal content delivery try buy pack combo pack combo pack combo pack combo pack combo pack provisioning subscription service rbt provisioning pre tone provisioning gprs provisioning blackberry provisioning appstore provisioning bulk subscription provisioning api bulk subscription provisioning ui subscription service gprs gprs plan change pre charge gprs activation request gprs daily pack subscription plan blackberry blackberry plan change blackberry service change subscriber life cycle management status active status inactive status grace period sim change pre post migration post pre migration churn scenario port scenario subscription engine use case postpaid subscription service via discovery channel subscription activation sm subscription activation ussd subscription activation wap subscription activation web subscription activation ivr subscription activation crm subscription activation obd subscription activation sanchaya renewal subscription service subscription renewal based validity opt deactivation subscription try buy pack provisioning subscription service rbt provisioning pre tone provisioning gprs provisioning blackberry provisioning subscription service gprs gprs plan change gprs daily pack subscription plan blackberry blackberry plan change blackberry service change subscriber life cycle management subscriber status active subscriber status suspend subscriber status inactive integration uup integration fetch subscriber profile update subscription profile case subscription activation case ii subscription renewal case iii subscription grace case iv subscription suspension ucs integration case request parameter missing error case ii operation failed case iii connection time case iv unable connect ucs case v allocation failed integration bscs bscs ix bscs integration bscs ix integration messaging gateway integration cm integration eai layer integration hlr rim provisioning fetch provisioning information nsms mediation integration crm integration solution benefit reporting logging customer care traffic projection bandwidth calculation deployment architecture back recovery backup component backup frequency backup verification appendix messaging gateway http legacy specification messaging gateway smpp connector specification messaging gateway http adapter specification ucs evolve interface specification gprs provisioning cm wsdl sdp subscription engine cdr specification ucs interface specification charging introduction idea cellular part aditya birla group india multinational corporation global vision rooted indian value group driven performance ethic pegged value creation multiple stakeholder considering current trend telecom market become extremely important telecom operator focus messaging message related application messaging channel provide one effective way reach customer objective document describes solution architecture subscription engine depict interaction among various component module within subscription engine also component system overall idea ecosystem solution architecture represents governing idea various component system idea sdp subscription engine perspective provides overview main conceptual element relationship architecture including subsystem component connection data store user external system purpose purpose document communicate conceptual understanding target system subscription engine perspective idea sdp environment provide high level shared vision solution architecture scope proposed system document architectural decision made solution design depict system context diagram representing subscription engine single entity show external sdp component system interact directly indirectly subscription engine present use case call flow subscription engine play vital role depict component model interaction component subscription engine interaction sdp component depict non functional aspect affecting quality service imposing constraint system show logically system component deployed interact depict operational model describing operation system derived primarily non functional requirement facilitate effective communication different community stakeholder developer facilitate orientation new people join project reference document based refers following document idea requirement document subscription engine v doc sm product overview pdf sdp messaging gateway solution document sdp content management system cm solution document sdp unified user profile uup solution document nokia unified charging system feature interface document abbreviation acronym expansion sdp service delivery platform sm subscription manager cm content management system sm short message service ivr interactive voice recognition eai enterprise application integration va value added service http hyper text transfer protocol o operating system smsc short message service centre api application programming interface msisdn mobile station integrated service directory number smpp short message peer peer protocol wap wireless application protocol soap simple object access protocol jdbc java database connectivity mg messaging gateway uup unified user profile cimd computer interface message distribution ftp file transfer protocol ucs unified charging system se subscription engine crm customer relationship management ucs unified charging suite bi business intelligence ra revenue assurance r revenue settlement system hlr home location register nsms number sim management system rim research motion ivsm idea value added service service management rbt ring back tone gprs general packet radio service ussd unstructured supplementary service data stk sim toolkit ucse unified charging suite evolve bs business support system cp content provider snmp simple network management protocol mib management information base mo mobile originated mt mobile terminated assumption dependency following assumption taken designing subscription engine solution application system initiating request pertinent subscription call standard http apis exposed subscription engine se support va service subscription life cycle management se store application content specific information database ucs provide fetch balance api ucs must support volume required subscription request low latency high throughput ucs load balancing request landing system ucs denies charging request subscriber grace se provide start stop notification respective application content delivery except scenario wherein se fetch deliver content se maintain usage counter scenario wherein se fetch deliver content else maintained respective application responsible delivering content service application responsible delivering content service send usage exhaust notification se daily subscription pack pre renewal notification message sent se daily subscription pack charging fails se retry charging trigger charging e g charging match day charging fails se retry charging blackberry modify service request scenario existing blackberry service replaced new requested blackberry service hence requested black berry service provisioned rim server hlr blackberry modify plan request scenario existing blackberry service plan replaced new requested blackberry service plan hence requested black berry service plan neither provisioned rim server hlr mediation responsible maintaining consistent provisioning across hlr rim server application system initiating pre charged subscription request invoke se api providing pre charged flag one parameter else se charge subscription successful charging suspended period next renewal date calculated starting day gprs service provisioned hlr default prepaid postpaid subscriber gprs pre charged subscription initiation based recharge scenario subscriber gprs plan already changed day se reject subscription request subscription engine apply business rule pertinent subscription order postpaid combo pack apply step charging business model combo scenario renewal charging would based priority defined product manager low balance scenario combo combo scenario renewal based longest running service combo pack scenario pin validation required respective system responsible pin validation handing request subscription engine e subscription engine perform pin validation maintain pin system pre post post pre migration msisdn remain pre post post pre migration service deprovisioning subscriber hlr done order management post pre migration blackberry deprovisioning rim done order management following dependency successful execution subscription engine solution icl provide combo pack business logic well advance icl provide exact definition existing subscription service well advance icl provide format adjustment code pertinent subscription provide discovery channel integration detail subscription engine system context figure depicts centralized subscription engine context interacting sdp component icl ecosystem diagram considers subscription engine single entity show external sdp component interact directly indirectly subscription engine pic unified user profile uup centralized subscription engine interface uup following task fetch subscriber profile performing subscription specific validation viz prepaid postpaid ported status category etc along provisioning parameter like hlr id imsi sim id pertinent subscriber profile requesting service b subscription engine update uup database subscriber subscription profile contains subset subscriber subscription profile information viz activation date last renewal date status status change date etc messaging gateway centralized subscription engine interface idea sdp messaging gateway following scenario messaging gateway forward subscriber subscription related request subscription engine request discovered via sm ussd stk channel b subscription engine send notification via messaging gateway subscriber event like acknowledgement subscription request successful subscription purchase successful renewal notification delivery content etc wap portal centralized subscription engine interface wap portal performing following activity subscriber opt subscription via wap portal wap portal forward request subscription engine via wap gateway b wap portal fetch active list subscription service subscriber subscription engine along corresponding status subscription service render wap portal crm centralized subscription engine interfaced idea crm following centralized subscription engine customer care module integrated idea crm using silent login b handling customer query complaint resolution c placing order viz activation deactivation pertinent subscription service via crm web portal centralized subscription engine interface web portal performing following activity subscriber opt subscription via web portal web portal forward request subscription engine via http proxy b web portal fetch active list subscription service subscriber subscription engine along corresponding status subscription service render web portal ivr obd centralized subscription engine interfaced ivr portal obd handle subscriber subscription request discovered ivr obd channel ucs ucs act charging gateway centralized subscription engine perform following activity fetch balance subscriber b charge subscriber availed subscription service c refund amount subscriber case failure dispute note based available balance subscription engine handle low balance negative balance feature eai centralized subscription engine integrated eai layer async manner achieve following fetch provisioning related information viz imsi hlr id simid nsms b send subscriber subscription provisioning request hlr rim server service requires hlr provisioning provisioning rim server viz blackberry service mediation cdr file generated centralized subscription engine pushed mediation performing following task apply filter logic b transformation cdr format c routing cdrs downstream bs system like bscs ra r bi etc cm va application rd party cps centralized subscription engine interface cm va application rd party cps perform following activity provision subscriber requested subscription cm va application rd party cps cm va application rd party cps responsible delivering content service subscriber b fetching content cm va application rd party cps subscription engine responsible delivering content service subscriber ucse ucs evolve centralized subscription engine integrated ucs evolve provisioning gprs service requested subscriber also subscription engine initiate gprs plan change provisioning request ucs evolve hlr centralized subscription engine send service provisioning request via eai layer comptel il subscriber hlr service viz gprs blackberry pre tone miss call alert etc requires provisioning hlr rim centralized subscription engine send blackberry service provisioning request via eai layer comptel il subscriber rim server comptel il capability roll back provisioning hlr provisioning blackberry service rim server fails bscs bscs ix bility centralized subscription engine interfacing postpaid billing system bscs ix bility following scenario tagging requested subscription service subscriber bscs ix bility bscs charge monthly rental pro rated non pro rated subscriber opted subscription service b subscription engine send generated cdrs bscs ix bility following task rating ii charging iii bill presentment bs system centralized subscription engine push generated cdrs following bs system via mediation revenue assurance ra revenue subscriber subscription status reconciliation b revenue settlement system r revenue settlement content partner c business intelligence bi generating adhoc report postpaid billing system bscs ix bility rating charging bill presentment ivsm centralized subscription engine interface ivsm provisioning subscription service subscriber bscs following system async mechanism bscs hlr rim server solution overview section outline solution architecture subscription manager idea sdp ecosystem logical architecture diagram figure depicts logical architecture subscription engine solution fraction icl sdp ecosystem figure show major high level module involved subscription engine solution pic figure subscription manager logical architecture diagram solution architecture overview diagram figure provides system level overview subscription manager positioning idea sdp environment figure depicts interaction subscription engine various system component icl eco system also application hosted various va vendor outside idea environment pic figure subscription manager architecture overview diagram solution description depicted overall idea sdp solution boun giorno subscription engine positioned centralized subscription engine facilitate centralized management va subscription activation renewal upgrade icl core infrastructure application focus efficient service delivery centralized subscription engine collapse multiple subscription engine viz cellebrum one phoneytunes onmobile current icl eco system provide single subscription engine lay foundation different subscription model across icl va subscription offering detailed solution centralized subscription engine icl environment depicted two figure viz logical technical architecture diagram description solution based mapping logical architecture individual system component involved overall subscription engine solution discovery channel layer layer show various channel viz sm ussd stk wap web ivr obd crm vtopups sanchaya subscriber place order pertinent va subscription turn constitutes various discovery network software based component viz smsc messaging gateway sgsn wap gateway ussd gateway etc request initiated channel landed subscription engine unified format subscription engine messaging gateway sm stk channel subscription request discovered subscriber sm stk channel sent messaging gateway via smsc using cimd protocol messaging gateway turn forward request subscription engine standard http interface exposed subscription engine ussd subscription request discovered subscriber ussd channel sent messaging gateway via ussd gateway using smpp protocol messaging gateway turn forward request subscription engine standard http interface exposed subscription engine subscription engine wap gateway subscription request discovered subscriber wap portal sent subscription engine standard http interface exposed subscription engine subscription engine ivr obd portal subscription request discovered subscriber ivr obd forward request subscription engine standard http interface exposed subscription engine subscription engine web portal subscription request discovered subscriber web portal sent web proxy using http protocol web proxy turn forward request subscription engine standard http interface exposed subscription engine subscription engine crm subscriber place order pertinent subscription giving call call centre agent turn place order customer care module subscription engine integrated idea crm system using silent login feature customer care module subscription engine internally invoke http interface exposed subscription engine subscription engine channel subscription also discovered channel wherein respective channel application need integrate standard http interface exposed subscription engine charging layer subscription engine applying rating requested subscription service initiate charging request charging layer fulfillment following type request fetch balance debit request credit request ucs charging layer realized via ucs component act abstraction layer charging gateway top multiple in hide integration complexity subscription engine directly interacting multiple in subscription engine interact via ucs fulfill mentioned functionality ucs expose standard http interface subscription engine invoked real time charging subscriber pertinent subscription service subscription engine provide adjustment code credit debit request ucs turn provide inject adjustment code drs later used bs downstream system like ra r etc accounting settlement reconciliation purpose subscriber profile repository subscription engine fetch subscriber profile subscriber profile repository relevant performing following task validation based subscriber profile pertinent requested subscription update subscriber subscription profile unified user profile subscriber profile repository realized via uup component act centralized subscriber profile repository idea sdp ecosystem following task performed subscription engine uup fetch subscriber profile subscription engine fetching following subscriber detail uup request pertinent subscription basic profile v prepaid flag v circle id v status v category v lob port port se perform following validation subscription request subscriber subscriber profile whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel update subscription profile also se update subscriber profile fulfillment subscription request subscription engine following scenario subscription profile updated subscription engine uup activation subscription renewal subscription deactivation active grace grace suspension suspension active grace active note subscription service subscriber deactivated subscription service need deactivated subscriber deleted uup integration layer subscription engine successful charging push request integration layer async mechanism provisioning subscription subscriber network element like hlr rim server postpaid billing system viz bscs ix also subscription engine fetch provisioning related information nsms provisioning related information found uup eai integration layer realized via eai system already exists idea eco system leveraged subscription engine solution provisioning hlr rim server postpaid billing system bscs ix hlr provisioning specific set service mentioned requires hlr provisioning life cycle management subscription subscriber gprs blackberry ring back tone miss call alert select call pre tone hlr provisioning approach existing hlr provisioning approach prepaid postpaid described postpaid circle prepaid ericsson circle subscription engine currently us ivsm component channel provisioning subscription service bscs postpaid subscriber hlr ivsm component accepts parameter viz appsource requestcode circle id fulfilling provisioning request note app source request code provided idea vendor ivsm fetch detail pertinent bscs viz sn code network type flag history table name etc based appsource requestcode circle id based activation deactivation request following validation done ivsm whether subscriber active bscs b requested service currently inactive activation request active deactivation request c whether service assigned current rate plan network related service hlr provisioning required bscs forward provisioning request mediation turn activate service subscriber hlr prepaid telcordia circle currently telcordia circle hlr provisioning done manually file containing list msisdns subscription service need activated hlr provided operation team e part operational activity considering existing approach longer provisioning cycle require manual intervention provisioning circle following unified approach taken hlr provisioning prepaid postpaid hlr provisioning approach prepaid new approach subscription engine push provisioning request eai layer using xml jms turn provide request mediation comptel il using xml jms based service comptel il fire corresponding mml command hlr subscription engine fetch provisioning related information required hlr provisioning uup since data populated uup subscriber lag one day subscription engine fetch provisioning related parameter nsms bcv dump real time note scenario nsms live certain circle provisioning specific parameter fetched hlr view pic postpaid post transformed scenario subscription engine send hlr provisioning request eai layer turn provision subscriber requested subscription bscs ix turn forward request comptel mediation hlr provisioning depicted figure pic rim provisioning prepaid rim server provisioning blackberry service handled comptel il interface comptel il service provisioning first hlr rim server hence hlr rim provisioning fulfilled part single request initiated subscription engine comptel il also maintains provisioning consistency across hlr rim server e provisioning rim server fails comptel il also de provision service hlr pic postpaid post transformation scenario subscription engine push request eai layer provisioning blackberry service subscriber rim server pic bscs ix provisioning scenario bscs ix provisioning required pertinent subscription cater postpaid charging model subscription service various postpaid charging model mentioned monthly rental without pro rating monthly rental pro rating advance rental event charging mentioned scenario requires provisioning bscs ix tagging requested subscription subscriber cater monthly advance rental charging model subscription engine integrate eai layer async mechanism using xml jms subscription subscriber provisioning bscs ix eai layer turn forward request bscs ix using xml jms turn send response back subscription via eai layer pic provisioning layer subscription engine initiate provisioning request successful charging system application cm va application rd party content provider responsible delivery content service involve provisioning subscription service cm deployed idea sdp ecosystem also take care provisioning postpaid billing system viz bscs cm provisioning subscription engine initiate subscription provisioning request subscriber towards cm successful charging using soap http protocol cm expose standard web service following scenario towards subscription engine purchase subscription cancel subscription renew subscription va application rd part content provider subscription engine initiate subscription provisioning request subscriber towards va rd part content provider successful charging using soap http http protocol va rd part content provider expose standard interface towards subscription engine interface exposed vary cp cp hence taken care migration subscription service bscs provisioning scenario bscs provisioning required pertinent subscription cater postpaid charging model subscription service various postpaid charging model mentioned monthly rental without pro rating monthly rental pro rating advance rental event charging mentioned scenario requires provisioning bscs tagging requested subscription subscriber cater monthly advance rental charging model subscription engine currently us ivsm provisioning channel provision subscription subscriber bscs async mechanism flow depicted pic subscription engine se push provisioning request ivsm using db link turn insert record ivsm database ivsm component accepts parameter viz appsource requestcode circle id fulfilling provisioning request ivsm fetch detail pertinent bscs viz sn code network type flag history table name etc based appsource requestcode circle id based activation deactivation request following validation done ivsm whether subscriber active bscs b requested service currently inactive activation request active deactivation request c whether service assigned current rate plan successful validation finally ivsm provision subscription subscriber bscs via ism flow leveraged sdp subscription engine solution provision subscription subscriber bscs hlr provisioning pre transformed scenario postpaid postpaid subscription engine use ivsm channel hlr provisioning used currently rim provisioning postpaid pre transformed scenario subscription use ivsm channel provisioning subscriber blackberry subscription service rim server pic bs system subscription engine push generated cdr various bs system via mediation responsible revenue subscription status reconciliation revenue settlement content partner postpaid rating charging generating adhoc report based sdp subscription engine generated cdrs detail provided sdp bs integration document following bs system consumer cdrs revenue assurance system based cdrs generated subscription engine ra system generate various kpi report like revenue reconciliation subscription status reconciliation subscriber subscription service definition reconciliation etc detail provided sdp bs integration document revenue settlement system based cdrs generated subscription engine r generate partner settlement report along generation advise invoice provided content provider validated advise generated revenue settlement system business intelligence based cdrs generated subscription engine bi system generate adhoc report required idea business technical team analytics purpose also bi generate segment required campaign pertinent subscription postpaid billing system va subscription service need tagged postpaid subscriber postpaid billing system rental based charging rental based service postpaid billing system rating charging non rental based service se generate pre rated cdrs provided postpaid billing system viz bscs ix via mediation based transformed cdrs provided mediation postpaid billing system bscs ix appropriate charging transaction va subscription service subscription cycle multiple day configured bscs va subscription service whose subscription cycle le day subscription engine generate pre rated cdrs treated event cdrs postpaid billing system subsequently transaction presented itemized section subscriber invoice filtering logic applied mediation end cdrs rental based charging forwarded postpaid billing system rating charging mediation cdrs generated subscription engine pushed mediation turn forward cdrs downstream bs system revenue assurance system revenue settlement system business intelligence mediation apply appropriate filter logic cdrs along required cdr transformation format acceptable postpaid billing system viz bscs ix note detail se bs integration captured consolidated sdp bs integration document finalized subscription engine subscription engine consist multiple internal component module mentioned responsible form comprehensive subscription engine solution providing box capability discovery layer subscription engine core service configuration module rating engine module reporting engine module logger customer care module monitoring system discovery layer layer responsible intercepting request various channel pertinent subscription e act request adaptor component subscription engine system expose subscription engine standard http interface channel forward request subscription engine subscription engine core form heart subscription engine wherein play vital role fulfillment subscription specific request handling like activation deactivation renewal grace suspension content scheduler content fetch deliver sending notification provisioning rating initiate charging etc many internal component mentioned product overview section document service configuration subscription engine administrator create configure subscription service using service configuration web based ui integral module subscription engine capability provide role based access right defined set user part subscription service configuration system administrator define basic service definition rating definition corresponding validity usage behavior grace suspension period definition configuration cp url provisioning well content fetch deliver configuration notification message various event scenario complex business model like combo pack rating engine subscription engine contains embedded rating engine module responsible applying rate subscription service requested subscriber based subscriber balance turn handle low negative balance scenario case prepaid postpaid impose base price requested subscription service based rate imposed corresponding validity usage subscription engine initiate provisioning request towards cm va application rd party content provider reporting engine reporting engine module form integral part subscription engine solution responsible generating standard report box pertinent subscription adhoc report generated bi system currently exists icl eco system list report need generated provided icl business technical team stake holder also reporting module capability provide role based access user generating viewing modifying report logger subscription engine logging capability various severity level log task executed fulfillment subscription request following type log written subscription engine component transaction log cdrs predefined format agreed idea error log request log debug log customer care module subscription engine customer care module integrated idea crm system using silent login feature facilitate call centre agent handle customer query complaint view transaction customer care screen also apply various filter different attribute view specific transaction also help call centre agent place activation deactivation order behalf subscriber pertinent subscription monitoring subscription engine component capability generating snmp based alert agent deployed system subscription engine component hosted also capability define mib accessed using snmp protocol subscription engine product provides box monitoring system known net alert provides user friendly dash board display health system real time subscription engine feature following key feature centralized subscription engine supported icl va subscription service serve centralized subscription engine va subscription service icl ecosystem subscriber subscription life cycle management conversion subscription request different channel unified standard format e subscription engine expose standard interface invoked request pertinent va subscription maintaining rating definition apply rating based balance subscriber va subscription service initiating charging request towards via ucs prepaid support low balance handling scenario various charging model viz step charging n x charging initiate provisioning request subscription service subscriber following system hlr postpaid billing system internal application rim server ucse third party cp creation configuration administration subscription service generation standard report pertinent va subscription content fetch deliver mechanism facilitate subscriber query resolution pertinent content delivery sending following type notification subscriber taking consent subscriber purchase subscription b taking consent subscriber renewal c sending acknowledgement acceptance subscription request sending appropriate notification message case error success pertinent subscriber subscription request customer care handling complaint resolution transaction viewing subscription specific order viz activation deactivation suspension pertinent va subscription monitoring system generating proactive alert logging capability various log level trouble shooting product overview b platform overview already content aggregator portal management platform b group several mobile operator worldwide b best class vintage platform proven reliability security man year development effort spent date comprehensive mobile va platform providing possibility across stk sm wap mm web ivr backed strong crm reporting capability pic b platform provides extensive set tool enable task needed create operate complete digital content marketplace among main feature short code management service delivery content aggregation content management portal management browsing downloading billing enhanced reporting business intelligence campaign management tool promotion list subscriber management subscription management system monitor queue monitor net alerter simulator b subscription manager overview b subscription manager core component b platform manages activation subscription service ii subscriber list management per service iii activation renewal billing based service pricing configuration iv deactivation service subscriber request automated basis v handling business logic process facilitates host necessity subscription offer high value operator well subscriber benefit follows high arpu realization operator subscriber engagement leading retention loyalty upfront payment user service provider low cost availing service user delight type service offering sent directly mobile without user initiating request everyday one time activation request required equally important business model followed model allow addressing different set user market b subscription manager live various billing model monthly pricing r per month r per month etc weekly pricing r per week daily pricing r per day customized business case per requirement high level overview solution provided pic highly flexible configurable component allows charging pre defined amount specified duration recurrent basis service multiple pricing billing configuration configurable subscription logic renewal time period everyday every day every day every day etc auto renewal one time charging configuration configurable alert per day per week alert per day alert per day alert x service per week etc subscription engine definition allows charging pre defined amount specified duration recurrent basis service text wap web ivr ussd mm based subscription service configured multiple level service powered flexible robust scalable high availability architecture many configurable plug play module available integration external network element business logic support multiple content type channel integrated charging gateway protocol real time comprehensive detailed reporting backed reliable monitoring tool interface focus user experience centralized subscription mechanism ensuring proper communication global stop check keywords vernacular service provisioning avoid spamming external content provider innovative model eat sm service unlimited txt multiple pricing option daily weekly monthly subscription etc flexible charging multiple price point partial charging operator circle wise charging product feature functionality b subscription manager consists number feature help managing optimal delivery service also help managing customer detailed description feature follows subscription manager gui pic user management interface user management authentication feature provides administrator ability identify control state user logged system b ui loaded enhanced security constraint user login basis easy maintain user group individual specific permission based role user like internal external third party user pic user creation form process interface provides user management functionality add edit user profile time user creation specific detail filled admin user also use update profile pic subscription service creation service created defined process involves following step keyword configuration list creation subscriber management system message configuration charging configuration content source configuration subscription service message schedule push routing configuration feature se number feature go making service live demand number service definition configuration platform level configuration carried though b subscription engine list described bulk short code keyword configuration allows create modify multiple keywords service detail operator circle short code one go caching configuration premium service framework provides object manager configure timer interval based content caching allows configuration timer interval caching content feature enhance response time service dependent rd party content provisioning suffix management support suffix management allows provisioning certain service like chat based service sm suffix allows management session two user platform provides interface configure suffix specific keywords used managed service keyword versioning facility keyword versioning facility premium service framework allows managing multiple stk version segregated various zone upgrade provides strong feature manage stk service identified different time warp facility also help differentiated crm management different stk service e g allows track traffic different version stk service sm character limit management sm character limit management configuration feature restricts length response message avoids network congestion caused due unwanted lengthy response variety keywords feature allows setting character limit keyword based business requirement service content delivery feature alert sent configurable service time period e g news service alert per day pm joke service alert per day etc content fetch via internal external cm simple complex configuration supported e g configuration done service operator circle giving flexibility give different logic service per circle integrated network component provide subscription service like mca gprs subscription rbt etc se charging capability b subscription manager charging capability based bos buongiorno online service billing bos capable facilitating charging across different protocol including http salient feature bos described java based framework interface interface charge receiving request essentially method allow site application connect bos gateway business component collection module business purpose one module charge storing database request result business module indifferent operator example bos business module statistic module bos charging plug in implement different charging platform protocol connection different operator pic control monitoring module collect statistic information purpose monitoring correct functioning system charging protocol supported bos http psa ucap soap camel json http xml http twss http ipx bos gateway bos api capability bos buongiorno online service billing bos gateway platform allows application connect external operator billing bos api application connect bos gateway bos gateway platform bos api provides interface collection standard method perform transaction though bos gateway bos api created considering integration guide telecommunication operator buongiorno work taking account method require standardizing application present regional application call method bos api need perform billing operation requiring connection operator system feature bos plug in developed protocol different operator billing system built common database structure billing message single reporting interface go system provides common interface billing used web wap application facilitates managing billing communication promotes retrieving report connection information uniform way statistic follow common well defined interface statistic stored common database structure system enforces common process billing company using system provides common platform resulting faster development future providing reliable billing reporting system satisfies legal requirement many country operator must notified subscription external service performed customer characteristic modular system system configurable system provides failover always billing critical process company good performance provides comprehensive solution known billing platform structre bos pic charging lifecycle charging lifecycle follows following process check reserve charge commit rollback bos monitoring alarm instance main instance summary alarm runtime traffic agent cache uri detail tool instance config log operation grep tail vice versa last ticket tail process operation restart kill socket detail allow deny auto start etc runtime traffic status pic charging renewal feature allows multiple pricing charging configuration different service e g cricket alert r per week news alert r per month combination service allows different pricing configuration activation charge renewal charge e g r activation r renewal configurable renewal logic time period e g everyday every day every day every day etc auto renewal one time charging configuration support partial charging step charging grace suspension management subscription charging model one time sub model pic try buy configuration subscription service also offered free day form trial period trial day get exhausted se either send notification take consent subscriber se charge subscriber subscription service based service definition configuration configure subscription service price point trail period configure number day trial period expires configure actual price point service charged trial expires configure number day warning message sent pic auto renewal grace period configuration subscription service configured auto renewable based validity period subscriber subscription renewed successful charging charging fails renewing service subscriber subscription go grace period subscriber get service based service configuration even charging successful configured grace period subscriber subscription go suspension renewal duration configured day therefore user renewal date day start date renewal message configured sent user renewal complete grace period parameter day also configured inside xml specifies number day grace period expires user automatically suspended grace period expires pic partial charging subscription engine charge subscriber based available balance e without applying n x charging model sub price param specifies variable price point configured service sub endday param specifies number day service end corresponding price point sub warnday param specifies number day warning message sent corresponding price point mt price point indicates price point immediately billed sending welcome mt pic trigger based charging charging module associated various trigger generated system based status mt sent user event configured inside trigger object created inside repository etc trigger folder trigger also configured operate certain service specifying matching criterion pic pic subscription api pic sub unsub api enables rd party subscribe unsubscribe user service user detail api enables rd party external network element access particular user detail charging detail api enables rd party external network element access charging detail particular user send message api enables rd party external network element send text binary wap push message particular user group list service api provides information subscription service available system db sync api api enables sync data external network element content fetch api api enables content fetching rd party subscription engine reporting feature following report generated b subscription engine user management subscription report total charging report free content push feature total page view report content download total count report circle wise wap hit report wap circle hit revenue report content download zone wise report online real time interface view active subscription user activate new service user deactivate existing service user login management customer care customizable per requirement pic monitoring system maintenance b system monitor real time dashboard monitor live system show current status http interface pic net alerter b system equipped netalerter automatic alert tool sends configurable alert message service manager email sm feature monitor response configurable http request possibility configure script manage monitoring external server ping disk space mysql alive slave running etc standard get trap architecture similar snmp case failure alert raised delivered via sm list msisdn delivered via e mail possible configure several user group alert priority single check possible configure frequency check syntax analyze response http request html page parser pic product architecture pic product component subscription framework consists number component help managing complete lifecycle subscription service right service creation delivery desired service pic sandman discovery layer sandman piece software connects b telecom operator use numerous protocol sandman us asynchronous protocol interface messaging platform b various telco operator processing kind message data mainly short message service multimedia message service internal point view say sandman act gateway handling multitude internal thread ensure true asynchrony gateway split two side left right left side corresponds b interaction right side telco interaction structure broken three layer bottom layer communication layer corresponding osi level network transport layer also called sc middle codec layer corresponding osi level session layer also called m top layer layout layer called third level function level sc serial connector m message serializer provided plug in relatively sc plug in different m plug in covering plethora protocol standard proprietary input output sandman take place communication sc layer serial connector responsible making connection sandman external world information sent received byte stream sc layer usually split functional unit common buffer unit protocol unit mean byte written sc layer buffer unit subsequently passed protocol unit sent tcp ip packet sufficient number byte written layer avoids sending message byte written sc layer would cause extremely high number message sent congestion system sc layer always necessarily present m layer require functionality provided sc layer codec message serializer m level handle actual message draw extensive number protocol de serialize serialize message word translates byte message vice versa also level message modified manipulated necessary layer may broken functional unit finally layout layer third level actual transition one side sandman another take place word pass message b side sandman telco side vice versa since transition occur also used housekeeping function counting filtering routing message flow back forth system asynchronous way may number connection either side structure represented following diagram pic picture basic structure sandman worth noting may many connection short code one connection many short code sandman provides flexibility needed deal telco specific problem completely isolating b lside client bos b charging gateway b bos buongiorno online service billing subsriptions bos gateway platform allows application connect external operator billing subscription service bos api application connect bos gateway bos gateway platform bos api provides interface collection standard method perform transaction though bos gateway bos api created considering integration guide telecommunication operator buongiorno work taking account method require standardizing application present regional application call method bos api need perform billing subscription operation requiring connection operator system pic application module requires connecting bos gateway instance bos api therefore invokes method bos api bos api developed allow application access bos gateway example regional team might application contains method charge customer account method executes b call bos gateway connects local application operator appropriate protocol bos api communicates gateway using simple http protocol bos api provides bigger level abstraction mandatory use api possible way consist connecting directly gateway making http request directly using connection instance bos identified uri uri set operator example uri telco operator application needing communicate billing subscription purpose operator would use uri setup bos operator http xx xx xx xx port bos name operator note various server bos instance bos api regional application would invoke uri url one communicate operator billing subscription purpose premium server subscription manager premium server important integral component subscription management framework component take care application logic processing based defined rule service subscription service logic resides premium server far b concerned service far complex service based pull push strategy illustrated pic mobile originated message hereafter referred mo message arrive handset whereas mobile terminated message hereafter referred mt one finish consumer mobile device service accessed consumer using service number time shortcodes shortcodes telephone number four five digit provided operator order provide service number easy remember consumer sends short message keyword code known syntax text shortcode number hence platform receives known subset message require routing system direct message correct service application accordingly depending service one service component may operational furthermore one instance could exist order maximize performance apparent point view consumer instance mean entire implementation premium service framework finally say service minimal unit accounting billing purpose client entity request creation implementation service consumer may range mobile telecom operator company wishing launch product promote existing one even b helpful distinction service belongs one client client may many service furthermore client defined term billing revenue share service several logical client exist physical client entity aid billing list valid client defined standard dtd finally need make distinction single message service multi message service single message service classic service consumer familiar response depends purely mo sent consumer example would downloading service using one message multi message service hand far interactive also complex term routing response consumer mo dependent previous interaction consumer system mean necessary generate store user state used identifier incoming mo monitor progress consumer step multi part message example would trivia quiz game question answer message bounce back forth consumer system identical mo generate different response depending previous state generated process diagram illustration idea pic clearly see identical mo case generate different response system system record user state process subsequent message based modifies state message processed response sent order ready process next mo correct manner premium service framework architecture specifically designed handle complex routing demand made multi message framework streamlined breaking process sub set common task handled dedicated component engine sm renewal message delivery push service engine component produce message associated list scheduled sent using b standard list message interface engine also known scheduler engine jmailer engine although jmailer engine process scheduled message section describe complete process production delivery delivery procedure message produced common application simply changing producer application another premium following diagram show flow message starting database stored created scheduling xms gateway sandman route queue process shared application need deliver message using route component often configured process one country group country known region management purpose using independent queue component region country provides isolation use shared resource system shared resource shared route one region affect delivery production region every step component configures resource us resource allocated wherever needed scheduler scheduler component acquires message user database injects resulting job processed delivery queue list b need assigned cluster cluster name group scheduler node cluster attended one node node configured process message one cluster every push service engine one scheduling node every node configured produce job region scheduler periodically iterate list country fetch message pending produced node contain pre post module executer pre scheduling module software component associated message executed user fetched list production task post scheduling module software component associated message executed message produced final user message may delivered time granted called delivery production pre post module executer thread execute module notify main producer finished execution aborted timeout configured expires often minute slow module confirmed delay delivery list module associated delivery following schema show procedure pic see scheduler single scheduling module directly executed scheduler scheduler part main component detects message produced sign node identifier message ready query list obtain user receive produce job containing block user often referencing message delivered job inserted splitter queue entry point delivery procedure cron server scheduler cron name program enables user execute command script group command automatically specified time date timed event initiated b platform cron job used execute application module predetermined moment time cron daemon mean need started lie dormant required cron daemon wake every minute examines stored configuration file called crontabs check command may scheduled executed current time component functionality first time activation flow pic b gateway sandman b propriety solution internal gateway b platform process inbound sm request bound mt push form platform support major connectivity protocol smpp http cimd etc used sm mm wap push processor application processor component defines logic action keyword received via gateway case subscription route relevant keywords towards subscription module subscription module component core subscription manager manages information related subscription service particular user based defined business logic service activated activation date last billed date renewal date deactivation date also process activation deactivation request service also support check feature customer know existing active subscription service charging manager billing manager responsible bill user service activation renewal integrating operator billing mechanism system database cm information related user stored form list includes storage following respective service list activation date last billed date renewal date deactivation date cm store content database fetch external rd party url delivery engine responsible content delivery delivery engine receives request subscription module accordingly push content subscriber user content delivery flow pic additional component utilized content delivery described follows cron cron application layer trigger event send content push invokes subscription module processing subscriber list subscriber list table within database store information related user subscription service unique list within list subscriber information stored subscription engine use case prepaid subscription service via discovery channel subscriber request subscription service via different discovery channel viz sm mm ivr wap ussd web sd customer care sanchaya dialler call centre interface retail vtop black berry app store stk dstk etc request forwarded subscription engine request intercepting layer intercept multi lingual request multiple bearer transforms request unified format accepted subscription engine subscription activation sm pic subscriber request text based subscription purchase request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides subscription rate implemented initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber failure scenario diagram pic diagram pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine would write respective transaction log cdr sdp standard cdr format failure scenario charging failure scenario subscription engine initiate charging request towards via ucs ucs fails respond subscription engine retry charging configured number retries defined part service definition charging fails even configured number retries se generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition subscription engine generate cdr appropriate status code eg provisioning failed failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber subscription activation ussd diagram subscriber request text based subscription purchase request via ussd messaging gateway messaging gateway forward request ussd application using http protocol ussd application forward subscription request subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides subscription rate implemented initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message failure scenario diagram pic diagram pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine would write respective transaction log cdr sdp standard cdr format failure scenario charging failure scenario subscription engine initiate charging request towards via ucs ucs fails respond subscription engine retry charging configured number retries defined part service definition charging fails even configured number retries se generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition subscription engine generate cdr appropriate status code eg provisioning failed failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber subscription activation wap pic subscriber request text based subscription purchase request via wap portal subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides subscription rate implemented initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber failure scenario diagram pic diagram pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine would write respective transaction log cdr sdp standard cdr format failure scenario charging failure scenario subscription engine initiate charging request towards via ucs ucs fails respond subscription engine retry charging configured number retries defined part service definition charging fails even configured number retries se generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition subscription engine generate cdr appropriate status code eg provisioning failed failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber subscription activation web pic subscriber request text based subscription purchase request via web site web gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides subscription rate implemented initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber failure scenario diagram pic diagram pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine would write respective transaction log cdr sdp standard cdr format failure scenario charging failure scenario subscription engine initiate charging request towards via ucs ucs fails respond subscription engine retry charging configured number retries defined part service definition charging fails even configured number retries se generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition subscription engine generate cdr appropriate status code eg provisioning failed failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently engine send successful subscription purchase notification subscriber subscription activation ivr diagram pic subscriber request text based subscription purchase request via ivr subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides subscription rate implemented initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber failure scenario diagram pic diagram pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine would write respective transaction log cdr sdp standard cdr format failure scenario charging failure scenario subscription engine initiate charging request towards via ucs ucs fails respond subscription engine retry charging configured number retries defined part service definition charging fails even configured number retries se generate cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition subscription engine generate cdr appropriate status code eg provisioning failed failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber subscription activation crm pic subscriber request text based subscription purchase request via crm subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides subscription rate implemented initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber failure scenario diagram pic diagram pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine would write respective transaction log cdr sdp standard cdr format failure scenario charging failure scenario subscription engine initiate charging request towards via ucs ucs fails respond subscription engine retry charging configured number retries defined part service definition charging fails even configured number retries se generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition subscription engine generate cdr appropriate status code e g provisioning failed failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber subscription activation obd pic obd place call subscriber regarding various subscription available user subscriber request subscription service purchase bound dialer obd obd sends subscription request behalf subscriber subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber failure scenario diagram pic diagram pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine would write respective transaction log cdr sdp standard cdr format failure scenario charging failure scenario subscription engine initiate charging request towards via ucs ucs fails respond subscription engine retry charging configured number retries defined part service definition charging fails even configured number retries se generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition subscription engine generate cdr appropriate status code eg provisioning failed failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber subscription activation sanchaya pic sanchaya place call subscriber regarding various subscription available user subscriber request subscription service purchase sanchaya sanchaya writes response file sends file sd team sd team uploads file ui bulk provisioning gui sends ftp file ftp location scheduler fetch ftp file ftp location scheduler fetch one record time ftp file forward subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber subscription activation vms voucher management system collection voucher subscriber purchase voucher vms pic voucher management system collection voucher subscriber purchase voucher vms vms forward service request subscription engine handing request subscription engine vms perform pin validation subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber note scenario pin validation required respective system responsible pin validation handing request subscription engine e subscription engine perform pin validation maintain pin system renewal subscription service subscription engine would facilitate renewal based various parameter like count duration volume subscription engine would set auto trigger within internal system system would raise internal trigger period service subscription reaching end pre renewal message configurable also number day need sent prior also need configurable trigger might also come external application system usage get exhausted subscription renewal based validity subscription service validity period system would raise internal trigger renewal service period service subscription reaching end pic subscription engine fetch record renewal based validity subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides subscription rate implemented initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber failure scenario subscriber fails renew subscription service within validity period subscription service status changed grace period grace period application continues deliver content configured number day pic failure scenario charging failure scenario subscription status active period grace period subscription engine initiate charging request towards via ucs ucs fails respond subscription engine retry charging configured number retries defined part service definition charging fails even configured number retries se update user state grace mode continue content delivery configured number day subscription engine update subscriber subscription status grace mode se database subscription engine generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber update subscription service grace mode status sdp uup component subscription engine send unsuccessful subscription purchase notification message gateway subsequently subscription engine send unsuccessful subscription renewal subscriber note case blackberry subscription engine responsible suspending subscriber blackberry service rim server subscriber blackberry service subscription go grace state initiating suspension provisioning request towards rim server renewal subscription based usage exhaustion subscription service validity period usage limitation subscription service validity period utilized usage limitation subscription engine notifies subscriber take consent renewal subscription service pic application notifies subscription engine regarding subscriber whose subscription service usage exhausting subscription engine notifies subscriber take consent renewal subscription service subscriber opts renewal subscription service subscription engine fetch rating charge subscription service information pertinent subscriber se database subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides subscription rate implemented initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing update subscription service renewal status sdp uup component assign subscription service subscriber subscription engine send successful subscription renewal notification message gateway subsequently subscription engine send successful subscription renewal subscriber renewal service validity subscription service validity period usage limitation subscription service validity period usage get exhausted subscriber opt additional usage wherein subscription service validity still remains scenario respective application responsible sending trigger se wherein se charging notify application system responsible content delivery addition usage e g subscriber purchased subscription service st march monthly validity e renewal pending st april allowed content download subscriber exhaust usage within day subscriber opt additional service usage renewal still happen st april pic subscriber usage get exhausted expiry validity subscriber opting service renewal usage addition request forwarded application application send trigger subscription engine regarding service renewal subscriber usage addition subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine perform validation pertinent service renewal based subscriber profile subscription engine would fetch subscription definition includes rating information requested service subscription engine hit via ucs fetch balance subscriber se subsequently initiate charging request towards via ucs failure apply retry policy configured service profile successful charging subscription engine sends renewal service notification request application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date update se transaction write audit log form cdr charging transaction edr event based processing subscription engine send successful service renewal notification message gateway subsequently messaging gateway send notification subscriber renewal service validity subscription service validity period usage limitation subscription service validity period usage get exhausted subscriber opt additional usage associated validity scenario respective application responsible sending trigger se wherein se charging notify application system responsible content delivery addition usage associated validity e g subscriber purchased subscription service st march monthly validity e renewal pending st april allowed content download subscriber exhaust usage within day subscriber opt additional service usage associated validity day next renewal happen th april note flow scenario similar flow mentioned section except change next renewal date subscription service grace mode subscriber fails renew subscription service within validity period subscription service status changed grace period grace period application continues deliver content configured number day pic subscription engine fetch subscriber whose subscription service grace mode subscription engine would following validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing update subscription service renewal status sdp uup component assign subscription service subscriber subscription engine send successful subscription renewal notification message gateway subsequently subscription engine send successful subscription renewal subscriber note case blackberry subscription engine responsible suspending subscriber blackberry service rim server subscriber blackberry service subscription go grace state initiating suspension provisioning request towards rim server failure scenario charging failure scenario grace mode suspension mode subscriber fails renew subscription service within grace period subscription service status changed suspension period suspension period application stop deliver content pic subscription engine initiate charging request towards via ucs ucs fails respond subscription engine retry charging configured number retries defined part service definition charging fails even configured number retries se update user state grace mode suspension mode stop content delivery subscription engine generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber update subscription service suspension mode status sdp uup component subscription engine send unsuccessful subscription purchase notification message gateway subsequently subscription engine send unsuccessful subscription renewal subscriber note case blackberry subscription engine responsible suspending subscriber blackberry service rim server subscriber blackberry service subscription go suspend state initiating suspension provisioning request towards rim server subscription service suspension mode subscriber fails renew subscription service within suspension period subscription service status changed deactivation subscription engine deactivates service subscriber update database deactivation status suspension deactivation mode pic subscription engine try renew subscription service suspended mode configured number day suspended period subscription service get exhausted subscription engine initiate deactivation subscription service subscriber subscription engine subscription deactivation request syntax validation subscription engine sends subscription deprovisioning request application subscription engine update subscriber subscription deactivation status se database update subscription service deactivation status sdp uup component subsequently subscription engine send subscription service deactivation notification subscriber note case blackberry subscription engine responsible suspending subscriber blackberry service rim server subscriber blackberry service subscription go suspend state initiating suspension provisioning request towards rim server subscription service deactivation mode subscription service deactivation mode subscription service stopped subscriber request renewal service would treated new request different scenario subscription service deactivation mode suspension mode deactivate mode discussed previous use case subscriber fails renew subscription service within suspension period subscription service status changed deactivation subscription engine deactivates service subscriber update database deactivation status opt deactivation subscriber explicitly request opts deactivation subscription service subscription engine deactivates subscription service subscriber opt deactivation subscription pic subscriber sends subscription service deactivation request via sm short code keyword messaging gateway turn forward request subscription engine subscription engine would follow validation deactivation request syntax valid subscriber already subscribed requested service subscription engine would send acknowledgement subscriber subscription engine sends subscription service deprovisioning request application subscriber subscription engine update deactivation status subscription service subscriber database subscription engine generates cdr process se update subscriber subscription status deactivated uup subscription engine send successful deactivation subscription notification subscriber business model subscription subscriber request subscription service via various discovery channel subscription engine validates request apply rate subscription service subscription engine would fetch subscription definition includes rating information requested service hit via ucs fetch balance subscriber various business model applied deciding rate subscription service step charging micro charging trigger charging subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs step charging subscription service set step charging rate available depending subscriber balance step charge value decided example news subscription base rate news subscription r subscription engine defines step charging follows sl rate day valid alert depending balance subscriber step charge decided explained case subscriber balance r threshold value r charging amount se opt st rate ie r subscription service available day alert case subscriber balance r threshold value r charging amount se opt st rate ie r subscription service available day alert case subscriber balance r threshold value r charging amount se step charge defined amount se activate subscription service micro charging subscription engine would fetch subscription definition includes rating information requested service fetch balance subscriber subscriber low balance subscription engine us n x formula compute subscription charging rate service n balance subscriber x threshold limit example subscriber balance r per trai regulation threshold limit r subscription engine deduct r ie n x subscription charge trigger charging event based subscription service request ex subscription world cup subscription engine us n x formula compute subscription charging rate service n balance subscriber x threshold limit example subscription service rate r subscriber balance r per trai regulation threshold limit r subscription engine deduct r e n x subscription charge provide service configured day step charging pic subscriber request text based subscription purchase request via sm discovery channel messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription service subscription engine would decide step charging discussed scenario note balance check charging performed integrating necessary charging element ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber micro charging pic subscriber request text based subscription purchase request via sm discovery channel messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se apply rate based available balance n x charging subscriber engine deducts threshold value x subscription service rate user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber trigger charging pic trigger charging event based subscription available subscriber preconfigured day subscription engine initiate provisioning subscription service request preconfigured day subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date se writes transaction log write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber fetch deliver subscriber subscription successfully provisioned subscription service wherein subscription engine fetch deliver content based various metric also subscription engine capability cache content instead hitting internal external application fetching content delivering content subscriber subscription engine fetch content predefined scheduled time deliver subscriber subscription engine also manage counter metric content delivery log corresponding transaction pic subscription engine periodically fetch application specific content writes file subscription engine fetch subscriber content delivered subscription engine update content delivery status subscriber subscription engine delivers application specific content subscriber via messaging gateway failure scenario content fetch failure scenario case subscription engine fails fetch application specific content generate alert subscription engine retry fetching application specific content configured number time failure scenario content delivery failure scenario subscription engine fails deliver application specific content subscriber retry delivering application specific content configured number time subscriber normal content delivery pic subscription service purchased successfully responsibility application deliver content directly subscriber application fetch list subscriber content need delivered application deliver content subscriber based pre defined schedule targeted usage subscriber usage get exhausted application send usage exhaustion notification subscription engine subscription engine turn send renewal notification subscriber try buy pack subscription service available try buy pack initially pack available free subscriber end try buy trial pack subscriber engine apply rate subscription service pic subscriber request subscription purchase via sm messaging gateway subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would sends request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine update try buy pack se database write audit log form cdr charging transaction edr event based processing send sm notification user configured message update try buy subscription pack sdp uup component charge user end try buy pack end try buy trial pack subscriber engine apply rate subscription service subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date update subscription service status sdp uup component assign subscription service subscriber write audit log form cdr charging transaction edr event based processing send sm notification user configured message application delivers content subscriber successfully combo pack combo pack combination two service combined price activation defined combo service definition combined price combo defined complete step case activation type combo pack available combo pack combo pack combo pack combo pack combo pack combo combination two service maximum combined price activation defined combo service definition combined price combo defined complete step case activation distribution alert validity user based user balance corresponding price validity matrix provided product manager renewal process case independent combo configuration rather follows renewal process individual service present combo however priority definition provided decides service service present combo shall renewed first lower priority service get renewed higher priority service get renewed e renewal always based longest running service pic subscriber request combo pack subscription purchase request via messaging gateway subscription engine sm based discovery channel subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested combo service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides subscription rate implemented initiate charging request towards via ucs combo pack service available service specific usage available specific valid period distribution alert validity user according user balance price validity matrix configured combo service definition example assume combo pack combination joke astro various step charge available follows charged price r joke alert astro alert validity day joke day astro charged price r joke alert astro alert validity day joke day astro successful charging subscription engine sends subscription service provisioning request available service part combo pack respective validity period data usage related information respective application subscription service provisioning fails credit back money supported else mark record manual reconciliation write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber scenario renewal renewal executed according priority defined combo definition lower priority service renewed higher priority service combo renewed e renewal based longest running service validity content alert distribution according matrix configured single service combo definition user activated combo user balance belongs step defined combo definition matrix user balance le last step defined matrix user denied service distribution usage validity user also according user balance price validity matrix definition combo user already subscribed one single service part combo effect activation combo user receive alert combo already subscribed single service assuming combo pack service combosubpack content validity x combosubpack content validity e combo sub pack higher priority combo sub pack depending balance subscriber combo sub pack renewed higher subscription rate example rate combo sub pack r alert validity day r alert validity day r alert validity day rate combo pack r alert validity day r alert validity day r alert validity day subscriber renewed r combo sub pack higher priority renewed higher amount combo sub pack renewed balance amount combo sub pack renewed r combo sub pack renewed r r r r step charge valid r subscription engine check priority service sub pack service sub pack service pack higher priority pack renewed first else pack lower priority service renewed higher priority service combo renewed subscription engine fetch record subscriber renew pack subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance higher priority sub pack get highest amount renewed lower priority sub pack get balance successful charging subscription engine sends subscription service provisioning request available service part combo pack respective validity period data usage related information respective application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber combo pack combo combination two service maximum combined price activation defined combo definition combined price combo defined complete step case activation distribution alert validity user according user balance price validity matrix provided product manager renewal process case dependent combo configuration renewal process individual service present combo distribution validity content alert renewal defined renewal price validity matrix combo pic subscriber request combo pack subscription purchase request via messaging gateway subscription engine sm based discovery channel subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides subscription rate implemented initiate charging request towards via ucs combo pack service available service specific content available specific valid period example assume combo pack combination joke astro various step charge available follows charged price r joke alert astro alert validity day joke day astro charged price r joke alert astro alert validity day joke day astro subscriber balance r subscription service r available subscriber successful charging subscription engine sends subscription service provisioning request available service part combo pack respective validity period data usage related information respective application subscription service provisioning fails credit back money supported else mark record manual reconciliation write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber scenario renewal renewal case executed according price validity matrix configured combo definition validity content alert distribution according matrix configured combo single service definition assuming combo pack service depending balance subscriber combo pack renewed example rate combo pack r alert validity day r alert validity day r alert validity day subscriber renewed r st subscription rate charged service subscription engine fetch record subscriber renew combo pack subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance subscription rate decided successful charging subscription engine sends subscription service provisioning request combo pack validity period data application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber combo pack combo combination two service separate price validity activation defined service combo definition distribution alert validity user according user balance price validity matrix field ops team well dependent percentage ratio defined service definition renewal process case also dependent combo configuration rather renewal process individual service present combo charged price validity j combo charg alert ed price example assume combo pack combination joke astro percentage ratio defined service definition e joke service given preference astro given various step charge available follows charged price r joke alert validity day charged price r joke alert validity day charged price r astro alert validity day charged price r astro alert validity day subscriber balance r joke service given preference astro given preference e r charged joke service r charged astro pic subscriber request combo pack subscription purchase request via messaging gateway subscription engine sm based discovery channel subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides subscription rate implemented initiate charging request towards via ucs combo pack service available service specific content available specific valid period distribution alert validity user according user balance price validity matrix field ops team well dependent percentage ratio defined service definition explained example successful charging subscription engine sends subscription service provisioning request available service part combo pack respective validity period data usage related information respective application subscription service provisioning fails credit back money supported else mark record manual reconciliation write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber scenario renewal renewal case executed according renewal price validity configured combo definition validity content alert distribution according matrix configured combo definition single service definition charged price validity j alert assuming combo pack service combosubpack content x validity x combosubpack content validity e combo sub pack higher percentage priority combo sub pack depending balance subscriber combo sub pack renewed higher subscription rate pic subscription engine fetch record subscriber renewal combo pack subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance rating rule based allocation percentage ratio defined se successful charging subscription engine sends subscription service provisioning request available service part combo pack respective validity period data usage related information respective application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber combo pack combo combination two service separate price validity activation defined service combo definition distribution alert validity user according user balance price validity matrix field ops team well dependent parent child relationship percentage ratio defined service definition renewal process case also dependent combo configuration rather renewal process individual service present combo charged price validity j combo alert example assume combo pack combination joke astro parent child relation percentage ratio defined service definition e joke service parent given preference astro child given various step charge available follows charged price r joke alert validity day charged price r joke alert validity day charged price r astro alert validity day charged price r astro alert validity day subscriber balance r joke service given preference astro given preference ie r charged joke service r charged astro pic subscriber request combo pack subscription purchase request via messaging gateway subscription engine sm based discovery channel subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides subscription rate implemented initiate charging request towards via ucs combo pack service available service specific content available specific valid period distribution alert validity user according user balance price validity matrix field ops team well dependent parent child relation percentage ratio defined service definition explained example successful charging subscription engine sends subscription service provisioning request available service part combo pack respective validity period data usage related information respective application subscription service provisioning fails credit back money supported else mark record manual reconciliation subscription engine applies parent child tagging based service definition write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber scenario renewal renewal case executed according renewal price validity configured combo definition validity content alert distribution according matrix configured combo definition single service definition user activated combo user balance belongs step defined combo definition matrix user balance le last step defined matrix user denied service distribution content alert validity user also according user balance price validity matrix definition combo user already subscribed one single service part combo effect activation combo user receive alert combo already subscribed single service subscription engine fetch record subscriber renewal combo pack subscription engine validates combo sub pack child parent combo sub pack child need validate parent already activated subscribed subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance rating rule based parent child relation allocation percentage ratio defined se successful charging subscription engine sends subscription service provisioning request available service part combo pack respective validity period data usage related information respective application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber provisioning subscription service based type service subscription service need provisioned following element application responsible delivering content viz cm rd party cp etc network element e g gprs blackberry mca registered hlr additionally blackberry service also provisioned rim server rbt provisioning ring back tone rbt service need provisioned hlr subscription engine sends request rbt service provisioning eai layer eai layer forward rbt provisioning request hlr via comptel il interface pic subscriber request rbt subscription purchase request via sm first forwarded rbt application application specific validation rbt application successful validation forward request subscription engine subscription engine would follow validation requested service valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id hlr provisioning information subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile rbt subscription request need provisioned registered hlr subscription engine sends request rbt service provisioning eai layer eai layer forward rbt provisioning request hlr via comptel il interface subscription engine poll response ivsm history table pertinent charging provisioning successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date subscription engine updated rbt subscription service status subscriber write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber failure scenario pic scenario uup hlr provisioning information subscription engine fetch provisioning related information required invoke comptel il interface either following system nsms uup uup hlr provisioning information case uup hlr provisioning information eai layer forward request nsms subscription engine sends request eai layer fetch provisioning information eai layer forward request uup uup hlr provisioning information eai layer forward request nsms provisioning information send subscription engine nsms via eai layer scenario subscription provisioning fails rbt application subscription engine sends request provisioning rbt application fails subscription engine retry provisioning request application configured number retries defined part service definition configured number retrial fails subscription engine push provisioning request rbt application retry queue pre tone provisioning pre tone service need provisioned hlr subscription engine sends request pre tone service provisioning eai layer eai layer forward pretone provisioning request hlr via comptel il interface pic subscriber request pre tone subscription purchase request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid pre tone application subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id hlr provisioning information subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile pre tone subscription request need provisioned registered hlr subscription engine sends request pre tone service provisioning eai layer eai layer forward pre tone provisioning request hlr via comptel il interface subscription engine poll response ivsm history table pertinent charging provisioning successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date subscription engine updated pre tone subscription service status subscriber write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber pic scenario uup hlr provisioning information subscription engine fetch provisioning related information required invoke comptel il interface either following system nsms uup uup hlr provisioning information case uup hlr provisioning information eai layer forward request nsms subscription engine sends request eai layer fetch provisioning information eai layer forward request uup uup hlr provisioning information eai layer forward request nsms provisioning information send subscription engine nsms via eai layer scenario subscription provisioning fails pre tone application subscription engine sends request provisioning pre tone application fails subscription engine retry provisioning request application configured number retries defined part service definition configured number retrial fails subscription engine push provisioning request pre tone application retry queue gprs provisioning subscriber request gprs subscription service subscriber provisioned ucs evolve gprs service pic subscriber request gprs service via sm message gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid ucse ucs evolve subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id hlr provisioning information subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine fetch subscriber balance subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides rate subscription initiate charging request towards via ucs note balance check charging performed integrating necessary charging element ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging gprs provisioning request send ucs evolved write audit log form cdr charging transaction edr event based processing subscription engine send successful gprs subscription purchase notification subscriber update gprs subscription service status sdp uup component assign subscription service subscriber pic failure scenario gprs provisioning fails ucs evolve subscription engine sends gprs provisioning request ucs evolve fails subscription engine retry gprs subscription provisioning ucse configured number retries defined part service definition configured number retrial fails subscription engine push gprs subscription request ucs evolve retry queue blackberry provisioning subscriber request subscription service blackberry subscription service provisioned hlr rim server pic subscriber request blackberry phone subscription purchase request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id hlr provisioning information subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile blackberry subscription request need provisioned registered hlr rim server subscription engine sends request blackberry provisioning eai layer eai layer forward blackberry provisioning request hlr rim server via comptel il interface il sends blackberry provisioning successful message subscription engine subscription engine updated blackberry subscription service successful status subscriber write audit log form cdr charging transaction edr event based processing send sm notification user configured message update blackberry subscription service status sdp uup component assign subscription service subscriber pic scenario uup hlr provisioning information subscription engine fetch provisioning related information required invoke comptel il interface either following system nsms uup subscription engine sends request eai layer fetch provisioning information eai layer forward request uup uup hlr provisioning information eai layer forward request nsms provisioning information send subscription engine nsms via eai layer scenario subscription provisioning fails rim server case subscription provisioning fails rim server failure message send subscription engine via il eai layer subscription engine retry provisioning request application configured number retries defined part service definition configured number retrial fails subscription engine push provisioning request retry queue appstore provisioning appstore collection application service provides subscription service valid subscriber appstore sends subscription request new added subscription subscription engine pic subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service charging notification app store receiving charging successful notification app store provide service subscriber callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber failure scenario pic failure scenario charging notification app store fails subscription engine sends successful charging notification app store fails subscription engine retry charging configured number retries defined part service definition charging fails even configured number retries se push notification request app store retry queue bulk subscription provisioning api application request subscription service bulk e g corporate subscription service request fetched one record time api forwarded subscription engine pic application invokes bulk subscription service request bulk api bulk api sends ftp file ftp location scheduler fetch ftp file ftp location scheduler fetch one record time ftp file forward subscription engine subscription engine necessary process log response file bulk subscription provisioning ui subscriber request subscription service gui request fetched one record time api forwarded subscription engine pic user selects subscription service file gui gui sends ftp file ftp location scheduler fetch ftp file ftp location scheduler fetch one record time ftp file forward subscription engine subscription engine necessary process log response file subscription service gprs subscriber request gprs subscription subscription need provisioned ucs evolve various gprs subscription service available subscriber follows pre charged gprs plan gprs plan change gprs daily pack pre charged gprs plan service plan come complimentary offer subscriber subscriber sends request pre charged plan subscription engine validates request received gprs plan change pre charge plan request received gprs pre charge plan se validates subscriber send plan change request earlier day repeated request subscriber gprs plan already changed day se reject subscription request gprs plan change subscriber sends request gprs plan change se validates subscriber send plan change request earlier day repeated request subscriber gprs plan already changed day se reject subscription request gprs daily pack subscription service available daily basis subscriber request pack se need check subscriber already send request day se sends gprs provisioning ucs evolve gprs plan change subscriber sends request gprs plan change se validates subscriber send plan change request earlier day repeated request subscriber gprs plan already changed day se reject subscription request pic subscriber request gprs plan change service via sm message gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid ucse ucs evolved subscriber already subscribed requested service subscription engine validates request received gprs plan change request received gprs plan change se validates subscriber send plan change request earlier day repeated request subscriber gprs plan already changed day se reject subscription request subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id hlr provisioning information subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides subscription rate implemented initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging gprs provisioning request send ucs evolved generates audit log form cdr charging transaction edr event based processing subscription engine send successful gprs plan change subscription purchase notification subscriber update gprs subscription plan status sdp uup component assign subscription service subscriber pic failure scenario gprs provisioning fails ucs evolve subscription engine sends gprs provisioning request ucs evolve fails subscription engine retry gprs subscription provisioning ucse configured number retries defined part service definition configured number retrial fails subscription engine push gprs subscription request ucs evolve retry queue pre charge gprs activation request pre charge plan complimentary subscription service available subscriber subscription engine validates request provision service ucs evolve pic pre charge gprs service available complimentary offer subscriber send pre charge subscription request subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid ucse ucs evolved subscriber already subscribed requested service subscription engine validates request received gprs plan change pre charge plan se validates subscriber send gprs request earlier day repeated request subscriber gprs plan already changed day se reject subscription request subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id hlr provisioning information subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel se send gprs provisioning request ucs evolve generates audit log form cdr charging transaction edr event based processing subscription engine send successful gprs pre charge subscription purchase notification subscriber update gprs subscription plan status sdp uup component assign subscription service subscriber pic failure scenario gprs provisioning fails ucs evolve subscription engine sends gprs provisioning request ucs evolve fails subscription engine retry gprs subscription provisioning ucse configured number retries defined part service definition configured number retrial fails subscription engine push gprs subscription request ucs evolve retry queue gprs daily pack subscription service available daily basis subscriber request pack se need check subscriber already send request day se sends gprs provisioning ucs evolve pic subscriber request gprs daily pack service via sm message gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid ucse ucs evolved subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id hlr provisioning information subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging successful charging gprs provisioning request send ucs evolved generates audit log form cdr charging transaction edr event based processing subscription engine send successful gprs pre charge subscription purchase notification subscriber update gprs subscription plan status sdp uup component assign subscription service subscriber usage consumption scenario pic ucs evolve sends notification usage consumption subscription engine subscription engine initiate gprs plan provisioning request ucs evolve ucs evolve send gprs provisioning success message subscription engine default gprs plan updated subscription engine update gprs subscription service sdp uup component assign subscription service subscriber subscription plan blackberry subscriber request subscription service blackberry phone subscription need provisioned hlr well rim server various subscription service request available subscriber follows blackberry plan change blackberry service change many subscription service available blackberry user service many plan option blackberry user opt following change subscription service change plan given service example service plan plan price r valid day plan price r day service b plan plan b price r valid day plan b price r valid day subscriber given opportunity change service service service b blackberry service change change plan plan plan b blackberry plan change blackberry plan change pic subscriber request blackberry plan change selected subscription service via sm message gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid subscription engine validates request received blackberry plan change selected subscription service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging success message send subscription generates audit log form cdr charging transaction edr event based processing subscription engine send successful blackberry plan change subscription notification subscriber update blackberry subscription plan status sdp uup component assign subscription service subscriber blackberry service change pic subscriber request blackberry phone subscription service change request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id hlr provisioning information subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile blackberry subscription service request need provisioned updated hlr rim server subscription engine sends request blackberry provisioning eai layer eai layer forward blackberry provisioning request hlr rim server via comptel il interface il sends blackberry provisioning successful message subscription engine subscription engine updated blackberry subscription service successful status subscriber write audit log form cdr charging transaction edr event based processing send sm notification user configured message update blackberry subscription service status sdp uup component assign subscription service subscriber failure scenario pic scenario uup hlr provisioning information subscription engine fetch provisioning related information required invoke comptel il interface either following system nsms uup uup hlr provisioning information eai sends request nsms subscription engine sends request eai layer fetch provisioning information eai layer forward request uup uup hlr provisioning information eai layer forward request nsms provisioning information send subscription engine nsms via eai layer scenario subscription provisioning fails rim server case subscription provisioning fails rim server failure message send subscription engine via il eai layer subscription engine retry provisioning request application configured number retries defined part service definition configured number retrial fails subscription engine push provisioning request retry queue subscriber life cycle management status active pic subscriber request text based subscription purchase request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine check subscriber status status active would continue process applying rate subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging failure apply retry policy configured service profile successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber status inactive subscriber status inactive following scenario subscriber ported deactivated subscriber requested service due reason request stored retry queue bucket mean time subscriber ported deactivated request retrieved retry bucket status subscriber already inactive request stored bulk pic subscriber request service stored retry queue bucket request retrieved forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine check subscriber status status inactive subscription engine generates edr event based processing subscription engine log response file scenario bulk request subscriber request service stored bulk request retrieved queue e fetch one record time forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine check subscriber status status inactive subscription engine generates edr event based processing subscription engine log response file note case blackberry subscription engine initiate blackberry service deprovisioning request subscriber towards hlr rim server status grace period pic subscriber request text based subscription purchase request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine fetch status subscriber status grace period would continue process applying rate subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active grace inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine hit via ucs fetch balance subscriber subscription engine apply rating rule service using following parameter subscriber balance rating information requested service calculates charging amount subscription service using n x formula n balance subscriber x threshold limit depending subscriber balance se decides charging rate subscription initiate charging request towards via ucs user sufficient balance activate apply low balance handling feature per configured service profile may fallback service micro charging subscription engine push subscription request retry bucket configured number day write audit log form cdr charging transaction edr event based processing update subscription service grace status se database note uup identify subscriber whose status get changed active grace tag separate table script executed day poll tagged status changed uup turn invoke api exposed subscription engine turn take appropriate action case blackberry subscriber grace scenario exist existing blackberry subscriber subscription engine initiate blackberry service suspension request subscriber towards hlr rim server fresh blackberry activation request subscriber subscription engine deny request subscriber sim change subscriber change sim system application trigger subscription engine notifying sim subscriber changed se initiate request provision new sim rim server sim change request tagged crm crystal icare sr service request route sr pushed external table crm picked automation script successfully replaces sim hlr subsequently trigger subscription engine sim exchange subscriber pic se receive sim exchange notification automation script handling sim exchange hlr automation script invoke api exposed subscription engine turn take appropriate action mentioned subsequent step subscription engine validates subscriber blackberry service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id provisioning information subscription engine sends blackberry provisioning request new sim eai layer eai layer forward request rim server via comptel il interface rim server sends provisioning response subscription engine new sim registered rim server subscription engine log new sim provisioning response se database pre post migration subscriber undergoes pre post migration subscription engine validates subscriber blackberry service de provision request particular subscriber rim server also subscription engine send deprovisioning request respective application subscriber subscribed respective application stop delivering content subscriber pic uup identify subscriber migrated pre post tag separate table script executed day poll tagged pre post migrated subscriber uup turn invoke api exposed subscription engine turn take appropriate action mentioned subsequent step subscription engine validates subscriber blackberry service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id provisioning information subscription engine sends blackberry deprovisioning request new sim eai layer eai layer forward request rim server via comptel il interface rim server sends successful deprovisioning response subscription engine subsequently subscription engine send subscriber subscription deprovisioning request respective application subscriber subscribed subscription engine log deprovisioning response se database post pre migration subscriber undergoes post pre migration subscription engine send deprovisioning request respective application subscriber subscribed respective application stop delivering content subscriber pic uup identify subscriber migrated post pre tag separate table script executed day poll tagged postpaid prepaid migrated subscriber uup turn invoke api exposed subscription engine turn take appropriate action mentioned subsequent step subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported subscription engine send subscriber subscription deprovisioning request respective application subscriber subscribed subscription engine log deprovisioning response se database churn scenario pic subscriber deactivated ported network application system sends request subscription engine subscription engine fetch list subscription service pertinent subscriber subscription engine initiate deactivation subscription service request subscriber subscription engine validates following subscription deactivation request syntax validation subscription engine sends deprovisioning request application subscription engine update deactivation status subscriber se database write audit log form cdr send sm notification user subscription deactivation message update subscription deactivation status sdp uup component port scenario subscriber get ported idea network subscription service assigned subscriber need deactivated exist following scenario subscriber get ported renewal bulk activation subscription engine performing port validation real time trigger provided mnp system subscriber get ported scenario pic renewal request initiated subscription engine subscription request handled part bulk activation subscription engine perform following step renewal request retry bucket subscription engine fetch profile uup perform subscription specific validation based subscriber profile activity subscription engine find subscriber ported se generate edr particular request subsequently se write corresponding response log file time subscription engine remove entry uup particular subscription subscriber bulk activation subscription engine fetch one one record processing initially request syntax validation including application specific parameter validation subsequently subscription engine fetch profile uup perform subscription specific validation based subscriber profile activity subscription engine find subscriber ported se generate edr particular request subsequently se write corresponding response log file time subscription engine remove entry uup particular subscription subscriber scenario ii pic subscriber ported network respective application system sends request subscription engine subscription engine fetch list subscription service pertinent subscriber subscription engine initiate deactivation subscription service request subscriber subscription engine validates following subscription deactivation request syntax validation subscription engine sends deprovisioning request application subscription engine update deactivation status subscriber se database write audit log form cdr send sm notification user subscription deactivation message remove subscription service subscriber sdp uup component subscription engine use case postpaid subscription service via discovery channel subscriber request subscription service via different discovery channel viz sm mm ivr wap ussd web sd customer care sanchaya dialler call centre interface retail vtop black berry app store stk dstk etc request forwarded subscription engine request intercepting layer intercept multi lingual request multiple bearer transforms request unified format accepted subscription engine subscription activation sm pic subscriber request text based subscription purchase request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends subscription service provisioning application write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber provisioning bscs ix pic subscription engine identifies circle subscriber forward provisioning request bscs ix via eai layer bscs ix tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs ix impose charging service per service rating definition failure scenario diagram pic diagram pic diagram provisioning failure bscs ix pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber pre paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine imposes prepaid flow failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine push request ivsm db rating charging inserting request ivsm master table failure scenario bscs provisioning failure scenario subscription engine initiate provisioning request towards bscs via ivsm provisioning fails subscription engine retry provisioning configured number retries defined part service definition provisioning fails even configured number retries se generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario bscs ix provisioning failure scenario subscription engine initiate provisioning request towards bscs ix via eai provisioning fails subscription engine retry provisioning configured number retries defined part service definition provisioning fails even configured number retries se generate failure cdr bscs ix deprovision subscription service subscriber subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition real time provisioning application still successful se push retry bucket taken offline activity failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber subscription activation ussd diagram pic subscriber request text based subscription purchase request via ussd messaging gateway messaging gateway forward request ussd application using http protocol ussd application forward subscription request subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends subscription service provisioning application write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber provisioning bscs ix pic subscription engine identifies circle subscriber forward provisioning request bscs ix via eai layer bscs ix tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs ix impose charging service per service rating definition failure scenario diagram pic diagram pic diagram pic pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber pre paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine imposes prepaid flow failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine push request ivsm db rating charging inserting request ivsm master table failure scenario bscs provisioning failure scenario subscription engine initiate provisioning request towards bscs via ivsm provisioning fails subscription engine retry charging configured number retries defined part service definition provisioning fails even configured number retries se generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario bscs ix provisioning failure scenario subscription engine initiate charging request towards bscs ix via eai provisioning fails subscription engine retry charging configured number retries defined part service definition provisioning fails even configured number retries se generate failure cdr bscs ix deprovision subscription service subscriber subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition real time provisioning application still successful se push retry bucket taken offline activity failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber subscription activation wap pic subscriber request text based subscription purchase request via wap portal subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends subscription service provisioning application write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber provisioning bscs ix pic subscription engine identifies circle subscriber forward provisioning request bscs ix via eai layer bscs ix tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs ix impose charging service per service rating definition failure scenario diagram pic diagram pic diagram pic pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber pre paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine imposes prepaid flow failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine push request ivsm db rating charging inserting request ivsm master table failure scenario bscs provisioning failure scenario subscription engine initiate provisioning request towards bscs via ivsm provisioning fails subscription engine retry provisioning configured number retries defined part service definition provisioning fails even configured number retries se generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario bscs ix provisioning failure scenario subscription engine initiate provisioning request towards bscs ix via eai provisioning fails subscription engine retry provisioning configured number retries defined part service definition provisioning fails even configured number retries se generate failure cdr bscs ix deprovision subscription service subscriber subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition real time provisioning application still successful se push retry bucket taken offline activity failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber subscription activation web pic subscriber request text based subscription purchase request via web site web gateway subscriber request text based subscription purchase request via wap portal subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends subscription service provisioning application write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber provisioning bscs ix pic subscription engine identifies circle subscriber forward provisioning request bscs ix via eai layer bscs ix tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs ix impose charging service per service rating definition failure scenario diagram pic diagram pic diagram pic pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber pre paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine imposes prepaid flow failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine push request ivsm db rating charging inserting request ivsm master table failure scenario bscs provisioning failure scenario subscription engine initiate provisioning request towards bscs via ivsm provisioning fails subscription engine retry provisioning configured number retries defined part service definition provisioning fails even configured number retries se generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario bscs ix provisioning failure scenario subscription engine initiate provisioning request towards bscs ix via eai provisioning fails subscription engine retry provisioning configured number retries defined part service definition provisioning fails even configured number retries se generate failure cdr bscs ix deprovision subscription service subscriber subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition subscription engine generate cdr appropriate status code eg provisioning failed failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber subscription activation ivr diagram pic subscriber request text based subscription purchase request via ivr subscription engine subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends subscription service provisioning application write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber provisioning bscs ix pic subscription engine identifies circle subscriber forward provisioning request bscs ix via eai layer bscs ix tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs ix impose charging service per service rating definition failure scenario diagram pic diagram pic pic pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber pre paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine imposes prepaid flow failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine push request ivsm db rating charging inserting request ivsm master table failure scenario bscs provisioning failure scenario subscription engine initiate provisioning request towards bscs via ivsm provisioning fails subscription engine retry provisioning configured number retries defined part service definition provisioning fails even configured number retries se generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario bscs ix provisioning failure scenario subscription engine initiate provisioning request towards bscs ix via eai provisioning fails subscription engine retry provisioning configured number retries defined part service definition provisioning fails even configured number retries se generate failure cdr bscs ix deprovision subscription service subscriber subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition real time provisioning application still successful se push retry bucket taken offline activity failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber subscription activation crm pic subscriber request text based subscription purchase request via crm subscription engine subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends subscription service provisioning application write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber provisioning bscs ix pic subscription engine identifies circle subscriber forward provisioning request bscs ix via eai layer bscs ix tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs ix impose charging service per service rating definition failure scenario diagram pic diagram pic diagram pic pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber pre paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine imposes prepaid flow failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine push request ivsm db rating charging inserting request ivsm master table failure scenario bscs provisioning failure scenario subscription engine initiate provisioning request towards bscs via ivsm provisioning fails subscription engine retry provisioning configured number retries defined part service definition provisioning fails even configured number retries se generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario bscs ix provisioning failure scenario subscription engine initiate provisioning request towards bscs ix via eai provisioning fails subscription engine retry provisioning configured number retries defined part service definition provisioning fails even configured number retries se generate failure cdr bscs ix deprovision subscription service subscriber subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition real time provisioning application still successful se push retry bucket taken offline activity failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber subscription activation obd pic obd place call subscriber regarding various subscription available user subscriber request subscription service purchase bound dialer obd obd sends subscription request behalf subscriber subscription engine subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends subscription service provisioning application write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber provisioning bscs ix pic subscription engine identifies circle subscriber forward provisioning request bscs ix via eai layer bscs ix tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs ix impose charging service per service rating definition failure scenario diagram pic diagram pic diagram pic pic diagram pic failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber pre paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine imposes prepaid flow failure scenario fetch subscriber profile fails subscriber found case subscription engine fails fetch subscriber profile uup subscription engine initiate charging request towards via ucs turn return subscriber found case subscription engine treat subscriber post paid subscription engine would send subscription provisioning request either internal cm external application responsible content delivery subscription engine push request ivsm db rating charging inserting request ivsm master table failure scenario bscs provisioning failure scenario subscription engine initiate provisioning request towards bscs via ivsm provisioning fails subscription engine retry provisioning configured number retries defined part service definition provisioning fails even configured number retries se generate failure cdr subscription engine send unsuccessful subscription purchase notification subscriber failure scenario bscs ix provisioning failure scenario subscription engine initiate charging request towards bscs ix via eai provisioning fails subscription engine retry charging configured number retries defined part service definition charging fails even configured number retries se generate failure cdr bscs ix deprovision subscription service subscriber subscription engine send unsuccessful subscription purchase notification subscriber failure scenario subscription provisioning request application failure scenario successful charging subscription engine send subscription provisioning request either internal cm external application responsible content delivery turn fails subscription engine retry subscription provisioning application configured number retries defined part service definition real time provisioning application still successful se push retry bucket taken offline activity failure scenario subscription provisioning internal database failure scenario successful subscription provisioning application responsible content delivery subscription engine update database requested subscription subscriber turn fails subscription engine write temporary file would consumed insert subscription engine database se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber failure scenario update subscriber profile subscription uup failure scenario subscription engine update subscription service provisioning request uup component assign subscription service subscriber turn fails se write purchased subscription detail subscriber file updated later uup offline se generate relevant cdr appropriate status code database subsequently subscription engine send successful subscription purchase notification subscriber subscription activation sanchaya pic sanchaya place call subscriber regarding various subscription available user subscriber request subscription service purchase sanchaya sanchaya writes response file sends file sd team sd team uploads file ui bulk provisioning gui sends ftp file ftp location scheduler fetch ftp file ftp location scheduler fetch one record time ftp file forward subscription engine subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service case subscriber already subscribed service sends already subscribed notification subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends subscription service provisioning application write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber provisioning bscs ix pic subscription engine identifies circle subscriber forward provisioning request bscs ix via eai layer bscs ix tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs ix impose charging service per service rating definition renewal subscription service subscription engine would facilitate renewal based various parameter like count duration volume subscription engine would set auto trigger within internal system system would raise internal trigger period service subscription reaching end pre renewal message configurable also number day need sent prior also need configurable subscription renewal based validity subscription service subscriber validity period system would raise internal trigger renewal service period service subscription reaching end se update database renewal initiate charging request charging renewal taken care postpaid billing system pic subscription engine fetch record renewal based validity subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subsequently subscription engine sends subscription service provisioning application write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status renewal date sdp uup component subscription service subscriber note postpaid post transformation scenario bscs ix initiate rating charging case renewal opt deactivation subscription subscriber explicitly request opts deactivation subscription service wherein subscription engine deactivates subscription service subscriber pic subscriber sends subscription service deactivation request via sm short code keyword messaging gateway turn forward request subscription engine subscription engine would follow validation deactivation request syntax valid subscriber already subscribed requested service subscription engine would send acknowledgement subscriber se push deprovisioning request ivsm turn de provision subscription service subscriber bscs via ism successfully de provisioned bscs subscription engine sends subscription service deprovisioning request application subscriber subscription engine update deactivation status subscription service subscriber database subscription engine generates cdr process se remove entry subscription service subscriber uup subscription engine send successful deactivation subscription notification subscriber try buy pack subscription service available try buy pack initially pack available free subscriber end try buy trial pack subscriber engine apply rate subscription service pic subscriber request subscription purchase via sm messaging gateway subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active suspend inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine send request acknowledgement subscriber subscription engine send provisioning request application subscription engine update try buy pack se database write audit log form cdr charging transaction edr event based processing send sm notification user configured message update try buy subscription pack sdp uup component charge user end try buy pack end try buy trial pack subscriber engine push request ivsm rating charging turn provision subscription service subscriber bscs ism successful charging subscription engine sends subscription service provisioning application update subscription service status sdp uup component assign subscription service subscriber write audit log form cdr charging transaction edr event based processing send sm notification user configured message application delivers content subscriber successfully provisioning subscription service based type service subscription service need provisioned following element application responsible delivering content network element e g gprs blackberry mca registered hlr additionally blackberry service also provisioned rim server rbt provisioning ring back tone rbt service need provisioned hlr subscription engine sends request rbt service provisioning ivsm ivsm forward request bscs via ism request provisioned subscription service tagged subscriber bscs forward rbt provisioning request hlr via comptel il interface diagram pic subscriber request rbt subscription purchase request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid rbt application subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id hlr provisioning information subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active suspend inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber rbt subscription request need provisioned registered hlr subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends subscription service provisioning application bscs forward rbt provisioning request hlr via comptel il interface subscription engine poll response ivsm history table pertinent charging provisioning successful charging subscription engine sends subscription service provisioning application subscription service provisioning fails credit back money supported else mark record manual reconciliation callback configured msisdn action status amount charged next charging date subscription engine updated rbt subscription service status subscriber write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber provisioning bscs ix pic subscription engine identifies circle subscriber forward provisioning request bscs ix via eai layer bscs ix tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs ix impose charging service per service rating definition bscs ix forward rbt provisioning request hlr via comptel il interface eai layer sends rbt provisioning response subscription engine failure scenario pic pic pic scenario subscription provisioning fails rbt application subscription engine sends request provisioning rbt application fails subscription engine retry provisioning request application configured number retries defined part service definition configured number retrial fails subscription engine push provisioning request rbt application retry queue scenario hlr provisioning failure scenario subscription engine initiate provisioning request towards hlr via eai provisioning fails subscription engine retry provisioning configured number retries defined part service definition provisioning fails even configured number retries hlr sends unsuccessful provisioning response bscs ix via comptel bscs ix deprovision subscription service subscriber subscription engine send unsuccessful subscription purchase notification subscriber scenario uup hlr provisioning information subscription engine fetch provisioning related information required invoke comptel il interface either following system nsms uup uup hlr provisioning information case uup hlr provisioning information eai layer forward request nsms subscription engine sends request eai layer fetch provisioning information eai layer forward request uup uup hlr provisioning information eai layer forward request nsms provisioning information send subscription engine nsms via eai layer pre tone provisioning pre tone service need provisioned hlr subscription engine sends request pre tone service provisioning ivsm ivsm forward request bscs via ism request provisioned subscription service tagged subscriber bscs forward rbt provisioning request hlr via comptel il interface pic subscriber request pre tone subscription purchase request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid pre tone application subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id hlr provisioning information subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active suspend inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber pre tone subscription request need provisioned registered hlr subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends subscription service provisioning application bscs forward pre tone provisioning request hlr via comptel il interface subscription engine poll response ivsm history table successful charging subscription engine sends subscription service provisioning application callback configured msisdn action status amount charged next charging date subscription engine updated pre tone subscription service status subscriber write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber provisioning bscs ix pic subscription engine identifies circle subscriber forward provisioning request bscs ix via eai layer bscs ix tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs ix impose charging service per service rating definition bscs ix forward pre tone provisioning request hlr via comptel il interface eai layer sends pre tone provisioning response subscription engine failure scenario scenario subscription provisioning fails pre tone application subscription engine sends request provisioning pre tone application fails subscription engine retry provisioning request application configured number retries defined part service definition configured number retrial fails subscription engine push provisioning request pre tone application retry queue pic pic scenario hlr provisioning failure scenario subscription engine initiate provisioning request towards hlr via eai provisioning fails subscription engine retry provisioning configured number retries defined part service definition provisioning fails even configured number retries hlr sends unsuccessful provisioning response bscs ix via comptel bscs ix de provision subscription service subscriber subscription engine send unsuccessful subscription purchase notification subscriber scenario uup hlr provisioning information subscription engine fetch provisioning related information required invoke comptel il interface either following system nsms uup uup hlr provisioning information case uup hlr provisioning information eai layer forward request nsms subscription engine sends request eai layer fetch provisioning information eai layer forward request uup uup hlr provisioning information eai layer forward request nsms provisioning information send subscription engine nsms via eai layer gprs provisioning subscriber request gprs subscription service subscriber provisioned ucs evolve gprs service also hlr pic subscriber request gprs subscription purchase request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid pre tone application subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active suspend inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends gprs subscription service provisioning ucse callback configured msisdn action status amount charged next charging date subscription engine updated gprs subscription service status subscriber write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber provisioning bscs ix pic subscription engine identifies circle subscriber forward provisioning request bscs ix via eai layer bscs ix tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs ix impose charging service per service rating definition failure scenario scenario subscription provisioning fails ucse subscription engine sends request provisioning ucse fails subscription engine retry provisioning request application configured number retries defined part service definition configured number retrial fails subscription engine push provisioning request pre tone application retry queue pic scenario uup hlr provisioning information subscription engine fetch provisioning related information required invoke comptel il interface either following system nsms uup uup hlr provisioning information case uup hlr provisioning information eai layer forward request nsms subscription engine sends request eai layer fetch provisioning information eai layer forward request uup uup hlr provisioning information eai layer forward request nsms provisioning information send subscription engine nsms via eai layer blackberry provisioning subscriber request subscription service blackberry subscription service provisioned hlr rim server pic subscriber request blackberry subscription purchase request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid blackberry application subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id hlr provisioning information subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active suspend inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber blackberry subscription request need provisioned registered hlr also rim server subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends subscription service provisioning application bscs forward blackberry provisioning request hlr rim server via comptel il interface ivsm poll provisioning response ivsm history table subscription engine updated pre tone subscription service status subscriber write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber provisioning bscs ix pic subscription engine identifies circle subscriber forward provisioning request bscs ix via eai layer bscs ix tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs ix impose charging service per service rating definition bscs ix forward blackberry provisioning request hlr rim server via comptel il interface eai layer sends blackberry provisioning response subscription engine failure scenario subscription provisioning fails rim server subscription engine sends request provisioning rim server fails subscription engine retry provisioning request rim configured number retries defined part service definition configured number retrial fails subscription engine push provisioning request rim provisioning retry queue subscription service gprs subscriber request gprs subscription subscription need provisioned ucs evolve various gprs subscription service available subscriber follows gprs plan change gprs daily pack gprs plan change subscriber sends request gprs plan change se validates subscriber send plan change request earlier day repeated request subscriber gprs plan already changed day se reject subscription request gprs daily pack subscription service available daily basis subscriber request pack se need check subscriber already send request day se sends gprs provisioning ucs evolve gprs plan change subscriber sends request gprs plan change se validates subscriber send plan change request earlier day repeated request subscriber gprs plan already changed day se reject subscription request pic subscriber request gprs plan change service via sm message gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid ucse ucs evolved subscriber already subscribed requested service subscription engine validates request received gprs plan change request received gprs plan change se validates subscriber send plan change request earlier day repeated request subscriber gprs plan already changed day se reject subscription request subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends gprs subscription service provisioning ucse update db status success gprs plan change generates audit log form cdr charging transaction edr event based processing subscription engine send successful gprs plan change subscription purchase notification subscriber update gprs subscription plan status sdp uup component assign subscription service subscriber failure scenario gprs provisioning fails ucs evolve subscription engine sends gprs provisioning request ucs evolve fails subscription engine retry gprs subscription provisioning ucse configured number retries defined part service definition configured number retrial fails subscription engine push gprs subscription request ucs evolve retry queue gprs daily pack subscription service available daily basis subscriber request pack se need check subscriber already send request day se sends gprs provisioning ucs evolve pic subscriber request gprs daily pack service via sm message gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid ucse ucs evolved subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends gprs subscription service provisioning ucse update db status successful purchase gprs daily pack generates audit log form cdr charging transaction edr event based processing subscription engine send successful gprs daily pack subscription purchase notification subscriber update gprs subscription plan status sdp uup component assign subscription service subscriber usage consumption scenario subscriber gprs usage get exhausted ucs evolve migrate subscriber gprs default plan ucs evolve sends notification usage consumption subscription engine along successful gprs default plan provisioning default gprs plan updated subscription engine update gprs subscription service sdp uup component assign subscription service subscriber subscription plan blackberry subscriber request subscription service blackberry phone subscription need provisioned hlr well rim server various subscription service request available subscriber follows blackberry plan change blackberry service change many subscription service available blackberry user service many plan option blackberry user opt following change subscription service change plan given service example service plan plan price r valid day plan price r day service b plan plan b price r valid day plan b price r valid day subscriber given opportunity change service service service b blackberry service change change plan plan plan b blackberry plan change blackberry plan change pic subscriber request blackberry plan change selected subscription service via sm message gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid subscription engine validates request received blackberry plan change selected subscription service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category viz gold silver youth etc subscription service offered whether subscriber black listed check status subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob viz mobility data card pco etc subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition update db status success blackberry plan change generates audit log form cdr charging transaction edr event based processing subscription engine send successful blackberry plan change subscription notification subscriber update blackberry subscription plan status sdp uup component assign subscription service subscriber blackberry service change pic subscriber request blackberry phone subscription service change request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported hlr id hlr provisioning information subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active suspend inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends subscription service provisioning application bscs forward blackberry service change provisioning request hlr well rim server via comptel il interface subscription engine poll response ivsm history table subscription engine updated blackberry subscription service successful status subscriber write audit log form cdr charging transaction edr event based processing send sm notification user configured message update blackberry subscription service status sdp uup component assign subscription service subscriber subscriber life cycle management subscriber status active pic subscriber request text based subscription purchase request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active suspend inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine check subscriber status uup status active would continue process rating charging subscription engine would send request acknowledgement subscriber subscription engine push request ivsm db provisioning inserting request ivsm master table ivsm forward request provisioning bscs via ism bscs tag requested subscription service subscriber notifies subscription engine successful message successful provisioning bscs impose charging service per service rating definition successful provisioning bscs subscription engine sends service provisioning request application callback configured msisdn action status amount charged next charging date write audit log form cdr charging transaction edr event based processing send sm notification user configured message update subscription service status sdp uup component assign subscription service subscriber subscriber status suspend pic subscriber request text based subscription purchase request via sm messaging gateway subscription request would forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported subscription engine would fetch subscription definition includes rating information requested service subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active suspend inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine check subscriber status uup status suspend subsequent action taken subscription engine push request retry bucket subscription engine try process request day configurable number day retry successful subscription engine process request rating charging retry unsuccessful configured number day se send acknowledgement back subscriber appropriate message processing request note uup identify subscriber whose status get changed active suspend tag separate table script executed day poll tagged status changed uup turn invoke api exposed subscription engine turn take appropriate action case blackberry subscriber suspend state scenario exist existing blackberry subscriber subscription engine initiate blackberry service suspension request subscriber towards hlr rim server fresh blackberry activation request subscriber subscription engine deny request subscriber subscriber status inactive subscriber status inactive following scenario subscriber ported deactivated subscriber requested service due reason request stored retry queue bucket mean time subscriber ported deactivated request retrieved retry bucket status subscriber already inactive request stored bulk pic subscriber request service stored retry queue bucket request retrieved forwarded subscription engine subscription engine would follow validation subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active suspend inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine check subscriber status uup status inactive subscription engine generates edr event based processing subscription engine log response file scenario bulk request subscriber request service stored bulk request retrieved queue e fetch one record time forwarded subscription engine subscription engine would follow validation requested service valid application specific parameter service token valid subscriber already subscribed requested service subscription engine would fetch subscriber profile sdp uup subscriber type circle status subscriber segment ported subscription engine following subscription specific validation based subscriber profile like whether subscriber ported subscriber whether subscriber belongs prepaid post paid whether subscriber eligible belongs category subscription service offered whether subscriber black listed check status viz active suspend inactive subscriber whether requested subscription service exist subscriber circle whether requested subscription service need offered particular lob subscriber whether requested subscription service discovered via valid channel subscription engine check subscriber status uup status inactive subscription engine generates edr event based processing subscription engine log response file integration subscription engine performs following integration carry major task uup integration performed subscription engine find different parameter subscriber profile e g find subscriber post paid pre paid circle subscriber belongs subscriber segment category etc parameter may used determine appropriated charging provisioning interface used particular service subscriber also subscription engine update uup subscriber subscription profile subscription engine integrated uup using jdbc connectivity along thin driver provides efficient performance fetch subscriber profile subscription fetch following information uup fulfillment subscription request pic scenario uup unable connect uup subscriber profile found uup subscription engine hit via ucs fetch balance ucs return subscriber found error subscriber treated postpaid else subscriber treated prepaid update subscription profile subscription engine insert update following attribute subscriber subscription profile uup following scenario activation renewal grace suspension note subscription deactivation scenario record deleted uup containing subscription subscriber pic based type subscription request following parameter updated part subscriber subscription profile uup case subscription activation subscription activation record inserted uup service item table populating following attribute msisdn number service id service name activation date service item status source system last modified date internally updated uup db case ii subscription renewal subscription renewal record updated uup service item table following attribute last renewal date last modified date internally updated uup db case iii subscription grace subscriber subscription status get changed active grace record updated uup service item table following attribute service item status status change date last modified date internally updated uup db case iv subscription suspension subscriber subscription status get changed grace suspension record updated uup service item table following attribute service item status status change date last modified date internally updated uup db ucs integration subscription engine integrate ucs real time prepaid using http protocol exposed ucs enable subscription engine check pre paid subscriber balance amount also charge refund block amount subscriber balance check mandatory check subscription low negative balance handling related charging feature applied following set charging parameter need sent ucs subscription engine url invocation parameter data max description get balance type length mandatory parameter msisdn char mobile number identifier circle id char circle id cp id char cp id platform char platform charging frequency char charging frequency discovery bearer char discovery bearer net net char net net sub category char sub category parameter parameter discovery portal char discovery portal delivery bearer char delivery bearer bucket char bucket identifier identifier postpaid charging char used parameter postpaid charging content type char content type content id char unique identity number cp cm library content description char content description copyright id char copyright id billing call type char balance check parameter charge balance check direct charge balance refund eup char base end user charge attempted service type char event download identifier flag first time subscription subscriptio n browsing streaming combination gifting recommendation etc transaction id char transaction id sm shortcode char shortcode mo mt request sm keyword char keyword sent mo mt request discount percentage char discount applied base price roaming identifier char roaming identifier passed wap gateway tariff class char tariff class whereever applicable adjustment code char variable field populated sdp node additional char additional parameter parameter may required passed future additional char additional parameter parameter may required passed future additional char additional parameter parameter may required passed future additional char additional parameter parameter may required passed future additional char additional parameter parameter may required passed future additional char additional parameter parameter may required passed future additional char additional parameter parameter may required passed future additional char additional parameter parameter may required passed future additional char additional parameter parameter may required passed future additional char additional parameter parameter may required passed future following illustrative set response parameter ucs different operation operation response code response code description get balance ebh result ok get balance successful request parameter missing request parameter missing decomposed based number parameter msisdn found subscriber found err operation failed get balance request failed err allocation failed unable allocate amount circle id found conn timeout debit ebh result ok get balance successful request parameter missing request parameter missing decomposed based number parameter msisdn found subscriber found err operation failed credit request failed err allocation failed unable allocate amount circle id found conn timeout tariff class found tariff paln found enough fund credit ebh result ok get balance successful request parameter missing request parameter missing decomposed based number parameter msisdn found subscriber found err operation failed credit request failed err allocation failed unable allocate amount circle id found conn timeout based response code mentioned se take following action case request parameter missing error scenario subscription engine retry send subscription request purchase failure notification end subscriber case ii operation failed scenario subscription engine retry send subscription request purchase failure notification end subscriber case iii connection time scenario subscription engine log request file reconciled manually subscriber charged subscription provisioning subscriber done offline else request pushed retry bucket case iv unable connect ucs scenario subscription engine try charge configured number retries subsequently even charging fails se push request retry bucket case v allocation failed scenario subscription engine try charge configured number retries subsequently even charging fails se push request retry bucket integration bscs bscs ix subscription engine integrate bscs ix provision subscription service subscriber subsequently bscs ix maintain rating charging monthly advance rental bscs integration subscription engine use ivsm provisioning channel tagging subscription request subscriber bscs subscription engine push request ivsm using db link turn insert request ivsm master table ivsm fetch request table one one process request certain validation subsequently provisioning subscriber bscs via ism subscriber provisioned ism insert response ivsm history table specific service se pull response table structure ivsm master table ivsm history table provided ivsm master table ivsm history table field name trxid appsource requestcode mobileno circleid requestflag requestdate status rejectcode processdate loaddate custcode co id billcycledate processid rejectiondescription bscs ix integration subscription engine use eai layer provisioning layer provision subscription subscriber bscs ix subscription engine push bo business object form xml eai layer using xml jms turn send request bscs ix provisioning using xml jms messaging gateway integration subscription engine integrate messaging gateway using soap http interface exposed messaging gateway enable subscription engine receive subscription specific request mo discovered via sm ussd stk channel also subscription engine send notification content subscriber mt subscription engine receive mo format illustrated post http http content type text xml charset iso connection keep alive host content length xml version encoding iso message id routersmsnode svhj sm type mo retry count max destination messageid address number type abbreviated number address destination source address number type international number address source ud type text inside ud pid pid vp type absolute date year year month month day day hour hour minute minute second second millisecond millisecond date vp scts date year year month month day day hour hour minute minute second second millisecond millisecond ate scts param name unique id value sm message subscription engine receive mo format illustrated post http content type text xml host content length accept authorization basic c v zxn awrlytpzzxrlc rpzgvh xml version encoding utf message sm type mt source address number type abbreviated number address source destination messageid ec eb address number type international number address destination dc dc ud type text response ud param name content size value param name developer content id value buongiorno param name content type value text param name content sub category value buongiorno param name content sub sub category value idea param name medium type value sm param name copyright owner value buongiorno param name delivery channel value sm sm message cm integration subscription engine integrates internal cm external va application va application specific validation provisioning de provisioning suspension content delivery fetch deliver scenario etc related action subscription engine send following provisioning request pertinent subscription using soap http purchase subscription cancel subscription renewal subscription note provisioning url towards va application rd party cps vary application application cp cp following set parameter need sent cm purchase subscription sr parameter name type value sec password constant sec referenceduserid blank sec referencedusername blank sec serviceid constant sec username constant sec usertype constant user fieldname constant user usertype constant user value msisdn subscriber urn subscriptionofferid subscription service id tran creditpoints blank tran currency constant tran deliverymethod constant tran discountplanid blank tran discountsetid blank tran drmtechnology constant tran netprice price point tran notificationcampaign blank id tran offercampaignid blank tran priceplanid price point identifier tran pricesetid subscription service id tran promotioncode blank tran purchasechannel constant tran purchasetoken tran recommendationid blank tran requestedprice blank tran rightsid tran screen constant tran subscriptionofferid subscription service id tran vat constant tran origin blank cat entitytype cat value tran parented tran parentname tran portal constant tran portalroot constant tran portalsessionid blank com key uid com value value global transaction id urn referencetransactioni blank following set parameter need sent cm cancel subscription sr parameter name type value sec password constant sec referenceduserid blank sec referencedusername blank sec serviceid constant sec username constant sec usertype constant user fieldname constant user usertype constant user value msisdn subscriber urn subscriptionofferid subscription service id urn portal blank urn referencetransactionid transaction id following set parameter need sent cm renewal subscription sr parameter name type value sec password constant sec referenceduserid blank sec referencedusername blank sec serviceid constant sec username constant sec usertype constant user fieldname constant user usertype constant user value msisdn subscriber urn subscriptionofferid subscription service id urn referencetransactionid transaction id eai layer integration subscription engine integrate eai layer using xml jms async manner following scenario hlr provisioning rim provisioning blackberry fetch provisioning information nsms viz hlr id sim id imsi hlr rim provisioning subscription engine push business object form xml queue exposed eai layer service turn forward comptel il il responsible provisioning service hlr well rim server illustrative bo provided soapenv envelope xmlns soapenv http schema xmlsoap org soap envelope soapenv header soapenv body iauto comptelprovisionbo xmlns iauto http xml ibm com schema comptelprovisionborequest iauto messageheader iauto headerinfo iauto request type async request response iauto request type iauto mobile number iauto mobile number iauto service type process service iauto service type iauto circle id mh iauto circle id iauto channel type iauto iauto channel type iauto trace id iauto trace id iauto lob prepaid iauto lob iauto operation name provision req comptel iauto operation name iauto headerinfo iauto errorinfo iauto error code iauto error message iauto severity iauto errorinfo iauto operationstatuscode iauto operation status code iauto operation status code iauto operationstatuscode iauto servicespecificinfo iauto retry count iauto retry count iauto retry interval iauto retry interval iauto correlation id iauto correlation id iauto servicespecificinfo iauto messageheader iauto messagebody iauto businessinput iauto circle id mh iauto circle id iauto hlr id iauto hlr id iauto request type tbf iauto request type iauto request id tbf iauto request id iauto bb action bb action iauto bb action iauto bb service name bb service name iauto bb service name iauto imsi number iauto imsi number iauto msisdn number iauto msisdn number iauto sim number simno iauto sim number iauto businessinput iauto businessoutputdata iauto businessoutput iauto smessage iauto smessage iauto status iauto status iauto finished date iauto finished date iauto businessoutput iauto businessoutputdata iauto messagebody iauto comptelprovisionreqbo response populated iauto businessoutputdata tag turn sent back form bo structure subscription engine via eai layer fetch provisioning information nsms subscription engine push business object form xml queue exposed eai layer service turn forward request nsms fetch provisioning related information illustrative bo provided xml version encoding utf soapenv envelope xmlns soapenv http schema xmlsoap org soap envelope soapenv header soapenv body iauto retrivemsisdndetailsbo xmlns iauto http xml ibm com schema retrivemsisdndetailsborequest iauto messageheader iauto headerinfo iauto request type asynchronous request response iauto request type iauto mobile number iauto mobile number iauto service type info service iauto service type iauto circle id mh iauto circle id iauto channel type fta iauto channel type iauto trace id iauto trace id iauto lob prepaid iauto lob iauto operation name retrive msisdn detail iauto operation name iauto headerinfo iauto errorinfo iauto error code iauto error message iauto severity iauto errorinfo iauto operationstatuscode iauto operation status code success iauto operation status code iauto operationstatuscode iauto servicespecificinfo iauto retry count iauto retry interval iauto correlation id iauto correlation id iauto servicespecificinfo iauto messageheader iauto messagebody iauto businessinput iauto msisdn number iauto msisdn number iauto businessinput iauto businessoutputdata iauto businessoutput iauto msisdn iauto msisdn iauto status closed iauto status iauto imsi iauto imsi iauto sim iauto sim iauto hlr id iauto hlr id iauto businessoutput iauto businessoutputdata iauto messagebody iauto retrivemsisdndetailsbo soapenv body soapenv envelope response populated iauto businessoutputdata tag turn sent back form bo structure subscription engine via eai layer mediation integration subscription engine generate cdr transaction recorded cdr adhering idea sdp cdr specification cdr file pushed mediation frequency every hour using sftp protocol script running server subscription engine component generating cdrs mediation turn forward cdr file bs downstream system viz bscs ix r ra bi following attached spread sheet capture idea sdp cdr specification pertinent subscription crm integration customer care module subscription engine integrated idea unified customer care using silent login feature handle customer query complaint csr seamlessly login unified crm subscription engine customer care module subscription engine customer care module expose http based standard interface invoked idea crm embed screen minimum parameter required sm customer care module mentioned passed unified crm seamless login v msisdn v user id v password v circle id solution benefit following benefit pertinent subscription engine solution easy integration subscription engine using standard interface exposed subscription engine provide unified view subscriber pertinent subscription service currently provided various vendor isolated manner set subscription service offering unified view subscriber pertinent subscription enable business target specific set subscriber va subscription specific campaign based cdr generated subscription engine idea able revenue settlement content partner precise manner eliminate dispute content partner unified approach hlr provisioning across circle prepaid postpaid subscription engine capability fetch balance subscriber initiate charging request avoid multiple charge request in providing performance optimization subscription engine provide fetch deliver mechanism content subscriber leading quality service qos subscriber also facilitate resolve customer query complaint content delivered subscriber centralized customer care provide unified view subscription transaction particular subscriber since currently independent vendor customer care module integrated idea crm consolidate report pertinent va subscription business technical team using reporting module subscription engine based cdr generated subscription engine bi able generate adhoc report pertinent subscription reporting subscription engine log transaction embedded persistent database database real time sync reporting engine database impact subscription engine performance generating report subscription engine constitutes reporting module user friendly dash board generate standard report applying certain filter required business technical team display report dash board also flexibility save report excel format system adhoc report generated bi system based cdrs generated subscription component illustrative set report screen shot provided subscription manager framework provided user v susbcription service report following report provides user wise service status reporting interface also provides feature customer care agent either subscribe unsubscribe user respective service allowed user pic detailed service status report following report show list service subscription status user pic activate subscription following report help activating subscription user pic subcription activated following screen show subscription activation status pic subscription deactivated following screen show subscription deactivation status pic delivered message report following report show complete detail message pushed platform delivery status pic pic mobile traffic summary report following report show detail mo mt transaction per msisdn pic logging subscription manager framework inbuilt logging mechanism subscription engine component responsible generating various kind log viz transaction log error log request log debug log log level range following matrix show log level kind log information written subscription engine component log level information log le lightest log generic information application specific information specific information trace error log message recommended warning message default log level statistical message hint log message debug log message debug log message production deployment recommended set log level print error log message required trace error scenario issue customer care subscription manager framework provide box customer care module enables call centre agent handle customer query complaint call centre agent view subscription information pertinent subscriber applying search filter various parameter customer care module integrated idea crm using silent login feature following feature provided customer care module subscription engine access control list role based responsibility ability v view transaction status msisdn v activate subscription service msisdn v de activate subscription service v view transaction history msisdn transaction identifier perform search operation v msisdn wise v service wise v date wise content fetch deliver information v msisdn content delivered v date time delivery content v status delivery content ability credit refund subscriber case subscription provisioning fails note role based access control right also imposed operation action level like activation deactivation subscription engine customer care screen provide information sample parameter provided pertinent subscription assigned subscriber shown screen shot sample parameter subscriber msisdn subscriber type subscription service assigned subscriber request date activation date renewal date deactivation date expiry date activation bearer deactivation bearer subscription status charge status last activation date service description detail subscription pack name circle prepaid postpaid provider transaction identifier auto renewable price point pic also provide view transaction content delivered subscriber subscription engine fetch deliver scenario pic traffic projection following traffic projection provided idea va subscription pic detail va subscription volumetric provided attached spreadsheet pic bandwidth calculation bandwidth calculation pertinent va subscription captured attached spread sheet pic content fetch deliver scenario additional mbps bandwidth required deployment architecture pic back recovery section provides overview backup maintenance process detail encompassing input process output responsibility authority related activity purpose policy follows prevent loss data case accidental deletion corruption data system failure permit timely restoration information data event occur backup component subscription engine component backup performed main database server configuration table fortnightly service routing table daily fortnightly transactional table daily fortnightly split database server subscriber list table daily application server jhub conf bin folder cv backup lib class folder fortnightly upgraded log daily backup frequency main database server daily backup backup performed reporting mirror server every day peak hour backup db daily sh script take backup transactional table since last last full backup put backup folder overwriting data backup taken previous day daily transactional table mo table mt table bos billing table cdr bos table service routing table www wwwsum table table daily table updated regularly table backed daily basis starting day last last fortnightly full backup taken fortnightly backup backup performed reporting mirror server every fortnight full backup done using backup db fort sh script take full backup compress put backup location script configured keep previous certain copy data split database server daily backup split database meant storing subscriber specific information updated daily per associated service design therefore full backup performed split database server holding subscriber list associated information daily basis using script backup splitdb daily sh application server jhub jhub conf backup conf folder contains necessary configuration file running jhubs change file also committed cv since change frequent cv backup would taken daily basis last copy would maintained jhub library class folder fortnightly changed library static hence would taken fortnightly basis change daily log backup daily script configured run every mid night compress previous day log log folder put backup location backup verification daily basis logged information generated backup job reviewed following purpose check correct error monitor duration backup job optimize backup performance possible random test restores done every fortnight order verify backup successful appendix messaging gateway http legacy specification pic messaging gateway smpp connector specification pic messaging gateway http adapter specification pic ucs evolve interface specification gprs provisioning pic cm wsdl pic sdp subscription engine cdr specification pic ucs interface specification charging pic pic pic information document may disclosed outside ibm idea cellular limited may duplicated used disclosed part full purpose evaluate process design impact process detailed document ibm gb domestic retains ownership document edits document shall carried without explicit authorization detailed document control section document pic pic[m
 ibm sdp se project sdp se technical design document prepaid post paid online churn implementation version document control title technical design document prepaid post paid online churn implementation date rd august distribution ibm lumata team document change record date version author change detail lumata first draft document sign nature sign person date role content document control document change record document sign preface introduction purpose document scope document reference design overview current process new consumer fetch prepaid record change postpaidstatus change module premium change risk issue assumption dependency system affected area api se service configuration gui bos premium se cdr module crm provisioning configuration reporting shell script db change query preface document describes prepaid post paid online churn implementation sdpse introduction document designed provide detailed overview prepaid post paid online churn functionality purpose document requirement accept prepaid customer churn request online via eai queue deleting active service check prepaid post paid flag indicator se end post paid customer accept request current mechanism via post paid eai queue deleting active service compare date time stamp active service received date time stamp purpose document indicate point new change se system configuration happen implement mentioned requirement scope document scope document provide design overview said requirement system area get affected implementation change detailed change new configuration flow design architecture current new change flow reference pic pic design overview new multithreaded consumer developed receive prepaid online churn feed eai consume message prepaid eai queue execute validation deleting active service existing post paid consumer extra validation date time stamp implemented current process current process se daily cron fetch churn request uup se daily table churn record se fetch record se processed churn select msisdn pre post post pre g g churn simchg old sim new sim e ventdt se processed hlr id circle prepaid flag imsi uup se daily churn simchg se processed limit endlimit csv file getting created se daily module selected record placed configured location file read processed inoticoming process create bos ticket ticket get processed se daily bos instance called changestatusapi changestatusapi generates hit mo unsub url unsub service premium receives unsub mo deactivates service se daily update se daily table set se processed fetched record existing process remain fetch churn record se daily table new consumer fetch prepaid record prepaid eai system push prepaid churn record prepaid eai queue consumed se system se end new consumer module developed fetch prepaid churn record prepaid eai queue deployed separate tomcat instance record format xml version encoding utf n publishmessage xmlns n http ideacellular com integration publish event eventheader event type churn event type channel prepol channel msisdn msisdn lob prepaid lob circle code dl circle code event filter dnd flag false dnd flag event filter eventheader eventbody churn churn reason code tc churn reason code churn date churn date churn time churn time activation date activation date churn eventbody n publishmessage new multithreaded consumer parse xml fetch required parameter xml also check following parameter processing record value event type churn churn valid digit msisdn like post paid event type value churn msisdn invalid system drop churn request consumer module case mapping circle code parameter required done consumer consumer also generate unique transaction id deactivation transaction keep uniqueness transactionid rd rd digit different configurable consumer check received msisdn record exist se subscription detail table record exists process request else drop request service se subscription detail consumer check prepaid flag value mlist value mean prepaid consumer create ticket push premium queue deactivation service value check next service new log file created write prepaid consumer log change postpaidstatus change module module also parse value requesteddate format dd mm yyyy hh mm s parameter received status pending pd select service requested msisdn service compare activation date time service received requesteddate activation date time le requesteddate system generate unsub ticket push jms queue processing activation date time greater requesteddate system deactivate service sample request xml version encoding utf scn ideastatuschangenotifications xmlns scn http ibm com schema statuschangenotifications scn messagebody scn businessoutputdata scn ideastatuschangenotifications scn banumber scn banumber scn sanumber scn sanumber scn msisdn scn msisdn scn status pending pd scn status scn remark success scn remark scn requestedsystemname sadmin scn requestedsystemname scn requesteddate scn requesteddate scn user sadmin scn user scn notificationdate scn notificationdate scn externalrefnumber scn externalrefnumber scn reason mnp scn reason scn circle upe scn circle scn ideastatuschangenotifications scn businessoutputdata scn messagebody scn ideastatuschangenotifications premium change change done premium level handle prepaid unsub request coming via prepaid consumer risk case request come bulk chance queue built premium module mean processing slow issue assumption prepaid eai queue prepaid number request pushed eai se level special handling hybrid subscriber se request received via prepaid queue treated like prepaid subscriber via post paid queue treated like post paid subscriber dependency new tomcat instance required deploy new prepaid consumer module system affected area order implement prepaid post paid online churn feature main effective area change required se api se service configuration gui bos premium change done premium end mention section se cdr module change crm provisioning change network provisioning module configuration reporting change shell script db change postpaidstatuschange change done premium end mention section query post paid request date time comparison compare requesteddate notificationdate[m
[31m-business goal assist seeker respond question seeker profile extraction ingestion visume chat bot lumen scope user ask company ceo leadership team company general info company product company turnover organisation structure cab facility food snack cafeteria facility flexi timing office timing five day week work home policy mediclaim policy life insurance policy company mnc company office address company leave policy maternity policy appraisal cycle interview round time close open position job compensation onsite opportunity foreign trip employee attrition rate firing policy role responsibility job hiring process step human resource response time candidate lumen asks seeker notice period live current ctc many year working experience highest level education qualification current employer company key feature conversation seeker ask bot take turn bot proceeds scope user query handled part nlu dialogue e story seeker ask human handoff conversation lumen indicates high level scope conversation beginning basic small talk also introduced make conversation interesting seeker denial deny taken care sharing info important place abusive word bad word handled conversation nlu model accuracy improved significantly introducing tensor flow embedding place spacy library k including top indian company name looked extract company name user free text top indian city name looked extract user location user free form text lumen asks question seeker asks different question lumen lumen ai bot therefore learns data get conversation data train accuracy would greater seeker profile extracted lumen stored csv file app directory lumen response configurable file retraining required change lumen question randomized part dialogue model lumen chatbot app deployed lumata digital premise technology used python rasa stack open source framework rasa nlu rasa core slack client git project http project visume chatbot git installation procedure install python x version clone project app directory pip install r requirement txt install spacy english language model follow readme md instruction train run application known issue emoticon supported user text multi intent user asks two query intent one sentence user would get one response depending upon confidence score spelling mistake part user query auto corrected model currently model trained sample data created development prediction score intent entity action may go le wrong however training model going process would achieve production like accuracy soon next step open backlog item feedback new requirement[m
[1mdiff --git a/imp/output.csv b/imp/output.csv[m
[1mindex 02afc75..add6705 100644[m
[1m--- a/imp/output.csv[m
[1m+++ b/imp/output.csv[m
[36m@@ -18,3 +18,6 @@[m [mNot Resume     100.0[m
 Resume         69.9999988079071[m
 Resume         60.00000238418579[m
 Not Resume     60.00000238418579[m
[32m+[m[32mNot Resume     80.0000011920929[m
[32m+[m[32mResume         69.9999988079071[m
[32m+[m[32mResume         60.00000238418579[m
[1mdiff --git a/imp/x_test.npy b/imp/x_test.npy[m
[1mindex 20d732d..ca4d008 100644[m
Binary files a/imp/x_test.npy and b/imp/x_test.npy differ
[1mdiff --git a/project.py b/project.py[m
[1mindex 4fb886b..754b96c 100644[m
[1m--- a/project.py[m
[1m+++ b/project.py[m
[36m@@ -26,7 +26,7 @@[m [mdef train():[m
     path_folder=input("Enter path of folder to read files(use slash '/'):")[m
     class_type=int(input("Enter type of file(Resume-1, Not Resume-0):"))[m
     if os.path.exists(path_folder):[m
[31m-        allfilesDF=read_files(path_folder)[m
[32m+[m[32m        allfilesDF,flist=read_files(path_folder)[m
         cleanDF=clean_data(allfilesDF)[m
         mergedDF=merge_file(cleanDF,class_type)[m
         x_train=word_vector_train(mergedDF)[m
[36m@@ -41,7 +41,7 @@[m [mdef pred():[m
     path_folder=input("Enter path of folder to read files(use slash '/'):")[m
     if os.path.exists(path_folder):[m
         #flist=os.listdir(path_folder)[m
[31m-        allfilesDF=read_files(path_folder)[m
[32m+[m[32m        allfilesDF,flist=read_files(path_folder)[m
         cleanDF=clean_data(allfilesDF)[m
         x_test=word_vector_pred(cleanDF)[m
         save_array(x_test,0,0)[m
[36m@@ -59,18 +59,18 @@[m [mdef pred():[m
         i=0[m
         for (ftype,pr) in zip(y_pred,prob32):[m
             if ftype==1:[m
[31m-                #print(flist[i].split('.')[0]+':')[m
[32m+[m[32m                print(str(i+1)+"."+flist[i]+':')[m
                 print('Resume',end='\t')[m
                 print(pr[1]*100)[m
[31m-                outL.append('Resume         '+str(pr[1]*100)) [m
[32m+[m[32m                #outL.append('Resume         '+str(pr[1]*100))[m[41m [m
             else:[m
[31m-                #print(flist[i].split('.')[0]+':')[m
[32m+[m[32m                print(str(i+1)+"."+flist[i]+':')[m
                 print('Not Resume',end='\t')[m
                 print(pr[0]*100)[m
[31m-                outL.append('Not Resume     '+str(pr[0]*100)) [m
[32m+[m[32m                #outL.append('Not Resume     '+str(pr[0]*100))[m[41m [m
             i+=1[m
[31m-        output=pd.DataFrame(outL)[m
[31m-        output.to_csv('output.csv',header=None, index=None, mode='a')[m
[32m+[m[32m        #output=pd.DataFrame(outL)[m
[32m+[m[32m        #output.to_csv('output.csv',header=None, index=None, mode='a')[m
         [m
         #else:[m
          #   print("File not exists.")[m
[36m@@ -85,9 +85,11 @@[m [mdef read_files(path_folder):[m
 [m
     #reading files(.doc, .docx, .csv, .pdf)[m
     dfList=[][m
[32m+[m[32m    filename=[][m
     #word = win32.Dispatch("Word.Application")[m
     for file in filelist:[m
         try :[m
[32m+[m[32m            filename.append(file)[m
             extension = os.path.splitext(file)[1][m
             '''if extension=='.csv':[m
                 print(file)[m
[36m@@ -164,8 +166,9 @@[m [mdef read_files(path_folder):[m
             pass[m
             #print(file)[m
     #word.Quit()[m
[31m-    main_path=input("Enter path to all model data(use '/'):")[m
[31m-    indir=main_path[m
[32m+[m[32m    #main_path=input("Enter path to all model data(use '/'):")[m
[32m+[m[32m    #indir=main_path[m
[32m+[m[32m    indir='C:/Users/shadd/Rezide/imp'[m
     os.chdir(indir)[m
     allfilesDF=pd.DataFrame(dfList)[m
     allfilesDF.columns=['data'][m
[36m@@ -175,7 +178,7 @@[m [mdef read_files(path_folder):[m
     allfilesDF.reset_index(drop=True,inplace=True)[m
     allfilesDF.to_csv('allfiles.csv',index=None)[m
     #print(allfilesDF)[m
[31m-    return allfilesDF[m
[32m+[m[32m    return allfilesDF,filename[m
 [m
 def clean_data(allfilesDF):[m
     #print("In clean_data()")[m
